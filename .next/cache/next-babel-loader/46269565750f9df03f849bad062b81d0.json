{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport savedSearchCardStyles from '../public/styles/modules/components/savedsearchcard.module.css';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport DatePicker from \"react-datepicker\";\nimport { parseISO, format } from 'date-fns';\nimport subDays from \"date-fns/subDays\";\nimport addDays from \"date-fns/addDays\";\nimport { decodeHTML } from 'entities';\n\nclass SavedSearchCard extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"removeTopic\", id => {\n      let selected_topics = this.state.selected_topics;\n      let index = selected_topics.findIndex(topic => topic == id);\n\n      if (index !== -1) {\n        selected_topics.splice(index, 1);\n        this.setState({\n          'selected_topics': selected_topics\n        });\n      }\n    });\n\n    _defineProperty(this, \"removeTag\", id => {\n      let selected_tags = this.state.selected_tags;\n      let index = selected_tags.findIndex(tag => tag == id);\n\n      if (index !== -1) {\n        selected_tags.splice(index, 1);\n        this.setState({\n          'selected_tags': selected_tags\n        });\n      }\n    });\n\n    _defineProperty(this, \"removeAgency\", id => {\n      let selected_agencies = this.state.selected_agencies;\n      let index = selected_agencies.findIndex(agency => agency == id);\n\n      if (index !== -1) {\n        selected_agencies.splice(index, 1);\n        this.setState({\n          'selected_agencies': selected_agencies\n        });\n      }\n    });\n\n    _defineProperty(this, \"setDate\", (type, date) => {\n      if (type == 'start') {\n        this.setState({\n          start_date: date\n        });\n      } else if (type == 'end') {\n        this.setState({\n          end_date: date\n        });\n      }\n    });\n\n    _defineProperty(this, \"_togglePanel\", () => {\n      this.setState(state => ({\n        open: !state.open\n      }));\n    });\n\n    _defineProperty(this, \"_searchNow\", () => {\n      Router.push('/find?saved_search=' + this.props.id);\n    });\n\n    _defineProperty(this, \"_getTaxonomyName\", (term_type, term_id) => {\n      let term = this.props[term_type].find(element => element.term_id == term_id);\n      return decodeHTML(term.name);\n    });\n\n    _defineProperty(this, \"_renderSelectedTopics\", () => {\n      const {\n        selected_topics\n      } = this.state;\n\n      if (selected_topics.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_topics.map(term_id => __jsx(\"div\", {\n          key: term_id,\n          className: savedSearchCardStyles.selectedTopic\n        }, this._getTaxonomyName('topics', term_id), __jsx(\"span\", {\n          onClick: () => {\n            this.removeTopic(term_id);\n          },\n          className: savedSearchCardStyles.close\n        }, __jsx(\"img\", {\n          src: \"/images/close-blue.svg\",\n          alt: \"\"\n        })))));\n      }\n    });\n\n    _defineProperty(this, \"_renderSelectedTags\", () => {\n      const {\n        selected_tags\n      } = this.state;\n\n      if (selected_tags.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_tags.map(term_id => __jsx(\"div\", {\n          key: term_id,\n          className: savedSearchCardStyles.selectedTag\n        }, this._getTaxonomyName('tags', term_id), __jsx(\"span\", {\n          onClick: () => {\n            this.removeTag(term_id);\n          },\n          className: savedSearchCardStyles.close\n        }, __jsx(\"img\", {\n          src: \"/images/close-blue.svg\",\n          alt: \"\"\n        })))));\n      }\n    });\n\n    _defineProperty(this, \"_renderActiveFilters\", () => {\n      let count = 0;\n\n      if (this.state.selected_topics.length > 0) {\n        count++;\n      }\n\n      if (this.state.selected_tags.length > 0) {\n        count++;\n      }\n\n      if (this.state.selected_agencies.length > 0) {\n        count++;\n      }\n\n      if (this.state.selected_format !== '') {\n        count++;\n      }\n\n      if (count == 0) {\n        return null;\n      } else {\n        return __jsx(\"span\", {\n          className: savedSearchCardStyles.activeFilter\n        }, count);\n      }\n    });\n\n    _defineProperty(this, \"_renderSelectedAgencies\", () => {\n      const {\n        selected_agencies\n      } = this.state;\n\n      if (selected_agencies.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_agencies.map(term_id => __jsx(\"div\", {\n          key: term_id,\n          className: savedSearchCardStyles.selectedAgency\n        }, this._getTaxonomyName('agencies', term_id), __jsx(\"span\", {\n          onClick: () => {\n            this.removeAgency(term_id); // this.setState(state => ({\n            // \t// organization_id: '',\n            // \t// organization_name: '',\n            // }));\n          },\n          className: savedSearchCardStyles.close\n        }, __jsx(\"img\", {\n          src: \"/images/close-blue.svg\",\n          alt: \"\"\n        })))));\n      }\n    });\n\n    _defineProperty(this, \"_renderFilterPanel\", () => {\n      const {\n        topics\n      } = this.props;\n      const {\n        tags\n      } = this.props;\n      const {\n        formats\n      } = this.props;\n      const {\n        agencies\n      } = this.props;\n      const {\n        start_date\n      } = this.state;\n      const {\n        end_date\n      } = this.state;\n\n      if (this.state.open == true) {\n        return __jsx(\"section\", {\n          className: `clearfix ${savedSearchCardStyles.filterPanel}`\n        }, __jsx(\"button\", {\n          className: savedSearchCardStyles.closePanel,\n          onClick: e => {\n            this._togglePanel();\n          }\n        }, __jsx(\"img\", {\n          src: \"/images/close.svg\",\n          alt: \"\"\n        })), __jsx(\"div\", {\n          className: `small-up-1 xlarge-up-2`\n        }, __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: savedSearchCardStyles.topics\n        }, __jsx(\"label\", null, \"Topics\", __jsx(\"select\", {\n          onChange: this.handleChange,\n          name: \"select_topic\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"Select Interests\"), topics.map(topic => __jsx(\"option\", {\n          key: topic.term_id,\n          value: topic.term_id\n        }, decodeHTML(topic.name))))), this._renderSelectedTopics())), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: savedSearchCardStyles.tags\n        }, __jsx(\"label\", null, \"Tags\", __jsx(\"select\", {\n          onChange: this.handleChange,\n          name: \"select_tag\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"Select Tags\"), tags.map(tag => __jsx(\"option\", {\n          key: tag.term_id,\n          value: tag.term_id\n        }, decodeHTML(tag.name))))), this._renderSelectedTags())), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: `row collapse ${savedSearchCardStyles.dateRow}`\n        }, __jsx(\"div\", {\n          className: \"small-12 xlarge-6 columns\"\n        }, __jsx(\"label\", null, \"Date Range\", __jsx(\"div\", {\n          className: savedSearchCardStyles.dateBlock\n        }, __jsx(DatePicker, {\n          selectsStart: true,\n          startDate: this.state.start_date,\n          endDate: this.state.end_date,\n          placeholderText: \"Start Date\",\n          selected: this.state.start_date //onChange={this.setPublicationDate}\n          ,\n          onChange: date => {\n            this.setDate('start', date);\n          },\n          minDate: subDays(new Date(), 730),\n          maxDate: addDays(new Date(), 0)\n        }), __jsx(\"span\", {\n          className: savedSearchCardStyles.cal\n        }, __jsx(\"img\", {\n          src: \"/images/calendar.svg\"\n        }))))), __jsx(\"div\", {\n          className: \"small-12 xlarge-6 columns\"\n        }, __jsx(\"label\", null, __jsx(\"span\", {\n          className: savedSearchCardStyles.hiddenLabel\n        }, \"Date Range\"), __jsx(\"div\", {\n          className: savedSearchCardStyles.dateBlock\n        }, __jsx(DatePicker, {\n          placeholderText: \"End Date\",\n          selectsEnd: true,\n          startDate: this.state.start_date,\n          endDate: this.state.end_date,\n          minDate: this.state.start_date,\n          maxDate: addDays(new Date(), 0),\n          selected: this.state.end_date //onChange={this.setPublicationDate}\n          ,\n          onChange: date => {\n            this.setDate('end', date);\n          }\n        }), __jsx(\"span\", {\n          className: savedSearchCardStyles.cal\n        }, __jsx(\"img\", {\n          src: \"/images/calendar.svg\"\n        }))))))), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"label\", null, \"Format\", __jsx(\"select\", {\n          value: this.state.selected_format,\n          onChange: this.handleChange,\n          name: \"select_format\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"All\"), formats.map(format => __jsx(\"option\", {\n          key: format.term_id,\n          value: format.term_id\n        }, format.name))))), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: savedSearchCardStyles.agencies\n        }, __jsx(\"label\", null, \"Audience Focus\", __jsx(\"select\", {\n          onChange: this.handleChange,\n          name: \"select_agency\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"Select Audience\"), agencies.map(agency => __jsx(\"option\", {\n          key: agency.term_id,\n          value: agency.term_id\n        }, decodeHTML(agency.name))))), this._renderSelectedAgencies()))));\n      } else {\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"_renderActionButtons\", id => {\n      if (this.state.open == true) {\n        return __jsx(\"div\", {\n          className: savedSearchCardStyles.actions\n        }, __jsx(\"button\", {\n          onClick: () => {\n            this._deleteSavedSearch();\n          },\n          className: `button ${savedSearchCardStyles.delete}`\n        }, \"Delete\"), __jsx(\"button\", {\n          onClick: () => {\n            this._saveSearch();\n          },\n          className: `js-save-search button ${savedSearchCardStyles.saveChanges}`\n        }, \"Save Changes\"));\n      } else {\n        return __jsx(\"div\", {\n          className: savedSearchCardStyles.actions\n        }, __jsx(\"button\", {\n          onClick: () => {\n            this._togglePanel();\n          },\n          className: `button ${savedSearchCardStyles.edit}`\n        }, \"Edit\"), __jsx(\"button\", {\n          onClick: () => {\n            this._searchNow();\n          },\n          className: `button ${savedSearchCardStyles.searchNow}`\n        }, \"Search Now\"));\n      }\n    });\n\n    _defineProperty(this, \"_renderCardClass\", () => {\n      if (this.state.hide == true) {\n        return `${savedSearchCardStyles.card} clearfix hide`;\n      } else {\n        return `${savedSearchCardStyles.card} clearfix`;\n      }\n    });\n\n    _defineProperty(this, \"_deleteSavedSearch\", () => {\n      event.preventDefault();\n      let button, component, json, url;\n      component = this;\n      const token = this.props.access_token;\n\n      if (!token) {\n        return false;\n      }\n\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/delete-saved-search';\n      json = JSON.stringify({\n        \"id\": this.state.id,\n        \"access_token\": token\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        console.log(response);\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n        component.setState({\n          hide: true\n        });\n      });\n    });\n\n    _defineProperty(this, \"_saveSearch\", () => {\n      event.preventDefault();\n      let button, component, json, url, login;\n      button = document.querySelector('.js-save-search');\n      component = this;\n      const token = this.props.access_token;\n\n      if (!token) {\n        return false;\n      }\n\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/edit-saved-search';\n      json = JSON.stringify({\n        \"id\": this.state.id,\n        \"selected_topics\": this.state.selected_topics,\n        \"selected_tags\": this.state.selected_tags,\n        \"selected_agencies\": this.state.selected_agencies,\n        \"selected_format\": this.state.selected_format,\n        \"start_date\": this.state.start_date,\n        \"end_date\": this.state.end_date,\n        \"access_token\": token\n      });\n      button.disabled = true;\n      component.setState({\n        working: true\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setTimeout(function (e) {\n          button.disabled = false;\n          let flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: data.message,\n              working: false\n            });\n            return false;\n          }\n\n          component.setState({\n            working: false,\n            error: false\n          });\n        }, 1000);\n      });\n    });\n\n    this.state = {\n      open: false,\n      hide: false,\n      id: this.props.id,\n      selected_topics: this.props.selected_topics,\n      selected_tags: this.props.selected_tags,\n      selected_agencies: this.props.selected_agencies,\n      selected_format: this.props.selected_format,\n      start_date: this.processDate('start_date', this.props.start_date),\n      end_date: this.processDate('end_date', this.props.end_date),\n      search_term: this.props.search_term\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidUpdate() {\n    const {\n      working\n    } = this.state;\n    let html = document.querySelector('html');\n\n    if (working) {\n      html.classList.add('working');\n    } else {\n      html.classList.remove('working');\n    }\n  }\n\n  async handleChange(event) {\n    let name = event.target.getAttribute('name');\n\n    if (name == 'select_topic') {\n      let topic_id = event.target.value;\n\n      if (topic_id == 0) {\n        return;\n      }\n\n      let topic_r = this.state.selected_topics;\n\n      if (this.state.selected_topics.length >= 5) {\n        return;\n      }\n\n      let topic = this.props.topics.find(element => element.term_id == topic_id);\n      let index = topic_r.findIndex(topic => topic == topic_id);\n\n      if (index === -1) {\n        topic_r.push(topic.term_id);\n        this.setState({\n          'selected_topics': topic_r\n        });\n      }\n\n      let select = document.querySelector('select[name=\"select_topic\"]');\n      select.selectedIndex = 0;\n    } else if (name == 'select_tag') {\n      let tag_id = event.target.value;\n\n      if (tag_id == 0) {\n        return;\n      }\n\n      let tag_r = this.state.selected_tags;\n\n      if (this.state.selected_tags.length >= 5) {\n        return;\n      }\n\n      let tag = this.props.tags.find(element => element.term_id == tag_id);\n      let index = tag_r.findIndex(tag => tag == tag_id);\n\n      if (index === -1) {\n        tag_r.push(tag.term_id);\n        this.setState({\n          'selected_tags': tag_r\n        });\n      }\n\n      let select = document.querySelector('select[name=\"select_tag\"]');\n      select.selectedIndex = 0;\n    } else if (name == 'select_agency') {\n      let agency_id = event.target.value;\n\n      if (agency_id == 0) {\n        return;\n      }\n\n      let agency_r = this.state.selected_agencies;\n\n      if (this.state.selected_agencies.length >= 5) {\n        return;\n      }\n\n      let agency = this.props.agencies.find(element => element.term_id == agency_id);\n      let index = agency_r.findIndex(agency => agency == agency_id);\n\n      if (index === -1) {\n        agency_r.push(agency.term_id);\n        this.setState({\n          'selected_agencies': agency_r\n        });\n      }\n\n      let select = document.querySelector('select[name=\"select_agency\"]');\n      select.selectedIndex = 0;\n    } else if (name == 'select_format') {\n      let format_id = event.target.value;\n\n      if (format_id == 0 || format_id == '0') {\n        this.setState({\n          'selected_format': ''\n        });\n      } else {\n        this.setState({\n          'selected_format': format_id\n        });\n      }\n    } else {\n      this.setState({\n        [name]: event.target.value\n      }, () => {});\n    }\n  }\n\n  processDate(type, date) {\n    if (this.props[type]) {\n      return parseISO(date);\n    } else {\n      return '';\n    }\n  }\n\n  render() {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: this._renderCardClass()\n    }, __jsx(\"div\", {\n      className: `${savedSearchCardStyles.control}`\n    }, __jsx(\"div\", {\n      className: `small-12 medium-6 columns ${savedSearchCardStyles.block}`\n    }, __jsx(\"h5\", {\n      onClick: () => {\n        this._togglePanel();\n      }\n    }, \"Search \\\"\", this.props.name, \"\\\"\")), __jsx(\"div\", {\n      className: `small-12 medium-6 columns ${savedSearchCardStyles.block}`\n    }, this._renderActionButtons(this.props.id))), this._renderFilterPanel()));\n  }\n\n}\n\nexport default SavedSearchCard;","map":null,"metadata":{},"sourceType":"module"}