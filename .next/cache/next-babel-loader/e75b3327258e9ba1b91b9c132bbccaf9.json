{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Router from 'next/router';\nimport { withRouter } from 'next/router';\nimport Head from 'next/head';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport { decodeHTML } from 'entities';\nimport WordpressService from '../services/wordpress';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport postStyles from '../public/styles/modules/post.module.css';\nimport DatePicker from \"react-datepicker\";\n\nclass Edit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_saveDraft\", () => {\n      let component, json, url, publicationDateTimestamp;\n      const token = this.props.user.access_token;\n      component = this;\n\n      if (!token) {\n        return false;\n      }\n\n      publicationDateTimestamp = Math.round(this.state.publication_date.getTime() / 1000);\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/save-whitepaper-draft';\n      json = JSON.stringify({\n        \"title\": this.state.title,\n        \"ID\": this.state.ID,\n        \"authors\": this.state.authors,\n        \"format\": parseInt(this.state.format),\n        \"attachment_id\": this.state.attachment_id,\n        \"attachment_filename\": this.state.attachment_filename,\n        \"content_link\": this.state.content_link,\n        \"publication_date\": publicationDateTimestamp,\n        \"description\": this.state.description,\n        \"copyright_notice\": this.state.copyright_notice,\n        \"image_id\": this.state.image_id,\n        \"image_filename\": this.state.image_filename,\n        \"image_url\": this.state.image_url,\n        \"agency_specific\": this.state.agency_specific,\n        \"agency_parent\": this.state.agency_parent,\n        \"agency_child\": this.state.agency_child,\n        \"available_agencies\": this.state.available_agencies,\n        \"selected_topics\": this.state.selected_topics,\n        \"selected_tags\": this.state.selected_tags,\n        \"relevant\": this.state.relevant,\n        \"first_name\": this.state.first_name,\n        \"last_name\": this.state.last_name,\n        \"email_address\": this.state.email_address,\n        \"phone_number\": this.state.phone_number,\n        \"access_token\": token\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        let flat = JSON.stringify(data);\n\n        if (flat.includes('error')) {\n          alert('Something went wrong');\n          window.location.reload();\n          return false;\n        }\n\n        component.setState({\n          ID: data.ID\n        });\n      });\n    });\n\n    _defineProperty(this, \"_handlePublish\", () => {\n      event.preventDefault();\n      let button, component, json, url, login, firstNameField, lastNameField, emailAddressField, jobTitleField;\n      button = document.querySelector('.js-publish');\n      component = this;\n\n      if (this.state.first_name.length < 1) {\n        var inputFirstName = document.querySelector('input[name=\"first_name\"]');\n        this.setState({\n          error: {\n            first_name: 'Must include a first name'\n          }\n        });\n        inputFirstName.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\",\n          inline: \"nearest\"\n        });\n        return false;\n      }\n\n      if (this.state.last_name.length < 1) {\n        var inputLastName = document.querySelector('input[name=\"last_name\"]');\n        this.setState({\n          error: {\n            last_name: 'Must include a last name'\n          }\n        });\n        inputLastName.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\",\n          inline: \"nearest\"\n        });\n        return false;\n      }\n\n      var inputEmail = document.querySelector('input[name=\"email_address\"]');\n\n      if (!inputEmail.checkValidity()) {\n        this.setState({\n          error: {\n            email_address: 'Must include your email'\n          }\n        });\n        inputEmail.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\",\n          inline: \"nearest\"\n        });\n        return false;\n      }\n\n      if (this.state.phone_number.length < 1) {\n        var inputPhone = document.querySelector('input[name=\"phone_number\"]');\n        this.setState({\n          error: {\n            phone_number: 'Must include a contact phone number'\n          }\n        });\n        inputPhone.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\",\n          inline: \"nearest\"\n        });\n        return false;\n      }\n\n      const token = this.props.user.access_token;\n\n      if (!token) {\n        return false;\n      }\n\n      var publicationDateTimestamp = Math.round(this.state.publication_date.getTime() / 1000);\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/publish-whitepaper';\n      json = JSON.stringify({\n        \"title\": this.state.title,\n        \"ID\": this.state.ID,\n        \"authors\": this.state.authors,\n        \"format\": parseInt(this.state.format),\n        \"attachment_id\": this.state.attachment_id,\n        \"attachment_filename\": this.state.attachment_filename,\n        \"content_link\": this.state.content_link,\n        \"publication_date\": publicationDateTimestamp,\n        \"description\": this.state.description,\n        \"copyright_notice\": this.state.copyright_notice,\n        \"image_id\": this.state.image_id,\n        \"image_filename\": this.state.image_filename,\n        \"image_url\": this.state.image_url,\n        \"agency_specific\": this.state.agency_specific,\n        \"agency_parent\": this.state.agency_parent,\n        \"agency_child\": this.state.agency_child,\n        \"available_agencies\": this.state.available_agencies,\n        \"selected_topics\": this.state.selected_topics,\n        \"selected_tags\": this.state.selected_tags,\n        \"relevant\": this.state.relevant,\n        \"first_name\": this.state.first_name,\n        \"last_name\": this.state.last_name,\n        \"email_address\": this.state.email_address,\n        \"phone_number\": this.state.phone_number,\n        \"access_token\": token\n      });\n      button.disabled = true;\n      component.setState({\n        working: true\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setTimeout(function (e) {\n          button.disabled = false;\n          let flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: data.message,\n              working: false\n            });\n            return false;\n          }\n\n          component.setState({\n            active_tab: 1,\n            ID: '',\n            title: '',\n            authors: [\"\"],\n            format: '',\n            publication_date: new Date(),\n            attachment_id: '',\n            attachment_filename: '',\n            content_link: '',\n            agreed: false,\n            description: '',\n            copyright_notice: '',\n            image_id: '',\n            image_filename: '',\n            image_url: '',\n            agency_specific: true,\n            agency_parent: 0,\n            agency_child: 0,\n            available_agencies: [],\n            selected_topics: [],\n            selected_tags: [],\n            relevant: false,\n            first_name: '',\n            last_name: '',\n            email_address: '',\n            phone_number: '',\n            working: false,\n            error: false\n          }, () => {\n            // Redirect to profile\n            Router.push('/profile');\n          });\n        }, 1000);\n      });\n    });\n\n    _defineProperty(this, \"_renderTabClass\", tab => {\n      const {\n        active_tab\n      } = this.state;\n\n      if (active_tab == tab) {\n        return `${postStyles.tab} ${postStyles.open}`;\n      } else {\n        return `${postStyles.tab}`;\n      }\n    });\n\n    _defineProperty(this, \"_renderRadioClass\", bool => {\n      const {\n        agency_specific\n      } = this.state;\n\n      if (agency_specific == bool) {\n        return `${postStyles.active}`;\n      } else {\n        return '';\n      }\n    });\n\n    _defineProperty(this, \"_renderAgencySelectorClass\", () => {\n      const {\n        agency_specific\n      } = this.state;\n\n      if (agency_specific == true) {\n        return `${postStyles.agencySelector} ${postStyles.active}`;\n      } else {\n        return `${postStyles.agencySelector}`;\n      }\n    });\n\n    _defineProperty(this, \"_renderAgencySelector\", () => {\n      if (this.state.available_agencies.length < 1) {\n        return;\n      }\n\n      return __jsx(\"div\", {\n        className: `${postStyles.agencySelector} ${postStyles.active}`\n      }, __jsx(\"label\", null, \"Select Agency \", this._renderError('agency'), __jsx(\"select\", {\n        onChange: this.handleChange,\n        name: \"agency\"\n      }, __jsx(\"option\", {\n        value: \"0\"\n      }, \"All Agencies\"), this.state.available_agencies.map(agency => __jsx(\"option\", {\n        key: agency.term_id,\n        value: agency.term_id\n      }, agency.name)))));\n    });\n\n    _defineProperty(this, \"_renderControlIcon\", tab => {\n      const {\n        active_tab\n      } = this.state;\n\n      if (active_tab == tab) {\n        return __jsx(\"img\", {\n          src: \"/images/tab-active.svg\"\n        });\n      } else {\n        if (active_tab > tab) {\n          return __jsx(\"img\", {\n            src: \"/images/tab-complete.svg\"\n          });\n        } else {\n          return __jsx(\"img\", {\n            src: \"/images/tab-inactive.svg\"\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"_modalShowClass\", () => {\n      return this.state.modal_open;\n    });\n\n    _defineProperty(this, \"_toggleTab\", tab => {\n      var controls = document.querySelector('#controls');\n      event.preventDefault();\n\n      if (tab == 2) {\n        if (this.state.title.length < 10) {\n          var inputTitle = document.querySelector('input[name=\"title\"]');\n          this.setState({\n            error: {\n              title: 'must be at least 60 characters'\n            }\n          });\n          inputTitle.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n\n        if (this.state.title.length > 100) {\n          var inputTitle = document.querySelector('input[name=\"title\"]');\n          this.setState({\n            error: {\n              title: 'The title can be no more than 100 characters.'\n            }\n          });\n          inputTitle.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n\n        if (!this.state.format) {\n          var selectFormat = document.querySelector('select[name=\"format\"]');\n          this.setState({\n            error: {\n              format: 'Please select a format'\n            }\n          });\n          selectFormat.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return;\n        }\n\n        if (this.state.authors.length < 1) {\n          var inputAuthor = document.querySelector('input[name=\"author\"]');\n          this.setState({\n            error: {\n              authors: 'Please input at least one author'\n            }\n          });\n          inputAuthor.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return;\n        }\n\n        if (!this.state.publication_date) {\n          var inputPubDate = document.querySelector('input[name=\"publication_date\"]');\n          this.setState({\n            error: {\n              publication_date: 'Please select a publication date'\n            }\n          });\n          inputPubDate.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return;\n        }\n\n        if (!this.state.agreed) {\n          this.setState({\n            error: {\n              agreed: 'You must agree to the terms to continue'\n            }\n          });\n          return;\n        }\n\n        if (!this.state.attachment_id) {\n          if (!this.state.content_link) {\n            this.setState({\n              error: {\n                file: 'You must upload a file or add a link to your content'\n              }\n            });\n            return;\n          }\n        }\n      }\n\n      if (tab == 3) {\n        if (this.state.description.length < 100) {\n          var inputDescription = document.querySelector('textarea[name=\"description\"]');\n          this.setState({\n            error: {\n              description: 'must be at least 100 characters'\n            }\n          });\n          inputDescription.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n      }\n\n      if (tab == 4) {\n        if (this.state.selected_topics.length < 1) {\n          var inputTopic = document.querySelector('select[name=\"selected_topics\"]');\n          this.setState({\n            error: {\n              topic: 'Please select a topic.'\n            }\n          });\n          inputTopic.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n      }\n\n      this._saveDraft();\n\n      this.setState(state => ({\n        active_tab: tab,\n        error: false\n      }));\n      controls.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"end\",\n        inline: \"nearest\"\n      });\n    });\n\n    _defineProperty(this, \"_renderAuthorsBlock\", () => {\n      const {\n        authors\n      } = this.state;\n\n      if (authors.length < 1) {\n        return __jsx(\"div\", {\n          key: \"0\",\n          className: postStyles.authorWrap\n        }, __jsx(\"input\", {\n          onChange: this.handleChange,\n          name: \"author\",\n          ref: this.input,\n          type: \"text\",\n          placeholder: \"Type author name\"\n        }), __jsx(\"span\", {\n          onClick: () => {\n            this._deleteAuthor(0);\n          },\n          className: postStyles.deleteAuthor\n        }, __jsx(\"img\", {\n          src: \"/images/trash.svg\"\n        })));\n      } else {\n        return __jsx(React.Fragment, null, authors.map((name, index) => __jsx(\"div\", {\n          \"data-index\": this.state.authors[index],\n          key: index,\n          className: postStyles.authorWrap\n        }, __jsx(\"input\", {\n          onChange: e => this.setAuthors(index, e),\n          name: \"author\",\n          value: this.state.authors[index],\n          type: \"text\",\n          placeholder: \"Type author name\"\n        }), __jsx(\"span\", {\n          onClick: () => {\n            this._deleteAuthor(index);\n          },\n          className: postStyles.deleteAuthor\n        }, __jsx(\"img\", {\n          src: \"/images/trash.svg\"\n        })))));\n      }\n    });\n\n    _defineProperty(this, \"_addAuthor\", () => {\n      let authors_r = this.state.authors;\n\n      if (this.state.authors.length >= 10) {\n        this.setState({\n          error: {\n            authors: 'Maximum of 10 authors'\n          }\n        });\n        return;\n      }\n\n      authors_r.push(\"\");\n      this.setState({\n        'authors': authors_r\n      });\n    });\n\n    _defineProperty(this, \"_getTaxonomyName\", (term_type, term_id) => {\n      // console.log('get tax name');\n      // console.log(term_type);\n      // console.log(term_id);\n      // return \"Name\";\n      let term = this.props[term_type].find(element => element.term_id == term_id);\n      return decodeHTML(term.name);\n    });\n\n    _defineProperty(this, \"_renderSelectedTopics\", () => {\n      const {\n        selected_topics\n      } = this.state;\n\n      if (selected_topics.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_topics.map(term_id => __jsx(\"div\", {\n          key: term_id,\n          className: postStyles.selectedTopic\n        }, this._getTaxonomyName('topics', term_id), __jsx(\"span\", {\n          onClick: () => {\n            this.removeTopic(term_id); // this.setState(state => ({\n            // \t// organization_id: '',\n            // \t// organization_name: '',\n            // }));\n          },\n          className: postStyles.close\n        }, __jsx(\"img\", {\n          src: \"/images/close-blue.svg\",\n          alt: \"\"\n        })))));\n      }\n    });\n\n    _defineProperty(this, \"_renderSelectedTags\", () => {\n      const {\n        selected_tags\n      } = this.state;\n\n      if (selected_tags.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_tags.map(term_id => __jsx(\"div\", {\n          key: term_id,\n          className: postStyles.selectedTag\n        }, this._getTaxonomyName('tags', term_id), __jsx(\"span\", {\n          onClick: () => {\n            this.removeTag(term_id);\n          },\n          className: postStyles.close\n        }, __jsx(\"img\", {\n          src: \"/images/close-blue.svg\",\n          alt: \"\"\n        })))));\n      }\n    });\n\n    _defineProperty(this, \"removeTopic\", id => {\n      let selected_topics = this.state.selected_topics;\n      let index = selected_topics.findIndex(topic => topic == id);\n\n      if (index !== -1) {\n        selected_topics.splice(index, 1);\n        this.setState({\n          'selected_topics': selected_topics\n        });\n      }\n    });\n\n    _defineProperty(this, \"removeTag\", id => {\n      let selected_tags = this.state.selected_tags;\n      let index = selected_tags.findIndex(tag => tag == id);\n\n      if (index !== -1) {\n        selected_tags.splice(index, 1);\n        this.setState({\n          'selected_tags': selected_tags\n        });\n      }\n    });\n\n    _defineProperty(this, \"_deleteAuthor\", index => {\n      let authors = this.state.authors;\n      authors.splice(index, 1);\n      this.setState({\n        'authors': authors\n      });\n    });\n\n    this.state = {\n      active_tab: 1,\n      ID: '',\n      title: '',\n      authors: [\"\"],\n      format: '',\n      publication_date: new Date(),\n      attachment_id: '',\n      attachment_filename: '',\n      content_link: '',\n      agreed: false,\n      description: '',\n      copyright_notice: '',\n      image_id: '',\n      image_filename: '',\n      image_url: '',\n      agency_specific: true,\n      agency_parent: 0,\n      agency_child: 0,\n      available_agencies: [],\n      selected_topics: [],\n      selected_tags: [],\n      first_name: '',\n      last_name: '',\n      email_address: '',\n      phone_number: '',\n      relevant: false,\n      working: false,\n      error: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.setAuthors = this.setAuthors.bind(this);\n    this.input = React.createRef();\n  }\n\n  static async getInitialProps(ctx) {\n    const wordpress = new WordpressService();\n    const formats = await wordpress.fetchFormats();\n    const topics = await wordpress.fetchTopics();\n    const tags = await wordpress.fetchTags();\n    const parent = 0;\n    const agencies = await wordpress.fetchAgencies(parent);\n    return {\n      formats,\n      agencies,\n      topics,\n      tags\n    };\n  }\n\n  async componentDidMount() {\n    if (!this.props.user) {\n      Router.push('/login');\n      return false;\n    }\n\n    const whitePaperID = this.props.router.query.id;\n    const wordpress = new WordpressService();\n    const whitepaper = await wordpress.fetchWhitepaper(whitePaperID);\n    console.log(whitepaper);\n    let dateObj = new Date(whitepaper.publication_date * 1000);\n\n    if (!this.props.user) {\n      let login = document.querySelector('.js-login');\n      login.click();\n      return false;\n    }\n\n    const access_token = this.props.user.access_token;\n    const user = await wordpress.getUser(access_token);\n    var file_url = whitepaper.file_url;\n    var filename = file_url.substring(file_url.lastIndexOf('/') + 1);\n    var data = decodeHTML(whitepaper.description);\n    var strippedDescription = data.replace(/(<([^>]+)>)/ig, \"\");\n    let featured_img_url = '';\n    let featured_image_id = '';\n    let image_filename = '';\n\n    if (whitepaper.featured_media) {\n      featured_img_url = whitepaper.featured_media.file;\n      featured_image_id = whitepaper.featured_media.media_id;\n      image_filename = featured_img_url.substring(featured_img_url.lastIndexOf('/') + 1);\n    }\n\n    let selected_topics_r = new Array();\n    whitepaper.topics.forEach(element => selected_topics_r.push(element.term_id));\n    let selected_tags_r = new Array();\n    whitepaper.tags.forEach(element => selected_tags_r.push(element.term_id));\n    this.setState(state => ({\n      first_name: whitepaper.first_name,\n      last_name: whitepaper.last_name,\n      email_address: whitepaper.email_address,\n      phone_number: whitepaper.phone_number,\n      active_tab: 1,\n      ID: whitepaper.id,\n      title: whitepaper.title,\n      authors: whitepaper.authors,\n      format: parseInt(whitepaper.format[0].term_id),\n      publication_date: dateObj,\n      attachment_id: '',\n      attachment_filename: filename,\n      content_link: whitepaper.content_link,\n      agreed: true,\n      description: strippedDescription,\n      copyright_notice: whitepaper.copyright_notice,\n      image_id: featured_image_id,\n      image_filename: '',\n      image_url: featured_img_url,\n      agency_specific: true,\n      agency_parent: 0,\n      agency_child: 0,\n      available_agencies: [],\n      selected_topics: selected_topics_r,\n      selected_tags: selected_tags_r\n    }));\n  }\n\n  componentDidUpdate() {\n    const {\n      working\n    } = this.state;\n    let html = document.querySelector('html');\n\n    if (working) {\n      html.classList.add('working');\n    } else {\n      html.classList.remove('working');\n    }\n  }\n\n  isURL(url) {\n    var regexp = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n    return regexp.test(url);\n  }\n\n  setPublicationDate(date) {\n    console.log(date);\n    this.setState({\n      publication_date: date\n    });\n  }\n\n  triggerFileUpload() {\n    document.querySelector('#pdf-upload').dispatchEvent(new Event('submit'));\n  }\n\n  uploadPDFSubmit(e) {\n    e.preventDefault();\n    let formData = new FormData(e.target);\n    const token = this.props.user.access_token;\n    let component = this;\n    let file = formData.get('pdf_file');\n    formData.append(\"token\", token);\n\n    if (!token) {\n      return false;\n    }\n\n    if (file.size > 41943040) {\n      this.setState({\n        error: {\n          file: 'Selected file is larger than 40MB'\n        }\n      });\n      return false;\n    }\n\n    if (file.type !== 'application/pdf') {\n      this.setState({\n        error: {\n          file: 'Unsupported file type. Please select a PDF.'\n        }\n      });\n      return false;\n    }\n\n    component.setState({\n      working: true\n    });\n    let url = e.target.action;\n    fetch(url, {\n      method: 'POST',\n      body: formData\n    }).then(response => {\n      return response.json();\n    }).then(body => {\n      let flat = JSON.stringify(body);\n\n      if (flat.includes('error')) {\n        component.setState({\n          error: {\n            file: 'The selected file could not be uploaded. Please contact support for assistance.'\n          },\n          working: false\n        });\n        return false;\n      } else {\n        component.setState({\n          \"attachment_id\": body,\n          \"attachment_filename\": file.name,\n          \"content_link\": '',\n          working: false\n        });\n      }\n    });\n  }\n\n  triggerImageUpload() {\n    document.querySelector('#image-upload').dispatchEvent(new Event('submit'));\n  }\n\n  uploadImageSubmit(e) {\n    e.preventDefault();\n    let formData = new FormData(e.target);\n    const token = this.props.user.access_token;\n    let component = this;\n    let file = formData.get('image_file');\n    formData.append(\"token\", token);\n    formData.append(\"ID\", this.state.ID);\n\n    if (!token) {\n      return false;\n    }\n\n    if (file.size > 10048576) {\n      this.setState({\n        error: {\n          image: 'Selected file is larger than 10MB'\n        }\n      });\n      return false;\n    }\n\n    var pattern = /image-*/;\n\n    if (!file.type.match(pattern)) {\n      this.setState({\n        error: {\n          image: 'Unsupported file type. Please select a JPG or PNG.'\n        }\n      });\n      return false;\n    }\n\n    component.setState({\n      working: true\n    });\n    let url = e.target.action;\n    fetch(url, {\n      method: 'POST',\n      body: formData\n    }).then(response => {\n      return response.json();\n    }).then(body => {\n      let flat = JSON.stringify(body);\n\n      if (flat.includes('error')) {\n        component.setState({\n          error: {\n            image: 'The selected file could not be uploaded. There may be something wrong with your image. Please contact support for assistance.'\n          },\n          working: false\n        });\n        return false;\n      } else {\n        component.setState({\n          image_id: body.ID,\n          image_filename: file.name,\n          image_url: body.url,\n          working: false\n        });\n      }\n    });\n  }\n\n  setAuthors(index, e) {\n    let authors = this.state.authors;\n    authors[index] = e.target.value;\n    this.setState({\n      'authors': authors\n    });\n  }\n\n  async handleChange(event) {\n    let name = event.target.getAttribute('name');\n\n    if (name == 'select_topic') {\n      let topic_id = event.target.value;\n\n      if (topic_id == 0) {\n        return;\n      }\n\n      let topic_r = this.state.selected_topics;\n\n      if (this.state.selected_topics.length >= 2) {\n        return;\n      }\n\n      let topic = this.props.topics.find(element => element.term_id == topic_id);\n      let index = topic_r.findIndex(term_id => term_id == topic_id);\n\n      if (index === -1) {\n        topic_r.push(topic.term_id);\n        this.setState({\n          'selected_topics': topic_r\n        });\n      }\n\n      let select = document.querySelector('select[name=\"select_topic\"]');\n      select.selectedIndex = 0;\n    } else if (name == 'select_tag') {\n      let tag_id = event.target.value;\n\n      if (tag_id == 0) {\n        return;\n      }\n\n      let tag_r = this.state.selected_tags;\n\n      if (this.state.selected_tags.length >= 5) {\n        return;\n      }\n\n      let tag = this.props.tags.find(element => element.term_id == tag_id);\n      let index = tag_r.findIndex(term_id => term_id == tag_id);\n\n      if (index === -1) {\n        tag_r.push(tag.term_id);\n        this.setState({\n          'selected_tags': tag_r\n        });\n      }\n\n      let select = document.querySelector('select[name=\"select_tag\"]');\n      select.selectedIndex = 0;\n    } else if (name == 'agreed') {\n      this.setState({\n        [name]: !this.state.agreed\n      });\n    } else if (name == 'content_link') {\n      if (this.isURL(event.target.value) || event.target.value == '') {\n        this.setState({\n          attachment_id: '',\n          attachment_filename: '',\n          content_link: event.target.value\n        });\n      }\n    } else if (name == 'agency_specific') {\n      this.setState({\n        [name]: !this.state.agency_specific\n      });\n    } else if (name == 'focus') {\n      const agency_parent = event.target.value;\n      let agencies;\n\n      if (parseInt(agency_parent) == 0) {\n        agencies = '';\n      } else {\n        const wordpress = new WordpressService();\n        agencies = await wordpress.fetchAgencies(agency_parent);\n      }\n\n      this.setState({\n        agency_parent: agency_parent,\n        available_agencies: agencies\n      });\n    } else if (name == 'agency') {\n      this.setState({\n        agency_child: event.target.value\n      });\n    } else if (name == 'relevant') {\n      this.setState({\n        [name]: !this.state.relevant\n      });\n    } else {\n      this.setState({\n        [name]: event.target.value\n      }, () => {});\n    }\n  }\n\n  _renderError(field) {\n    if (this.state.error) {\n      let flat = JSON.stringify(this.state.error);\n\n      if (flat.includes('title')) {\n        if (field == 'title') {\n          return __jsx(\"span\", {\n            className: `${postStyles.errorText}`\n          }, this.state.error.title);\n        }\n      }\n\n      if (flat.includes('format')) {\n        if (field == 'format') {\n          return __jsx(\"span\", {\n            className: `${postStyles.errorText}`\n          }, this.state.error.format);\n        }\n      }\n\n      if (flat.includes('authors')) {\n        if (field == 'authors') {\n          return __jsx(\"span\", {\n            className: `${postStyles.errorText}`\n          }, this.state.error.authors);\n        }\n      }\n\n      if (flat.includes('publication_date')) {\n        if (field == 'publication_date') {\n          return __jsx(\"span\", {\n            className: `${postStyles.errorText}`\n          }, this.state.error.publication_date);\n        }\n      }\n\n      if (flat.includes('file')) {\n        if (field == 'file') {\n          return __jsx(\"span\", {\n            className: `${postStyles.errorText}`\n          }, this.state.error.file);\n        }\n      }\n\n      if (flat.includes('description')) {\n        if (field == 'description') {\n          return __jsx(\"span\", {\n            className: `${postStyles.errorText}`\n          }, this.state.error.description);\n        }\n      }\n\n      if (flat.includes('agreed')) {\n        if (field == 'agreed') {\n          return __jsx(React.Fragment, null, __jsx(\"br\", null), __jsx(\"span\", {\n            className: `${postStyles.errorText}`\n          }, this.state.error.agreed));\n        }\n      }\n\n      if (flat.includes('image')) {\n        if (field == 'image') {\n          return __jsx(\"span\", {\n            className: `${postStyles.errorText}`\n          }, this.state.error.image);\n        }\n      }\n\n      if (flat.includes('topic')) {\n        if (field == 'topic') {\n          return __jsx(React.Fragment, null, __jsx(\"span\", {\n            className: `${postStyles.errorText}`\n          }, this.state.error.topic));\n        }\n      }\n\n      if (flat.includes('first_name')) {\n        if (field == 'first_name') {\n          return __jsx(React.Fragment, null, __jsx(\"span\", {\n            className: `${postStyles.errorText}`\n          }, this.state.error.first_name));\n        }\n      }\n\n      if (flat.includes('last_name')) {\n        if (field == 'last_name') {\n          return __jsx(React.Fragment, null, __jsx(\"span\", {\n            className: `${postStyles.errorText}`\n          }, this.state.error.last_name));\n        }\n      }\n\n      if (flat.includes('email_address')) {\n        if (field == 'email_address') {\n          return __jsx(React.Fragment, null, __jsx(\"span\", {\n            className: `${postStyles.errorText}`\n          }, this.state.error.email_address));\n        }\n      }\n\n      if (flat.includes('phone_number')) {\n        if (field == 'phone_number') {\n          return __jsx(React.Fragment, null, __jsx(\"span\", {\n            className: `${postStyles.errorText}`\n          }, this.state.error.phone_number));\n        }\n      }\n    }\n  }\n\n  _renderAttachmentFilename() {\n    if (this.state.attachment_filename != '') {\n      return __jsx(\"span\", {\n        className: `${postStyles.attachmentFilename}`\n      }, this.state.attachment_filename);\n    }\n  }\n\n  _renderImageFilename() {\n    if (this.state.image_filename != '') {\n      return __jsx(\"span\", {\n        className: `${postStyles.attachmentFilename}`\n      }, this.state.image_filename);\n    }\n  }\n\n  _renderImagePreview() {\n    if (this.state.image_url != '') {\n      return __jsx(\"img\", {\n        src: this.state.image_url\n      });\n    }\n  }\n\n  render() {\n    const display_name = this.props.display_name;\n    const {\n      user\n    } = this.props;\n    const {\n      formats\n    } = this.props;\n    const {\n      agencies\n    } = this.props;\n    const {\n      available_agencies\n    } = this.state.available_agencies;\n    const {\n      topics\n    } = this.props;\n    const {\n      tags\n    } = this.props;\n    const title = 'Edit Whitepaper';\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n      key: \"page-title\"\n    }, title), __jsx(\"meta\", {\n      charset: \"utf-8\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"180x180\",\n      href: \"/apple-touch-icon.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"32x32\",\n      href: \"/favicon-32x32.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"16x16\",\n      href: \"/favicon-16x16.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileImage\",\n      content: \"/favicon-270x270.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileColor\",\n      content: \"#ffffff\"\n    }), __jsx(\"link\", {\n      rel: \"manifest\",\n      href: \"/site.webmanifest\"\n    })), __jsx(Header, _extends({}, user, {\n      display_name: display_name\n    })), __jsx(\"div\", {\n      className: `row ${postStyles.pageHeader} text-center`\n    }, __jsx(\"div\", {\n      className: \"small-12 columns\"\n    }, __jsx(\"h1\", null, \"Edit Whitepaper\"), __jsx(\"img\", {\n      className: postStyles.hr,\n      src: \"/images/sep.svg\",\n      alt: \"\"\n    }))), __jsx(\"div\", {\n      className: `row ${postStyles.pageContent}`\n    }, __jsx(\"div\", {\n      className: `small-12 columns`\n    }, __jsx(\"div\", {\n      id: \"controls\",\n      className: postStyles.controls\n    }, __jsx(\"ul\", null, __jsx(\"li\", {\n      className: postStyles.active,\n      onClick: () => {\n        this._toggleTab(1);\n      }\n    }, __jsx(\"div\", {\n      className: postStyles.icon\n    }, this._renderControlIcon(1)), __jsx(\"span\", null, \"Main\")), __jsx(\"li\", {\n      onClick: () => {\n        this._toggleTab(2);\n      }\n    }, __jsx(\"div\", {\n      className: postStyles.icon\n    }, this._renderControlIcon(2)), __jsx(\"span\", null, \"Description\")), __jsx(\"li\", {\n      onClick: () => {\n        this._toggleTab(3);\n      }\n    }, __jsx(\"div\", {\n      className: postStyles.icon\n    }, this._renderControlIcon(3)), __jsx(\"span\", null, \"Information\")), __jsx(\"li\", {\n      onClick: () => {\n        this._toggleTab(4);\n      }\n    }, __jsx(\"div\", {\n      className: postStyles.icon\n    }, this._renderControlIcon(4)), __jsx(\"span\", null, \"Publication\")))), __jsx(\"div\", {\n      className: postStyles.tabs\n    }, __jsx(\"div\", {\n      className: this._renderTabClass(1)\n    }, __jsx(\"div\", {\n      className: `${postStyles.form}`\n    }, __jsx(\"div\", {\n      className: `row ${postStyles.row}`\n    }, __jsx(\"div\", {\n      className: \"small-12 columns\"\n    }, __jsx(\"label\", null, \"Title\", this._renderError('title'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"title\",\n      value: this.state.title,\n      type: \"text\",\n      placeholder: \"Type your title of your content\"\n    })), __jsx(\"label\", null, \"Format\", this._renderError('format'), __jsx(\"select\", {\n      value: this.state.format,\n      onChange: this.handleChange,\n      name: \"format\"\n    }, __jsx(\"option\", null, \"Select Format\"), formats.map(format => __jsx(\"option\", {\n      key: format.term_id,\n      value: format.term_id\n    }, format.name)))), __jsx(\"label\", null, \"Authors\", this._renderError('authors'), __jsx(\"span\", {\n      className: postStyles.subLabel\n    }, __jsx(\"span\", {\n      className: postStyles.dot\n    }, \"\\xB7\"), \" up to 10\"), __jsx(\"div\", {\n      className: postStyles.authorBlock\n    }, this._renderAuthorsBlock())), __jsx(\"div\", {\n      onClick: () => {\n        this._addAuthor();\n      },\n      className: postStyles.addAuthor\n    }, __jsx(\"span\", null, __jsx(\"img\", {\n      src: \"/images/add-author.svg\"\n    })), __jsx(\"h5\", null, \"Add Author\")), __jsx(\"label\", null, \"Publish Date \", __jsx(\"img\", {\n      className: postStyles.question,\n      src: \"/images/question.png\"\n    }), \" \", this._renderError('publication_date'), __jsx(\"div\", {\n      className: postStyles.dateBlock\n    }, __jsx(DatePicker, {\n      selected: this.state.publication_date //onChange={this.setPublicationDate}\n      ,\n      onChange: date => {\n        this.setPublicationDate(date);\n      }\n    }), __jsx(\"span\", {\n      className: postStyles.cal\n    }, __jsx(\"img\", {\n      src: \"/images/calendar.svg\"\n    })))), __jsx(\"label\", null, \"Upload Your File \", this._renderError('file'), __jsx(\"div\", {\n      className: postStyles.addFile\n    }, __jsx(\"form\", {\n      id: \"pdf-upload\",\n      action: \"https://gwpadmin.codewrangler.io/api/gwp/v1/upload-pdf\",\n      onSubmit: e => this.uploadPDFSubmit(e),\n      method: \"post\",\n      encType: \"multipart/form-data\"\n    }, __jsx(\"input\", {\n      onChange: this.triggerFileUpload,\n      name: \"pdf_file\",\n      type: \"file\",\n      accept: \"application/pdf\"\n    }), __jsx(\"span\", null, __jsx(\"img\", {\n      src: \"/images/upload.svg\"\n    })), __jsx(\"h5\", null, \"Upload Content\")), this._renderAttachmentFilename())), __jsx(\"div\", {\n      className: postStyles.agree\n    }, __jsx(\"label\", {\n      className: postStyles.label\n    }, \" I give GovWhitePapers permission to post this content.\", __jsx(\"input\", {\n      type: \"checkbox\",\n      onChange: this.handleChange,\n      name: \"agreed\",\n      checked: this.state.agreed,\n      value: this.state.agreed\n    }), __jsx(\"span\", {\n      className: postStyles.checkmark\n    }), this._renderError('agreed'))), __jsx(\"div\", {\n      className: postStyles.externalLink\n    }, __jsx(\"div\", {\n      className: postStyles.line\n    }, __jsx(\"hr\", null), __jsx(\"span\", null, \"or add external link\")), __jsx(\"label\", null, \"Link to Content\", __jsx(\"input\", {\n      type: \"url\",\n      onChange: this.handleChange,\n      name: \"content_link\",\n      checked: this.state.content_link,\n      value: this.state.content_link,\n      placeholder: \"External Link\"\n    }))), __jsx(\"div\", {\n      className: postStyles.nav\n    }, __jsx(\"button\", {\n      onClick: () => {\n        this._toggleTab(2);\n      },\n      className: `button ${postStyles.button}`\n    }, \"Save and Continue\")))))), __jsx(\"div\", {\n      className: this._renderTabClass(2)\n    }, __jsx(\"div\", {\n      className: `${postStyles.form}`\n    }, __jsx(\"div\", {\n      className: `row ${postStyles.row}`\n    }, __jsx(\"div\", {\n      className: \"small-12 columns\"\n    }, __jsx(\"label\", null, \"Description \", this._renderError('description'), __jsx(\"textarea\", {\n      onChange: this.handleChange,\n      name: \"description\",\n      value: this.state.description,\n      placeholder: \"Add a description...\",\n      rows: \"5\"\n    })), __jsx(\"label\", null, \"Copyright Notice\", __jsx(\"span\", {\n      className: postStyles.subLabel\n    }, __jsx(\"span\", {\n      className: postStyles.dot\n    }, \"\\xB7\"), \" optional\"), __jsx(\"div\", {\n      className: postStyles.copyright\n    }, __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"copyright_notice\",\n      value: this.state.copyright_notice,\n      type: \"text\",\n      placeholder: \"Copyright text\"\n    }), __jsx(\"span\", null, \"\\xA9\"))), __jsx(\"label\", null, __jsx(\"div\", {\n      className: postStyles.addPhoto\n    }, __jsx(\"form\", {\n      id: \"image-upload\",\n      action: \"https://gwpadmin.codewrangler.io/api/gwp/v1/upload-whitepaper-image\",\n      onSubmit: e => this.uploadImageSubmit(e),\n      method: \"post\",\n      encType: \"multipart/form-data\"\n    }, __jsx(\"input\", {\n      onChange: this.triggerImageUpload,\n      name: \"image_file\",\n      type: \"file\",\n      accept: \"image/jpeg,image/png\"\n    }), __jsx(\"span\", null, __jsx(\"img\", {\n      src: \"/images/upload-large.svg\"\n    })), __jsx(\"h3\", null, \"Upload Photo\"), __jsx(\"p\", null, \"Max size 10MB; minimum 300 pixels. Recommended size: 600x500 pixels\")), this._renderImageFilename(), this._renderError('image'))), __jsx(\"div\", {\n      className: postStyles.imagePreview\n    }, this._renderImagePreview()), __jsx(\"div\", {\n      className: postStyles.nav\n    }, __jsx(\"button\", {\n      onClick: () => {\n        this._toggleTab(3);\n      },\n      className: `button ${postStyles.button}`\n    }, \"Save and Continue\")))))), __jsx(\"div\", {\n      className: this._renderTabClass(3)\n    }, __jsx(\"div\", {\n      className: `${postStyles.form}`\n    }, __jsx(\"div\", {\n      className: `row ${postStyles.row}`\n    }, __jsx(\"div\", {\n      className: \"small-12 columns\"\n    }, __jsx(\"div\", {\n      className: postStyles.agency\n    }, __jsx(\"p\", null, \"Is your content government agency or state and local specific?\"), __jsx(\"ul\", {\n      className: postStyles.agencyTypeSelector\n    }, __jsx(\"li\", {\n      className: this._renderRadioClass(true)\n    }, __jsx(\"label\", {\n      className: `button ${postStyles.button}`\n    }, __jsx(\"input\", {\n      onChange: this.handleChange,\n      type: \"radio\",\n      value: \"1\",\n      name: \"agency_specific\",\n      checked: this.state.agency_specific === true\n    }), \"Yes, it's specific\")), __jsx(\"li\", {\n      className: this._renderRadioClass(false)\n    }, __jsx(\"label\", {\n      className: `button ${postStyles.button}`\n    }, __jsx(\"input\", {\n      onChange: this.handleChange,\n      type: \"radio\",\n      value: \"0\",\n      name: \"agency_specific\",\n      checked: this.state.agency_specific === false\n    }), \"No, it's not specific\"))), __jsx(\"div\", {\n      className: this._renderAgencySelectorClass()\n    }, __jsx(\"label\", null, \"Audience Focus \", this._renderError('focus'), __jsx(\"select\", {\n      onChange: this.handleChange,\n      name: \"focus\"\n    }, __jsx(\"option\", {\n      value: \"0\"\n    }, \"Select Focus\"), agencies.map(agency => __jsx(\"option\", {\n      key: agency.term_id,\n      value: agency.term_id\n    }, decodeHTML(agency.name))))), this._renderAgencySelector())), __jsx(\"div\", {\n      className: postStyles.topics\n    }, __jsx(\"label\", null, \"Topics \", this._renderError('topic'), __jsx(\"span\", {\n      className: postStyles.subLabel\n    }, __jsx(\"span\", {\n      className: postStyles.dot\n    }, \"\\xB7\"), \" up to 2\"), __jsx(\"select\", {\n      onChange: this.handleChange,\n      name: \"select_topic\"\n    }, __jsx(\"option\", {\n      value: \"0\"\n    }, \"Select Interests\"), topics.map(topic => __jsx(\"option\", {\n      key: topic.term_id,\n      value: topic.term_id\n    }, decodeHTML(topic.name))))), this._renderSelectedTopics()), __jsx(\"div\", {\n      className: postStyles.tags\n    }, __jsx(\"label\", null, \"Tags \", this._renderError('tag'), __jsx(\"span\", {\n      className: postStyles.subLabel\n    }, __jsx(\"span\", {\n      className: postStyles.dot\n    }, \"\\xB7\"), \" up to 5\"), __jsx(\"select\", {\n      onChange: this.handleChange,\n      name: \"select_tag\"\n    }, __jsx(\"option\", {\n      value: \"0\"\n    }, \"Select Tags\"), tags.map(tag => __jsx(\"option\", {\n      key: tag.term_id,\n      value: tag.term_id\n    }, decodeHTML(tag.name))))), this._renderSelectedTags()), __jsx(\"div\", {\n      className: postStyles.relevant\n    }, __jsx(\"label\", {\n      className: postStyles.label\n    }, \" This content is relevant to the government/military community.\", __jsx(\"input\", {\n      type: \"checkbox\",\n      onChange: this.handleChange,\n      name: \"relevant\",\n      checked: this.state.relevant,\n      value: this.state.relevant\n    }), __jsx(\"span\", {\n      className: postStyles.checkmark\n    }), this._renderError('relevant'))), __jsx(\"div\", {\n      className: postStyles.nav\n    }, __jsx(\"button\", {\n      onClick: () => {\n        this._toggleTab(4);\n      },\n      className: `button ${postStyles.button}`\n    }, \"Save and Continue\")))))), __jsx(\"div\", {\n      className: this._renderTabClass(4)\n    }, __jsx(\"div\", {\n      className: `${postStyles.form}`\n    }, __jsx(\"div\", {\n      className: `row ${postStyles.row}`\n    }, __jsx(\"div\", {\n      className: \"small-12 columns\"\n    }, __jsx(\"div\", {\n      className: postStyles.publication\n    }, __jsx(\"label\", null, \"First Name \", this._renderError('first_name'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"first_name\",\n      value: this.state.first_name,\n      type: \"text\",\n      placeholder: \"\"\n    })), __jsx(\"label\", null, \"Last Name \", this._renderError('last_name'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"last_name\",\n      value: this.state.last_name,\n      type: \"text\",\n      placeholder: \"\"\n    })), __jsx(\"label\", null, \"Email \", this._renderError('email_address'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"email_address\",\n      value: this.state.email_address,\n      type: \"email\",\n      placeholder: \"\"\n    })), __jsx(\"label\", null, \"Phone \", this._renderError('phone_number'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"phone_number\",\n      value: this.state.phone_number,\n      type: \"text\",\n      placeholder: \"\"\n    }))), __jsx(\"div\", {\n      className: postStyles.nav\n    }, __jsx(\"button\", {\n      onClick: this._handlePublish,\n      className: `js-publish button ${postStyles.button}`\n    }, \"Publish\"))))))))), __jsx(Footer, null));\n  }\n\n}\n\nexport default withRouter(Edit);","map":null,"metadata":{},"sourceType":"module"}