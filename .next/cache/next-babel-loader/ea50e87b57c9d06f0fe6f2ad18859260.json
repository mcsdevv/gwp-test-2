{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Header from '../components/Header';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport { decodeHTML } from 'entities';\nimport WordpressService from '../services/wordpress';\nimport Footer from '../components/Footer';\nimport verifyOrganizationStyles from '../public/styles/modules/verifyorganization.module.css';\n\nclass PasswordReset extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_verifyOrganization\", () => {\n      let component, json, url;\n      component = this;\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/verify-organization';\n      json = JSON.stringify({\n        \"token\": this.props.token\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setTimeout(function (e) {\n          let flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            console.log(data);\n            component.setState({\n              error: data.message,\n              complete: true\n            });\n            return false;\n          }\n\n          component.setState({\n            error: false,\n            complete: true\n          });\n        }, 1000);\n      });\n    });\n\n    this.state = {\n      complete: false,\n      error: false // working: false,\n      // confirmation: false,\n      // new_password: '',\n      // new_password_confirm: ''\n\n    };\n  }\n\n  componentDidMount() {\n    console.log('token');\n    console.log(this.props.token);\n\n    if (this.props.token) {\n      this._verifyOrganization();\n    }\n  }\n\n  static async getInitialProps(ctx) {\n    let token = false;\n\n    if (ctx.query.token) {\n      token = ctx.query.token;\n    }\n\n    return {\n      token\n    };\n  }\n\n  componentDidUpdate() {}\n\n  _renderContent() {\n    if (this.props.token == false) {\n      return __jsx(\"div\", {\n        className: `row ${verifyOrganizationStyles.pageHeader} text-center`\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"h1\", null, \"Missing Token\")));\n    } else {\n      if (this.state.complete == true) {\n        if (this.state.error == false) {\n          return __jsx(\"div\", {\n            className: `row ${verifyOrganizationStyles.pageHeader} text-center`\n          }, __jsx(\"div\", {\n            className: \"small-12 columns\"\n          }, __jsx(\"h1\", null, \"Successfully verified\"), __jsx(\"img\", {\n            className: verifyOrganizationStyles.hr,\n            src: \"/images/sep.svg\",\n            alt: \"\"\n          }), __jsx(\"p\", null, \"Your email has been verified and your affiliation with this organization has been approved.\")));\n        } else {\n          if (this.state.error == 'Domain mismatch') {\n            return __jsx(React.Fragment, null, __jsx(\"div\", {\n              className: `row ${verifyOrganizationStyles.pageHeader} text-center`\n            }, __jsx(\"div\", {\n              className: \"small-12 columns\"\n            }, __jsx(\"h1\", null, \"Pending further verification\"), __jsx(\"img\", {\n              className: verifyOrganizationStyles.hr,\n              src: \"/images/sep.svg\",\n              alt: \"\"\n            }), __jsx(\"p\", null, \"Your email has been verified, however, your affiliation with this organization could not be automatically approved. A team admin will review and approve your inclusion within this organization in the next 24 to 48 hours.\"), __jsx(\"p\", null, \"You may use the site as normal, however, you will not have access to organizational content until your account can be verified.\"))));\n          }\n        }\n      } else {\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: `row ${verifyOrganizationStyles.pageHeader} text-center`\n        }, __jsx(\"div\", {\n          className: \"small-12 columns\"\n        }, __jsx(\"h1\", null, \"Verifying your organization\"), __jsx(\"img\", {\n          className: verifyOrganizationStyles.hr,\n          src: \"/images/sep.svg\",\n          alt: \"\"\n        }))), __jsx(\"div\", {\n          className: verifyOrganizationStyles.loader\n        }));\n      }\n    }\n  }\n\n  render() {\n    const display_name = this.props.display_name;\n    const {\n      user\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n      key: \"page-title\"\n    }, \"Verify Organization\"), __jsx(\"meta\", {\n      charset: \"utf-8\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"180x180\",\n      href: \"/apple-touch-icon.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"32x32\",\n      href: \"/favicon-32x32.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"16x16\",\n      href: \"/favicon-16x16.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileImage\",\n      content: \"/favicon-270x270.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileColor\",\n      content: \"#ffffff\"\n    }), __jsx(\"link\", {\n      rel: \"manifest\",\n      href: \"/site.webmanifest\"\n    })), __jsx(Header, _extends({}, user, {\n      display_name: display_name\n    })), this._renderContent(), __jsx(Footer, {\n      fixed: true\n    }));\n  }\n\n}\n\nexport default PasswordReset;","map":null,"metadata":{},"sourceType":"module"}