{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Router from 'next/router';\nimport Head from 'next/head';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport { decodeHTML } from 'entities';\nimport WordpressService from '../services/wordpress';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport postStyles from '../public/styles/modules/post.module.css';\nimport DatePicker from \"react-datepicker\";\nimport subDays from \"date-fns/subDays\";\nimport addDays from \"date-fns/addDays\";\n\nvar Post = /*#__PURE__*/function (_React$Component) {\n  _inherits(Post, _React$Component);\n\n  var _super = _createSuper(Post);\n\n  function Post(props) {\n    var _this;\n\n    _classCallCheck(this, Post);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"_saveDraft\", function () {\n      var component, json, url, publicationDateTimestamp;\n      var token = _this.props.user.access_token;\n      component = _assertThisInitialized(_this);\n\n      if (!token) {\n        return false;\n      }\n\n      publicationDateTimestamp = Math.round(_this.state.publication_date.getTime() / 1000);\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/save-whitepaper-draft';\n      json = JSON.stringify({\n        \"title\": _this.state.title,\n        \"ID\": _this.state.ID,\n        \"authors\": _this.state.authors,\n        \"format\": parseInt(_this.state.format),\n        \"attachment_id\": _this.state.attachment_id,\n        \"attachment_filename\": _this.state.attachment_filename,\n        \"content_link\": _this.state.content_link,\n        \"publication_date\": publicationDateTimestamp,\n        \"description\": _this.state.description,\n        \"copyright_notice\": _this.state.copyright_notice,\n        \"image_id\": _this.state.image_id,\n        \"image_filename\": _this.state.image_filename,\n        \"image_url\": _this.state.image_url,\n        \"agency_specific\": _this.state.agency_specific,\n        \"agency_parent\": _this.state.agency_parent,\n        \"agency_child\": _this.state.agency_child,\n        \"available_agencies\": _this.state.available_agencies,\n        \"selected_topics\": _this.state.selected_topics,\n        \"selected_tags\": _this.state.selected_tags,\n        \"relevant\": _this.state.relevant,\n        \"first_name\": _this.state.first_name,\n        \"last_name\": _this.state.last_name,\n        \"email_address\": _this.state.email_address,\n        \"phone_number\": _this.state.phone_number,\n        \"access_token\": token\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        var flat = JSON.stringify(data);\n\n        if (flat.includes('error')) {\n          alert('Something went wrong');\n          window.location.reload();\n          return false;\n        }\n\n        component.setState({\n          ID: data.ID\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_handlePreview\", function () {\n      event.preventDefault();\n      var button, component, json, url, login, firstNameField, lastNameField, emailAddressField, jobTitleField;\n      button = document.querySelector('.js-preview');\n      component = _assertThisInitialized(_this);\n\n      if (_this.state.first_name.length < 1) {\n        var inputFirstName = document.querySelector('input[name=\"first_name\"]');\n\n        _this.setState({\n          error: {\n            first_name: 'Must include a first name'\n          }\n        });\n\n        inputFirstName.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\",\n          inline: \"nearest\"\n        });\n        return false;\n      }\n\n      if (_this.state.last_name.length < 1) {\n        var inputLastName = document.querySelector('input[name=\"last_name\"]');\n\n        _this.setState({\n          error: {\n            last_name: 'Must include a last name'\n          }\n        });\n\n        inputLastName.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\",\n          inline: \"nearest\"\n        });\n        return false;\n      }\n\n      var inputEmail = document.querySelector('input[name=\"email_address\"]');\n\n      if (!inputEmail.checkValidity()) {\n        _this.setState({\n          error: {\n            email_address: 'Must include your email'\n          }\n        });\n\n        inputEmail.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\",\n          inline: \"nearest\"\n        });\n        return false;\n      }\n\n      if (_this.state.phone_number.length < 1) {\n        var inputPhone = document.querySelector('input[name=\"phone_number\"]');\n\n        _this.setState({\n          error: {\n            phone_number: 'Must include a contact phone number'\n          }\n        });\n\n        inputPhone.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\",\n          inline: \"nearest\"\n        });\n        return false;\n      }\n\n      var token = _this.props.user.access_token;\n\n      if (!token) {\n        return false;\n      }\n\n      var publicationDateTimestamp = Math.round(_this.state.publication_date.getTime() / 1000);\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/finalize-whitepaper-draft';\n      json = JSON.stringify({\n        \"title\": _this.state.title,\n        \"ID\": _this.state.ID,\n        \"authors\": _this.state.authors,\n        \"format\": parseInt(_this.state.format),\n        \"attachment_id\": _this.state.attachment_id,\n        \"attachment_filename\": _this.state.attachment_filename,\n        \"content_link\": _this.state.content_link,\n        \"publication_date\": publicationDateTimestamp,\n        \"description\": _this.state.description,\n        \"copyright_notice\": _this.state.copyright_notice,\n        \"image_id\": _this.state.image_id,\n        \"image_filename\": _this.state.image_filename,\n        \"image_url\": _this.state.image_url,\n        \"agency_specific\": _this.state.agency_specific,\n        \"agency_parent\": _this.state.agency_parent,\n        \"agency_child\": _this.state.agency_child,\n        \"available_agencies\": _this.state.available_agencies,\n        \"selected_topics\": _this.state.selected_topics,\n        \"selected_tags\": _this.state.selected_tags,\n        \"relevant\": _this.state.relevant,\n        \"first_name\": _this.state.first_name,\n        \"last_name\": _this.state.last_name,\n        \"email_address\": _this.state.email_address,\n        \"phone_number\": _this.state.phone_number,\n        \"access_token\": token\n      });\n      button.disabled = true;\n      component.setState({\n        working: true\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setTimeout(function (e) {\n          button.disabled = false;\n          var flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: data.message,\n              working: false\n            });\n            return false;\n          }\n\n          component.setState({//active_tab: 1,\n            // ID: '',\n            // title: '',\n            // authors: [\"\"],\n            // format: '',\n            // publication_date: new Date(),\n            // attachment_id: '',\n            // attachment_filename: '',\n            // content_link: '',\n            // agreed: false,\n            // description: '',\n            // copyright_notice: '',\n            // image_id: '',\n            // image_filename: '',\n            // image_url: '',\n            // agency_specific: true,\n            // agency_parent: 0,\n            // agency_child: 0,\n            // available_agencies: [],\n            // selected_topics: [],\n            // selected_tags: [],\n            // relevant: false,\n            //\n            // first_name: '',\n            // last_name: '',\n            // email_address: '',\n            // phone_number : '',\n            // working: false,\n            // error: false\n          }, function () {\n            // Redirect to preview\n            Router.push({\n              pathname: '/preview-whitepaper',\n              query: {\n                id: component.state.ID\n              }\n            });\n          });\n        }, 1000);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderTabClass\", function (tab) {\n      var active_tab = _this.state.active_tab;\n\n      if (active_tab == tab) {\n        return \"\".concat(postStyles.tab, \" \").concat(postStyles.open);\n      } else {\n        return \"\".concat(postStyles.tab);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderRadioClass\", function (bool) {\n      var agency_specific = _this.state.agency_specific;\n\n      if (agency_specific == bool) {\n        return \"\".concat(postStyles.active);\n      } else {\n        return '';\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderAgencySelectorClass\", function () {\n      var agency_specific = _this.state.agency_specific;\n\n      if (agency_specific == true) {\n        return \"\".concat(postStyles.agencySelector, \" \").concat(postStyles.active);\n      } else {\n        return \"\".concat(postStyles.agencySelector);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderAgencySelector\", function () {\n      if (_this.state.available_agencies.length < 1) {\n        return;\n      }\n\n      return __jsx(\"div\", {\n        className: \"\".concat(postStyles.agencySelector, \" \").concat(postStyles.active)\n      }, __jsx(\"label\", null, \"Select Agency \", _this._renderError('agency'), __jsx(\"select\", {\n        onChange: _this.handleChange,\n        name: \"agency\"\n      }, __jsx(\"option\", {\n        value: \"0\"\n      }, \"All Agencies\"), _this.state.available_agencies.map(function (agency) {\n        return __jsx(\"option\", {\n          key: agency.term_id,\n          value: agency.term_id\n        }, agency.name);\n      }))));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderControlIcon\", function (tab) {\n      var active_tab = _this.state.active_tab;\n\n      if (active_tab == tab) {\n        return __jsx(\"img\", {\n          src: \"/images/tab-active.svg\"\n        });\n      } else {\n        if (active_tab > tab) {\n          return __jsx(\"img\", {\n            src: \"/images/tab-complete.svg\"\n          });\n        } else {\n          return __jsx(\"img\", {\n            src: \"/images/tab-inactive.svg\"\n          });\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_modalShowClass\", function () {\n      return _this.state.modal_open;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_toggleTab\", function (tab) {\n      var controls = document.querySelector('#controls');\n      event.preventDefault();\n\n      if (tab == 2) {\n        if (_this.state.title.length < 10) {\n          var inputTitle = document.querySelector('input[name=\"title\"]');\n\n          _this.setState({\n            error: {\n              title: 'must be at least 10 characters'\n            }\n          });\n\n          inputTitle.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n\n        if (_this.state.title.length > 70) {\n          var inputTitle = document.querySelector('input[name=\"title\"]');\n\n          _this.setState({\n            error: {\n              title: 'The title can be no more than 70 characters.'\n            }\n          });\n\n          inputTitle.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n\n        if (!_this.state.format) {\n          var selectFormat = document.querySelector('select[name=\"format\"]');\n\n          _this.setState({\n            error: {\n              format: 'Please select a format'\n            }\n          });\n\n          selectFormat.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return;\n        }\n\n        if (_this.state.authors.length < 1) {\n          var inputAuthor = document.querySelector('input[name=\"author\"]');\n\n          _this.setState({\n            error: {\n              authors: 'Please input at least one author'\n            }\n          });\n\n          inputAuthor.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return;\n        }\n\n        if (!_this.state.publication_date) {\n          var inputPubDate = document.querySelector('input[name=\"publication_date\"]');\n\n          _this.setState({\n            error: {\n              publication_date: 'Please select a publication date'\n            }\n          });\n\n          inputPubDate.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return;\n        }\n\n        if (!_this.state.agreed) {\n          _this.setState({\n            error: {\n              agreed: 'You must agree to the terms to continue'\n            }\n          });\n\n          return;\n        }\n\n        if (!_this.state.attachment_id) {\n          if (!_this.state.content_link) {\n            _this.setState({\n              error: {\n                file: 'You must upload a file or add a link to your content'\n              }\n            });\n\n            return;\n          }\n        }\n      }\n\n      if (tab == 3) {\n        if (_this.state.description.length < 160) {\n          var inputDescription = document.querySelector('textarea[name=\"description\"]');\n\n          _this.setState({\n            error: {\n              description: 'must be at least 160 characters'\n            }\n          });\n\n          inputDescription.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n      }\n\n      if (tab == 4) {\n        if (_this.state.selected_topics.length < 1) {\n          var inputTopic = document.querySelector('select[name=\"selected_topics\"]');\n\n          _this.setState({\n            error: {\n              topic: 'Please select a topic.'\n            }\n          });\n\n          inputTopic.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n      }\n\n      _this._saveDraft();\n\n      _this.setState(function (state) {\n        return {\n          active_tab: tab,\n          error: false\n        };\n      });\n\n      controls.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"end\",\n        inline: \"nearest\"\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderAuthorsBlock\", function () {\n      var authors = _this.state.authors;\n\n      if (authors.length < 1) {\n        return __jsx(\"div\", {\n          key: \"0\",\n          className: postStyles.authorWrap\n        }, __jsx(\"input\", {\n          onChange: _this.handleChange,\n          name: \"author\",\n          ref: _this.input,\n          type: \"text\",\n          placeholder: \"Type author name\"\n        }), __jsx(\"span\", {\n          onClick: function onClick() {\n            _this._deleteAuthor(0);\n          },\n          className: postStyles.deleteAuthor\n        }, __jsx(\"img\", {\n          src: \"/images/trash.svg\"\n        })));\n      } else {\n        return __jsx(React.Fragment, null, authors.map(function (name, index) {\n          return __jsx(\"div\", {\n            \"data-index\": _this.state.authors[index],\n            key: index,\n            className: postStyles.authorWrap\n          }, __jsx(\"input\", {\n            onChange: function onChange(e) {\n              return _this.setAuthors(index, e);\n            },\n            name: \"author\",\n            value: _this.state.authors[index],\n            type: \"text\",\n            placeholder: \"Type author name\"\n          }), __jsx(\"span\", {\n            onClick: function onClick() {\n              _this._deleteAuthor(index);\n            },\n            className: postStyles.deleteAuthor\n          }, __jsx(\"img\", {\n            src: \"/images/trash.svg\"\n          })));\n        }));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_addAuthor\", function () {\n      var authors_r = _this.state.authors;\n\n      if (_this.state.authors.length >= 10) {\n        _this.setState({\n          error: {\n            authors: 'Maximum of 10 authors'\n          }\n        });\n\n        return;\n      }\n\n      authors_r.push(\"\");\n\n      _this.setState({\n        'authors': authors_r\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_getTaxonomyName\", function (term_type, term_id) {\n      // console.log('get tax name');\n      // console.log(term_type);\n      // console.log(term_id);\n      // return \"Name\";\n      var term = _this.props[term_type].find(function (element) {\n        return element.term_id == term_id;\n      });\n\n      return decodeHTML(term.name);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderSelectedTopics\", function () {\n      var selected_topics = _this.state.selected_topics;\n\n      if (selected_topics.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_topics.map(function (term_id) {\n          return __jsx(\"div\", {\n            key: term_id,\n            className: postStyles.selectedTopic\n          }, _this._getTaxonomyName('topics', term_id), __jsx(\"span\", {\n            onClick: function onClick() {\n              _this.removeTopic(term_id); // this.setState(state => ({\n              // \t// organization_id: '',\n              // \t// organization_name: '',\n              // }));\n\n            },\n            className: postStyles.close\n          }, __jsx(\"img\", {\n            src: \"/images/close-blue.svg\",\n            alt: \"\"\n          })));\n        }));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderSelectedTags\", function () {\n      var selected_tags = _this.state.selected_tags;\n\n      if (selected_tags.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_tags.map(function (term_id) {\n          return __jsx(\"div\", {\n            key: term_id,\n            className: postStyles.selectedTag\n          }, _this._getTaxonomyName('tags', term_id), __jsx(\"span\", {\n            onClick: function onClick() {\n              _this.removeTag(term_id);\n            },\n            className: postStyles.close\n          }, __jsx(\"img\", {\n            src: \"/images/close-blue.svg\",\n            alt: \"\"\n          })));\n        }));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeTopic\", function (id) {\n      var selected_topics = _this.state.selected_topics;\n      var index = selected_topics.findIndex(function (topic) {\n        return topic == id;\n      });\n\n      if (index !== -1) {\n        selected_topics.splice(index, 1);\n\n        _this.setState({\n          'selected_topics': selected_topics\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeTag\", function (id) {\n      var selected_tags = _this.state.selected_tags;\n      var index = selected_tags.findIndex(function (tag) {\n        return tag == id;\n      });\n\n      if (index !== -1) {\n        selected_tags.splice(index, 1);\n\n        _this.setState({\n          'selected_tags': selected_tags\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_deleteAuthor\", function (index) {\n      var authors = _this.state.authors;\n      authors.splice(index, 1);\n\n      _this.setState({\n        'authors': authors\n      });\n    });\n\n    _this.state = {\n      active_tab: 1,\n      ID: '',\n      title: '',\n      authors: [\"\"],\n      format: '',\n      publication_date: new Date(),\n      attachment_id: '',\n      attachment_filename: '',\n      content_link: '',\n      agreed: false,\n      description: '',\n      copyright_notice: '',\n      image_id: '',\n      image_filename: '',\n      image_url: '',\n      agency_specific: true,\n      agency_parent: 0,\n      agency_child: 0,\n      available_agencies: [],\n      selected_topics: [],\n      selected_tags: [],\n      first_name: '',\n      last_name: '',\n      email_address: '',\n      phone_number: '',\n      relevant: false,\n      working: false,\n      error: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.setAuthors = _this.setAuthors.bind(_assertThisInitialized(_this));\n    _this.input = React.createRef();\n    return _this;\n  }\n\n  _createClass(Post, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var access_token, wordpress, user;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.props.user) {\n                  _context.next = 3;\n                  break;\n                }\n\n                Router.push('/login');\n                return _context.abrupt(\"return\", false);\n\n              case 3:\n                access_token = this.props.user.access_token;\n                wordpress = new WordpressService();\n                _context.next = 7;\n                return wordpress.getUser(access_token);\n\n              case 7:\n                user = _context.sent;\n                this.setState(function (state) {\n                  return {\n                    first_name: user.first_name,\n                    last_name: user.last_name,\n                    email_address: user.email_address\n                  };\n                });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      // console.log('update');\n      // console.log(this.state);\n      var working = this.state.working;\n      var html = document.querySelector('html');\n\n      if (working) {\n        html.classList.add('working');\n      } else {\n        html.classList.remove('working');\n      }\n    }\n  }, {\n    key: \"isURL\",\n    value: function isURL(url) {\n      var regexp = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n      return regexp.test(url);\n    }\n  }, {\n    key: \"setPublicationDate\",\n    value: function setPublicationDate(date) {\n      this.setState({\n        publication_date: date\n      });\n    }\n  }, {\n    key: \"_removeImage\",\n    value: function _removeImage() {\n      this.setState({\n        image_id: '',\n        image_filename: '',\n        image_url: ''\n      });\n      document.querySelector('input[name=\"image_file\"]').value = '';\n    }\n  }, {\n    key: \"triggerFileUpload\",\n    value: function triggerFileUpload() {\n      document.querySelector('#pdf-upload').dispatchEvent(new Event('submit'));\n    }\n  }, {\n    key: \"uploadPDFSubmit\",\n    value: function uploadPDFSubmit(e) {\n      e.preventDefault();\n      var formData = new FormData(e.target);\n      var token = this.props.user.access_token;\n      var component = this;\n      var file = formData.get('pdf_file');\n      formData.append(\"token\", token);\n\n      if (!token) {\n        return false;\n      }\n\n      if (file.size > 41943040) {\n        this.setState({\n          error: {\n            file: 'Selected file is larger than 40MB'\n          }\n        });\n        return false;\n      }\n\n      if (file.type !== 'application/pdf') {\n        this.setState({\n          error: {\n            file: 'Unsupported file type. Please select a PDF.'\n          }\n        });\n        return false;\n      }\n\n      component.setState({\n        working: true\n      });\n      var url = e.target.action;\n      fetch(url, {\n        method: 'POST',\n        body: formData\n      }).then(function (response) {\n        return response.json();\n      }).then(function (body) {\n        var flat = JSON.stringify(body);\n\n        if (flat.includes('error')) {\n          component.setState({\n            error: {\n              file: 'The selected file could not be uploaded. Please contact support for assistance.'\n            },\n            working: false\n          });\n          return false;\n        } else {\n          component.setState({\n            \"attachment_id\": body,\n            \"attachment_filename\": file.name,\n            \"content_link\": '',\n            working: false\n          });\n        }\n      });\n    }\n  }, {\n    key: \"triggerImageUpload\",\n    value: function triggerImageUpload() {\n      var fileField = document.querySelector('input[name=\"image_file\"]').value;\n\n      if (!fileField) {\n        return;\n      }\n\n      document.querySelector('#image-upload').dispatchEvent(new Event('submit'));\n    }\n  }, {\n    key: \"uploadImageSubmit\",\n    value: function uploadImageSubmit(e) {\n      e.preventDefault();\n      var formData = new FormData(e.target);\n      var token = this.props.user.access_token;\n      var component = this;\n      var file = formData.get('image_file');\n      formData.append(\"token\", token);\n      formData.append(\"ID\", this.state.ID);\n\n      if (!token) {\n        return false;\n      }\n\n      if (file.size > 10048576) {\n        this.setState({\n          error: {\n            image: 'Selected file is larger than 10MB'\n          }\n        });\n        return false;\n      }\n\n      var pattern = /image-*/;\n\n      if (!file.type.match(pattern)) {\n        this.setState({\n          error: {\n            image: 'Unsupported file type. Please select a JPG or PNG.'\n          }\n        });\n        return false;\n      }\n\n      component.setState({\n        working: true\n      });\n      var url = e.target.action;\n      fetch(url, {\n        method: 'POST',\n        body: formData\n      }).then(function (response) {\n        return response.json();\n      }).then(function (body) {\n        var flat = JSON.stringify(body);\n\n        if (flat.includes('error')) {\n          component.setState({\n            error: {\n              image: 'The selected file could not be uploaded. There may be something wrong with your image. Please contact support for assistance.'\n            },\n            working: false\n          });\n          return false;\n        } else {\n          component.setState({\n            image_id: body.ID,\n            image_filename: file.name,\n            image_url: body.url,\n            working: false\n          });\n        }\n      });\n    }\n  }, {\n    key: \"setAuthors\",\n    value: function setAuthors(index, e) {\n      var authors = this.state.authors;\n      authors[index] = e.target.value;\n      this.setState({\n        'authors': authors\n      });\n    }\n  }, {\n    key: \"handleChange\",\n    value: function () {\n      var _handleChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n        var name, topic_id, topic_r, topic, index, select, tag_id, tag_r, tag, _index, _select, agency_parent, agencies, wordpress;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                name = event.target.getAttribute('name');\n\n                if (!(name == 'select_topic')) {\n                  _context2.next = 15;\n                  break;\n                }\n\n                topic_id = event.target.value;\n\n                if (!(topic_id == 0)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 5:\n                topic_r = this.state.selected_topics;\n\n                if (!(this.state.selected_topics.length >= 2)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 8:\n                topic = this.props.topics.find(function (element) {\n                  return element.term_id == topic_id;\n                });\n                index = topic_r.findIndex(function (term_id) {\n                  return term_id == topic_id;\n                });\n\n                if (index === -1) {\n                  topic_r.push(topic.term_id);\n                  this.setState({\n                    'selected_topics': topic_r\n                  });\n                }\n\n                select = document.querySelector('select[name=\"select_topic\"]');\n                select.selectedIndex = 0;\n                _context2.next = 55;\n                break;\n\n              case 15:\n                if (!(name == 'select_tag')) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                tag_id = event.target.value;\n\n                if (!(tag_id == 0)) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 19:\n                tag_r = this.state.selected_tags;\n\n                if (!(this.state.selected_tags.length >= 5)) {\n                  _context2.next = 22;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 22:\n                tag = this.props.tags.find(function (element) {\n                  return element.term_id == tag_id;\n                });\n                _index = tag_r.findIndex(function (term_id) {\n                  return term_id == tag_id;\n                });\n\n                if (_index === -1) {\n                  tag_r.push(tag.term_id);\n                  this.setState({\n                    'selected_tags': tag_r\n                  });\n                }\n\n                _select = document.querySelector('select[name=\"select_tag\"]');\n                _select.selectedIndex = 0;\n                _context2.next = 55;\n                break;\n\n              case 29:\n                if (!(name == 'agreed')) {\n                  _context2.next = 33;\n                  break;\n                }\n\n                this.setState(_defineProperty({}, name, !this.state.agreed));\n                _context2.next = 55;\n                break;\n\n              case 33:\n                if (!(name == 'content_link')) {\n                  _context2.next = 37;\n                  break;\n                }\n\n                if (this.isURL(event.target.value) || event.target.value == '') {\n                  this.setState({\n                    attachment_id: '',\n                    attachment_filename: '',\n                    content_link: event.target.value\n                  });\n                }\n\n                _context2.next = 55;\n                break;\n\n              case 37:\n                if (!(name == 'agency_specific')) {\n                  _context2.next = 41;\n                  break;\n                }\n\n                this.setState(_defineProperty({}, name, !this.state.agency_specific));\n                _context2.next = 55;\n                break;\n\n              case 41:\n                if (!(name == 'focus')) {\n                  _context2.next = 54;\n                  break;\n                }\n\n                agency_parent = event.target.value;\n\n                if (!(parseInt(agency_parent) == 0)) {\n                  _context2.next = 47;\n                  break;\n                }\n\n                agencies = '';\n                _context2.next = 51;\n                break;\n\n              case 47:\n                wordpress = new WordpressService();\n                _context2.next = 50;\n                return wordpress.fetchAgencies(agency_parent);\n\n              case 50:\n                agencies = _context2.sent;\n\n              case 51:\n                this.setState({\n                  agency_parent: agency_parent,\n                  available_agencies: agencies\n                });\n                _context2.next = 55;\n                break;\n\n              case 54:\n                if (name == 'agency') {\n                  this.setState({\n                    agency_child: event.target.value\n                  });\n                } else if (name == 'relevant') {\n                  this.setState(_defineProperty({}, name, !this.state.relevant));\n                } else {\n                  this.setState(_defineProperty({}, name, event.target.value), function () {});\n                }\n\n              case 55:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handleChange(_x) {\n        return _handleChange.apply(this, arguments);\n      }\n\n      return handleChange;\n    }()\n  }, {\n    key: \"_renderError\",\n    value: function _renderError(field) {\n      if (this.state.error) {\n        var flat = JSON.stringify(this.state.error);\n\n        if (flat.includes('title')) {\n          if (field == 'title') {\n            return __jsx(\"span\", {\n              className: \"\".concat(postStyles.errorText)\n            }, this.state.error.title);\n          }\n        }\n\n        if (flat.includes('format')) {\n          if (field == 'format') {\n            return __jsx(\"span\", {\n              className: \"\".concat(postStyles.errorText)\n            }, this.state.error.format);\n          }\n        }\n\n        if (flat.includes('authors')) {\n          if (field == 'authors') {\n            return __jsx(\"span\", {\n              className: \"\".concat(postStyles.errorText)\n            }, this.state.error.authors);\n          }\n        }\n\n        if (flat.includes('publication_date')) {\n          if (field == 'publication_date') {\n            return __jsx(\"span\", {\n              className: \"\".concat(postStyles.errorText)\n            }, this.state.error.publication_date);\n          }\n        }\n\n        if (flat.includes('file')) {\n          if (field == 'file') {\n            return __jsx(\"span\", {\n              className: \"\".concat(postStyles.errorText)\n            }, this.state.error.file);\n          }\n        }\n\n        if (flat.includes('description')) {\n          if (field == 'description') {\n            return __jsx(\"span\", {\n              className: \"\".concat(postStyles.errorText)\n            }, this.state.error.description);\n          }\n        }\n\n        if (flat.includes('agreed')) {\n          if (field == 'agreed') {\n            return __jsx(React.Fragment, null, __jsx(\"br\", null), __jsx(\"span\", {\n              className: \"\".concat(postStyles.errorText)\n            }, this.state.error.agreed));\n          }\n        }\n\n        if (flat.includes('image')) {\n          if (field == 'image') {\n            return __jsx(\"span\", {\n              className: \"\".concat(postStyles.errorText)\n            }, this.state.error.image);\n          }\n        }\n\n        if (flat.includes('topic')) {\n          if (field == 'topic') {\n            return __jsx(React.Fragment, null, __jsx(\"span\", {\n              className: \"\".concat(postStyles.errorText)\n            }, this.state.error.topic));\n          }\n        }\n\n        if (flat.includes('first_name')) {\n          if (field == 'first_name') {\n            return __jsx(React.Fragment, null, __jsx(\"span\", {\n              className: \"\".concat(postStyles.errorText)\n            }, this.state.error.first_name));\n          }\n        }\n\n        if (flat.includes('last_name')) {\n          if (field == 'last_name') {\n            return __jsx(React.Fragment, null, __jsx(\"span\", {\n              className: \"\".concat(postStyles.errorText)\n            }, this.state.error.last_name));\n          }\n        }\n\n        if (flat.includes('email_address')) {\n          if (field == 'email_address') {\n            return __jsx(React.Fragment, null, __jsx(\"span\", {\n              className: \"\".concat(postStyles.errorText)\n            }, this.state.error.email_address));\n          }\n        }\n\n        if (flat.includes('phone_number')) {\n          if (field == 'phone_number') {\n            return __jsx(React.Fragment, null, __jsx(\"span\", {\n              className: \"\".concat(postStyles.errorText)\n            }, this.state.error.phone_number));\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_renderAttachmentFilename\",\n    value: function _renderAttachmentFilename() {\n      if (this.state.attachment_filename != '') {\n        return __jsx(\"span\", {\n          className: \"\".concat(postStyles.attachmentFilename)\n        }, this.state.attachment_filename);\n      }\n    }\n  }, {\n    key: \"_renderImageFilename\",\n    value: function _renderImageFilename() {\n      if (this.state.image_filename != '') {\n        return __jsx(\"span\", {\n          className: \"\".concat(postStyles.attachmentFilename)\n        }, this.state.image_filename);\n      }\n    }\n  }, {\n    key: \"_renderImagePreview\",\n    value: function _renderImagePreview() {\n      var _this2 = this;\n\n      if (this.state.image_url != '') {\n        return __jsx(React.Fragment, null, __jsx(\"span\", {\n          onClick: function onClick() {\n            _this2._removeImage();\n          },\n          className: postStyles.removeImage\n        }, \"remove this image\"), __jsx(\"img\", {\n          src: this.state.image_url\n        }));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var display_name = this.props.display_name;\n      var user = this.props.user;\n      var formats = this.props.formats;\n      var agencies = this.props.agencies;\n      var available_agencies = this.state.available_agencies.available_agencies;\n      var topics = this.props.topics;\n      var tags = this.props.tags;\n      var page = this.props.page;\n      var seo_title = decodeHTML(page.seo_title);\n      var open_graph_title = decodeHTML(page.open_graph_title);\n      var twitter_title = decodeHTML(page.twitter_title);\n      var seo_desc = decodeHTML(page.seo_desc);\n      var open_graph_desc = decodeHTML(page.open_graph_desc);\n      var twitter_desc = decodeHTML(page.twitter_desc);\n      var open_graph_image_url = decodeHTML(page.open_graph_image_url);\n      var twitter_image_url = decodeHTML(page.twitter_image_url);\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n        key: \"page-title\"\n      }, seo_title), __jsx(\"meta\", {\n        charset: \"utf-8\"\n      }), __jsx(\"link\", {\n        rel: \"apple-touch-icon\",\n        sizes: \"180x180\",\n        href: \"/apple-touch-icon.png\"\n      }), __jsx(\"link\", {\n        rel: \"icon\",\n        type: \"image/png\",\n        sizes: \"32x32\",\n        href: \"/favicon-32x32.png\"\n      }), __jsx(\"link\", {\n        rel: \"icon\",\n        type: \"image/png\",\n        sizes: \"16x16\",\n        href: \"/favicon-16x16.png\"\n      }), __jsx(\"meta\", {\n        name: \"msapplication-TileImage\",\n        content: \"/favicon-270x270.png\"\n      }), __jsx(\"meta\", {\n        name: \"msapplication-TileColor\",\n        content: \"#ffffff\"\n      }), __jsx(\"link\", {\n        rel: \"manifest\",\n        href: \"/site.webmanifest\"\n      }), __jsx(\"meta\", {\n        property: \"og:title\",\n        content: seo_title,\n        key: \"og-title\"\n      }), __jsx(\"meta\", {\n        name: \"description\",\n        content: seo_desc,\n        key: \"description\"\n      }), __jsx(\"meta\", {\n        property: \"og:locale\",\n        content: \"en_US\",\n        key: \"og-locale\"\n      }), __jsx(\"meta\", {\n        property: \"og:title\",\n        content: open_graph_title,\n        key: \"og-title\"\n      }), __jsx(\"meta\", {\n        property: \"og:description\",\n        content: open_graph_desc,\n        key: \"og-description\"\n      }), __jsx(\"meta\", {\n        property: \"og:url\",\n        content: page.permalink,\n        key: \"og-url\"\n      }), __jsx(\"meta\", {\n        property: \"og:site_name\",\n        content: \"GovWhitePapers\"\n      }), __jsx(\"meta\", {\n        property: \"og:image\",\n        content: open_graph_image_url,\n        key: \"og-image\"\n      }), __jsx(\"meta\", {\n        property: \"og:image:secure_url\",\n        content: open_graph_image_url,\n        key: \"og-image-secure\"\n      }), __jsx(\"meta\", {\n        name: \"twitter:card\",\n        content: \"summary_large_image\",\n        key: \"twitter-card\"\n      }), __jsx(\"meta\", {\n        name: \"twitter:description\",\n        content: twitter_desc,\n        key: \"twitter-description\"\n      }), __jsx(\"meta\", {\n        name: \"twitter:title\",\n        content: twitter_title,\n        key: \"twitter-title\"\n      }), __jsx(\"meta\", {\n        name: \"twitter:site\",\n        content: \"@GovEventsGroup\",\n        key: \"twitter-site\"\n      }), __jsx(\"meta\", {\n        name: \"twitter:image\",\n        content: twitter_image_url,\n        key: \"twitter-image\"\n      }), __jsx(\"meta\", {\n        name: \"twitter:creator\",\n        content: \"@GovEventsGroup\",\n        key: \"twitter-creator\"\n      })), __jsx(Header, _extends({}, user, {\n        display_name: display_name\n      })), __jsx(\"div\", {\n        className: \"row \".concat(postStyles.pageHeader, \" text-center\")\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"h1\", null, \"Post your content\"), __jsx(\"img\", {\n        className: postStyles.hr,\n        src: \"/images/sep.svg\",\n        alt: \"\"\n      }), __jsx(\"p\", null, \"Expand the reach of your content to thousands of government and industry professionals.\"))), __jsx(\"div\", {\n        className: \"row \".concat(postStyles.pageContent)\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"div\", {\n        id: \"controls\",\n        className: postStyles.controls\n      }, __jsx(\"ul\", null, __jsx(\"li\", {\n        className: postStyles.active,\n        onClick: function onClick() {\n          _this3._toggleTab(1);\n        }\n      }, __jsx(\"div\", {\n        className: postStyles.icon\n      }, this._renderControlIcon(1)), __jsx(\"span\", null, \"Main\")), __jsx(\"li\", {\n        onClick: function onClick() {\n          _this3._toggleTab(2);\n        }\n      }, __jsx(\"div\", {\n        className: postStyles.icon\n      }, this._renderControlIcon(2)), __jsx(\"span\", null, \"Description\")), __jsx(\"li\", {\n        onClick: function onClick() {\n          _this3._toggleTab(3);\n        }\n      }, __jsx(\"div\", {\n        className: postStyles.icon\n      }, this._renderControlIcon(3)), __jsx(\"span\", null, \"Information\")), __jsx(\"li\", {\n        onClick: function onClick() {\n          _this3._toggleTab(4);\n        }\n      }, __jsx(\"div\", {\n        className: postStyles.icon\n      }, this._renderControlIcon(4)), __jsx(\"span\", null, \"Publication\")))), __jsx(\"div\", {\n        className: postStyles.tabs\n      }, __jsx(\"div\", {\n        className: this._renderTabClass(1)\n      }, __jsx(\"div\", {\n        className: \"\".concat(postStyles.form)\n      }, __jsx(\"div\", {\n        className: \"row \".concat(postStyles.row)\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"label\", null, \"Title\", this._renderError('title'), __jsx(\"input\", {\n        onChange: this.handleChange,\n        name: \"title\",\n        value: this.state.title,\n        type: \"text\",\n        placeholder: \"Type your title of your content\"\n      })), __jsx(\"label\", null, \"Format\", this._renderError('format'), __jsx(\"select\", {\n        onChange: this.handleChange,\n        name: \"format\"\n      }, __jsx(\"option\", null, \"Select Format\"), formats.map(function (format) {\n        return __jsx(\"option\", {\n          key: format.term_id,\n          value: format.term_id\n        }, format.name);\n      }))), __jsx(\"label\", null, \"Authors\", this._renderError('authors'), __jsx(\"span\", {\n        className: postStyles.subLabel\n      }, __jsx(\"span\", {\n        className: postStyles.dot\n      }, \"\\xB7\"), \" up to 10\"), __jsx(\"div\", {\n        className: postStyles.authorBlock\n      }, this._renderAuthorsBlock())), __jsx(\"div\", {\n        onClick: function onClick() {\n          _this3._addAuthor();\n        },\n        className: postStyles.addAuthor\n      }, __jsx(\"span\", null, __jsx(\"img\", {\n        src: \"/images/add-author.svg\"\n      })), __jsx(\"h5\", null, \"Add Author\")), __jsx(\"label\", null, __jsx(\"span\", {\n        className: postStyles.tooltip\n      }, \"Publish Date \", __jsx(\"img\", {\n        className: postStyles.question,\n        src: \"/images/question.png\"\n      }), __jsx(\"span\", {\n        className: postStyles.tooltipText\n      }, \"To give our members the most relevant and up-to-date information, GovWhitePapers accepts content written in the last two years.\")), \" \", this._renderError('publication_date'), __jsx(\"div\", {\n        className: postStyles.dateBlock\n      }, __jsx(DatePicker, {\n        selected: this.state.publication_date,\n        onChange: function onChange(date) {\n          _this3.setPublicationDate(date);\n        },\n        minDate: subDays(new Date(), 730),\n        maxDate: addDays(new Date(), 0)\n      }), __jsx(\"span\", {\n        className: postStyles.cal\n      }, __jsx(\"img\", {\n        src: \"/images/calendar.svg\"\n      })))), __jsx(\"label\", null, \"Upload Your File \", this._renderError('file'), __jsx(\"div\", {\n        className: postStyles.addFile\n      }, __jsx(\"form\", {\n        id: \"pdf-upload\",\n        action: \"https://gwpadmin.codewrangler.io/api/gwp/v1/upload-pdf\",\n        onSubmit: function onSubmit(e) {\n          return _this3.uploadPDFSubmit(e);\n        },\n        method: \"post\",\n        encType: \"multipart/form-data\"\n      }, __jsx(\"input\", {\n        onChange: this.triggerFileUpload,\n        name: \"pdf_file\",\n        type: \"file\",\n        accept: \"application/pdf\"\n      }), __jsx(\"span\", null, __jsx(\"img\", {\n        src: \"/images/upload.svg\"\n      })), __jsx(\"h5\", null, \"Upload Content\")), this._renderAttachmentFilename())), __jsx(\"div\", {\n        className: postStyles.externalLink\n      }, __jsx(\"div\", {\n        className: postStyles.line\n      }, __jsx(\"hr\", null), __jsx(\"span\", null, \"or add external link\")), __jsx(\"label\", null, \"Link to Content\", __jsx(\"input\", {\n        type: \"url\",\n        onChange: this.handleChange,\n        name: \"content_link\",\n        checked: this.state.content_link,\n        value: this.state.content_link,\n        placeholder: \"External Link\"\n      }))), __jsx(\"div\", {\n        className: postStyles.agree\n      }, __jsx(\"label\", {\n        className: postStyles.label\n      }, \" I give GovWhitePapers permission to post this content.\", __jsx(\"input\", {\n        type: \"checkbox\",\n        onChange: this.handleChange,\n        name: \"agreed\",\n        checked: this.state.agreed,\n        value: this.state.agreed\n      }), __jsx(\"span\", {\n        className: postStyles.checkmark\n      }), this._renderError('agreed'))), __jsx(\"div\", {\n        className: postStyles.nav\n      }, __jsx(\"button\", {\n        onClick: function onClick() {\n          _this3._toggleTab(2);\n        },\n        className: \"button \".concat(postStyles.button)\n      }, \"Save and Continue\")))))), __jsx(\"div\", {\n        className: this._renderTabClass(2)\n      }, __jsx(\"div\", {\n        className: \"\".concat(postStyles.form)\n      }, __jsx(\"div\", {\n        className: \"row \".concat(postStyles.row)\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"label\", null, \"Description \", this._renderError('description'), __jsx(\"textarea\", {\n        onChange: this.handleChange,\n        name: \"description\",\n        value: this.state.description,\n        placeholder: \"Add a description...\",\n        rows: \"5\"\n      })), __jsx(\"label\", null, \"Copyright Notice\", __jsx(\"span\", {\n        className: postStyles.subLabel\n      }, __jsx(\"span\", {\n        className: postStyles.dot\n      }, \"\\xB7\"), \" optional\"), __jsx(\"div\", {\n        className: postStyles.copyright\n      }, __jsx(\"input\", {\n        onChange: this.handleChange,\n        name: \"copyright_notice\",\n        value: this.state.copyright_notice,\n        type: \"text\",\n        placeholder: \"Copyright text\"\n      }), __jsx(\"span\", null, \"\\xA9\"))), __jsx(\"label\", null, __jsx(\"div\", {\n        className: postStyles.addPhoto\n      }, __jsx(\"form\", {\n        id: \"image-upload\",\n        action: \"https://gwpadmin.codewrangler.io/api/gwp/v1/upload-whitepaper-image\",\n        onSubmit: function onSubmit(e) {\n          return _this3.uploadImageSubmit(e);\n        },\n        method: \"post\",\n        encType: \"multipart/form-data\"\n      }, __jsx(\"input\", {\n        onChange: this.triggerImageUpload,\n        name: \"image_file\",\n        type: \"file\",\n        accept: \"image/jpeg,image/png\"\n      }), __jsx(\"span\", null, __jsx(\"img\", {\n        src: \"/images/upload-large.svg\"\n      })), __jsx(\"h3\", null, \"Upload Photo\"), __jsx(\"p\", null, \"Max size 10MB; minimum 300 pixels. Recommended size: 600x500 pixels\")), this._renderImageFilename(), this._renderError('image'))), __jsx(\"div\", {\n        className: postStyles.imagePreview\n      }, this._renderImagePreview()), __jsx(\"div\", {\n        className: postStyles.nav\n      }, __jsx(\"button\", {\n        onClick: function onClick() {\n          _this3._toggleTab(3);\n        },\n        className: \"button \".concat(postStyles.button)\n      }, \"Save and Continue\")))))), __jsx(\"div\", {\n        className: this._renderTabClass(3)\n      }, __jsx(\"div\", {\n        className: \"\".concat(postStyles.form)\n      }, __jsx(\"div\", {\n        className: \"row \".concat(postStyles.row)\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"div\", {\n        className: postStyles.agency\n      }, __jsx(\"p\", null, \"Is your content government agency or state and local specific?\"), __jsx(\"ul\", {\n        className: postStyles.agencyTypeSelector\n      }, __jsx(\"li\", {\n        className: this._renderRadioClass(true)\n      }, __jsx(\"label\", {\n        className: \"button \".concat(postStyles.button)\n      }, __jsx(\"input\", {\n        onChange: this.handleChange,\n        type: \"radio\",\n        value: \"1\",\n        name: \"agency_specific\",\n        checked: this.state.agency_specific === true\n      }), \"Yes, it's specific\")), __jsx(\"li\", {\n        className: this._renderRadioClass(false)\n      }, __jsx(\"label\", {\n        className: \"button \".concat(postStyles.button)\n      }, __jsx(\"input\", {\n        onChange: this.handleChange,\n        type: \"radio\",\n        value: \"0\",\n        name: \"agency_specific\",\n        checked: this.state.agency_specific === false\n      }), \"No, it's not specific\"))), __jsx(\"div\", {\n        className: this._renderAgencySelectorClass()\n      }, __jsx(\"label\", null, \"Audience Focus \", this._renderError('focus'), __jsx(\"select\", {\n        onChange: this.handleChange,\n        name: \"focus\"\n      }, __jsx(\"option\", {\n        value: \"0\"\n      }, \"Select Focus\"), agencies.map(function (agency) {\n        return __jsx(\"option\", {\n          key: agency.term_id,\n          value: agency.term_id\n        }, decodeHTML(agency.name));\n      }))), this._renderAgencySelector())), __jsx(\"div\", {\n        className: postStyles.topics\n      }, __jsx(\"label\", null, \"Topics \", this._renderError('topic'), __jsx(\"span\", {\n        className: postStyles.subLabel\n      }, __jsx(\"span\", {\n        className: postStyles.dot\n      }, \"\\xB7\"), \" up to 2\"), __jsx(\"select\", {\n        onChange: this.handleChange,\n        name: \"select_topic\"\n      }, __jsx(\"option\", {\n        value: \"0\"\n      }, \"Select Topics\"), topics.map(function (topic) {\n        return __jsx(\"option\", {\n          key: topic.term_id,\n          value: topic.term_id\n        }, decodeHTML(topic.name));\n      }))), this._renderSelectedTopics()), __jsx(\"div\", {\n        className: postStyles.tags\n      }, __jsx(\"label\", null, \"Tags \", this._renderError('tag'), __jsx(\"span\", {\n        className: postStyles.subLabel\n      }, __jsx(\"span\", {\n        className: postStyles.dot\n      }, \"\\xB7\"), \" up to 5\"), __jsx(\"select\", {\n        onChange: this.handleChange,\n        name: \"select_tag\"\n      }, __jsx(\"option\", {\n        value: \"0\"\n      }, \"Select Tags\"), tags.map(function (tag) {\n        return __jsx(\"option\", {\n          key: tag.term_id,\n          value: tag.term_id\n        }, decodeHTML(tag.name));\n      }))), this._renderSelectedTags()), __jsx(\"div\", {\n        className: postStyles.relevant\n      }, __jsx(\"label\", {\n        className: postStyles.label\n      }, \" This content is relevant to the government/military community.\", __jsx(\"input\", {\n        type: \"checkbox\",\n        onChange: this.handleChange,\n        name: \"relevant\",\n        checked: this.state.relevant,\n        value: this.state.relevant\n      }), __jsx(\"span\", {\n        className: postStyles.checkmark\n      }), this._renderError('relevant'))), __jsx(\"div\", {\n        className: postStyles.nav\n      }, __jsx(\"button\", {\n        onClick: function onClick() {\n          _this3._toggleTab(4);\n        },\n        className: \"button \".concat(postStyles.button)\n      }, \"Save and Continue\")))))), __jsx(\"div\", {\n        className: this._renderTabClass(4)\n      }, __jsx(\"div\", {\n        className: \"\".concat(postStyles.form)\n      }, __jsx(\"div\", {\n        className: \"row \".concat(postStyles.row)\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"div\", {\n        className: postStyles.publication\n      }, __jsx(\"label\", null, \"First Name \", this._renderError('first_name'), __jsx(\"input\", {\n        onChange: this.handleChange,\n        name: \"first_name\",\n        value: this.state.first_name,\n        type: \"text\",\n        placeholder: \"\"\n      })), __jsx(\"label\", null, \"Last Name \", this._renderError('last_name'), __jsx(\"input\", {\n        onChange: this.handleChange,\n        name: \"last_name\",\n        value: this.state.last_name,\n        type: \"text\",\n        placeholder: \"\"\n      })), __jsx(\"label\", null, \"Email \", this._renderError('email_address'), __jsx(\"input\", {\n        onChange: this.handleChange,\n        name: \"email_address\",\n        value: this.state.email_address,\n        type: \"email\",\n        placeholder: \"\"\n      })), __jsx(\"label\", null, \"Phone \", this._renderError('phone_number'), __jsx(\"input\", {\n        onChange: this.handleChange,\n        name: \"phone_number\",\n        value: this.state.phone_number,\n        type: \"text\",\n        placeholder: \"\"\n      }))), __jsx(\"div\", {\n        className: postStyles.nav\n      }, __jsx(\"button\", {\n        onClick: function onClick() {\n          _this3._handlePreview();\n        },\n        className: \"js-preview button \".concat(postStyles.button)\n      }, \"Publish\"))))))))), __jsx(Footer, null));\n    }\n  }]);\n\n  return Post;\n}(React.Component);\n\nexport var __N_SSG = true;\nexport default Post;","map":null,"metadata":{},"sourceType":"module"}