{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport WordpressService from '../services/wordpress';\nimport Link from 'next/link';\nimport Head from 'next/head';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport ProfileSidebar from '../components/ProfileSidebar';\nimport profileStyles from '../public/styles/modules/profile.module.css';\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_systemEmailsAction\", () => {\n      this.setState(() => ({\n        unsubscribe_system_emails: !this.state.unsubscribe_system_emails\n      }), () => {\n        let component, json, url, login;\n        component = this;\n        component.setState({\n          working: true\n        });\n        const access_token = this.props.user.access_token;\n        url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/user-settings';\n        json = JSON.stringify({\n          \"unsubscribe_system_emails\": this.state.unsubscribe_system_emails,\n          \"access_token\": access_token\n        });\n        fetch(url, {\n          method: 'post',\n          body: json,\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          setTimeout(function (e) {\n            let flat = JSON.stringify(data);\n            component.setState({\n              working: false\n            });\n          }, 100);\n        });\n      });\n    });\n\n    _defineProperty(this, \"_handleSave\", () => {\n      event.preventDefault();\n      let button, component, json, url, login, newPasswordField, verifyNewPasswordField;\n      button = document.querySelector('.js-save');\n      component = this;\n      button.disabled = true;\n      component.setState({\n        working: true\n      });\n      const access_token = this.props.user.access_token;\n\n      if (this.state.current_password == '') {\n        component.setState({\n          error: {\n            current_password: 'Enter your current password.'\n          },\n          working: false\n        });\n        button.disabled = false;\n        return false;\n      }\n\n      if (this.state.new_password.length < 10) {\n        component.setState({\n          error: {\n            new_password: 'Must be at least 10 characters'\n          },\n          working: false\n        });\n        button.disabled = false;\n        return false;\n      }\n\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/user-settings';\n      json = JSON.stringify({\n        \"current_password\": this.state.current_password,\n        \"new_password\": this.state.new_password,\n        \"access_token\": access_token\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n        setTimeout(function (e) {\n          button.disabled = false;\n          let flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: data.message,\n              working: false\n            });\n            return false;\n          }\n\n          component.setState({\n            current_password: '',\n            new_password: '',\n            working: false\n          });\n        }, 1000);\n      });\n    });\n\n    this.state = {\n      current_password: '',\n      new_password: '',\n      unsubscribe_system_emails: false,\n      working: false,\n      error: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  async componentDidMount() {\n    if (!this.props.user) {\n      Router.push('/login');\n      return false;\n    }\n\n    const {\n      user\n    } = this.props;\n    this.input = React.createRef();\n\n    if (!this.props.user) {\n      let login = document.querySelector('.js-login');\n      login.click();\n      return false;\n    }\n\n    const access_token = this.props.user.access_token;\n\n    if (!access_token) {\n      return false;\n    }\n\n    const wordpress = new WordpressService();\n    const u = await wordpress.getUser(access_token);\n    this.setState(state => ({\n      unsubscribe_system_emails: u.unsubscribe_system_emails\n    }));\n  }\n\n  componentDidUpdate() {\n    const {\n      working\n    } = this.state;\n    let html = document.querySelector('html');\n\n    if (working) {\n      html.classList.add('working');\n    } else {\n      html.classList.remove('working');\n    }\n  }\n\n  handleChange(event) {\n    let name = event.target.getAttribute('name');\n    this.setState({\n      [name]: event.target.value\n    }, () => {});\n  }\n\n  _renderError(field) {\n    if (this.state.error) {\n      let flat = JSON.stringify(this.state.error);\n\n      if (flat.includes('current_password')) {\n        if (field == 'current_password') {\n          return __jsx(\"span\", {\n            className: `${profileStyles.errorText}`\n          }, this.state.error.current_password);\n        }\n      }\n\n      if (flat.includes('new_password')) {\n        if (field == 'new_password') {\n          return __jsx(\"span\", {\n            className: `${profileStyles.errorText}`\n          }, this.state.error.new_password);\n        }\n      }\n\n      if (flat.includes('Incorrect password')) {\n        if (field == 'current_password') {\n          let response = 'Incorrect password.';\n          return __jsx(\"span\", {\n            className: `${profileStyles.errorText}`\n          }, response);\n        }\n      }\n    }\n  }\n\n  render() {\n    const display_name = this.props.display_name;\n    const {\n      user\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n      key: \"page-title\"\n    }, \"Settings\"), __jsx(\"meta\", {\n      charset: \"utf-8\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"180x180\",\n      href: \"/apple-touch-icon.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"32x32\",\n      href: \"/favicon-32x32.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"16x16\",\n      href: \"/favicon-16x16.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileImage\",\n      content: \"/favicon-270x270.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileColor\",\n      content: \"#ffffff\"\n    }), __jsx(\"link\", {\n      rel: \"manifest\",\n      href: \"/site.webmanifest\"\n    })), __jsx(Header, _extends({}, user, {\n      display_name: display_name\n    })), __jsx(\"div\", {\n      className: `row ${profileStyles.pageContent} ${profileStyles.settings}`\n    }, __jsx(\"div\", {\n      className: `small-12 medium-4 xlarge-3 columns`\n    }, __jsx(ProfileSidebar, {\n      organization_id: this.props.organization_id,\n      organization_email_mismatch: this.props.organization_email_mismatch,\n      organization_email_verified: this.props.organization_email_verified\n    })), __jsx(\"div\", {\n      className: `small-12 medium-8 xlarge-9 columns ${profileStyles.content}`\n    }, __jsx(\"div\", {\n      className: profileStyles.heading\n    }, __jsx(\"h2\", null, \"Settings\")), __jsx(\"form\", {\n      method: \"POST\",\n      className: profileStyles.form\n    }, __jsx(\"div\", {\n      className: \"small-12 columns\"\n    }, __jsx(\"label\", null, \"Current Password \", this._renderError('current_password'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"current_password\",\n      value: this.state.current_password,\n      type: \"password\",\n      placeholder: \"Your current password\",\n      required: true\n    }))), __jsx(\"div\", {\n      className: \"small-12 columns\"\n    }, __jsx(\"label\", null, \"New Password \", this._renderError('new_password'), __jsx(\"span\", {\n      className: profileStyles.subLabel\n    }, __jsx(\"span\", {\n      className: profileStyles.dot\n    }, \"\\xB7\"), \" minimum of 10 characters\"), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"new_password\",\n      value: this.state.new_password,\n      type: \"password\",\n      placeholder: \"Your new password\",\n      required: true\n    }))), __jsx(\"div\", {\n      className: \"small-12 columns text-center\"\n    }, __jsx(\"div\", {\n      className: `${profileStyles.save}`\n    }, __jsx(\"input\", {\n      onClick: this._handleSave,\n      type: \"submit\",\n      className: \"js-save button\",\n      value: \"Save Changes\"\n    })))), __jsx(\"div\", {\n      className: `small-12 columns ${profileStyles.systemEmails}`\n    }, __jsx(\"label\", {\n      className: profileStyles.label\n    }, \" Unsubscribe from system emails\", __jsx(\"input\", {\n      type: \"checkbox\",\n      onClick: () => {\n        this._systemEmailsAction();\n      },\n      name: \"unsubscribe_system_emails\",\n      checked: this.state.unsubscribe_system_emails,\n      value: \"1\"\n    }), __jsx(\"span\", {\n      className: profileStyles.checkmark\n    }))))), __jsx(Footer, null));\n  }\n\n}\n\nexport default Settings;","map":null,"metadata":{},"sourceType":"module"}