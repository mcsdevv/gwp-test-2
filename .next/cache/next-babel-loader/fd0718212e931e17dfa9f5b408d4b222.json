{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Router from 'next/router';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport DatePicker from \"react-datepicker\";\nimport subDays from \"date-fns/subDays\";\nimport addDays from \"date-fns/addDays\";\nimport { decodeHTML } from 'entities';\nimport WordpressService from '../../services/wordpress';\nimport Header from '../../components/Header';\nimport Footer from '../../components/Footer';\nimport Breadcrumbs from '../../components/Breadcrumbs';\nimport WhitePaperCard from '../../components/WhitePaperCard';\nimport topicStyles from '../../public/styles/modules/topic.module.css';\n\nclass Topic extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"removeTopic\", id => {\n      let selected_topics = this.state.selected_topics;\n      let index = selected_topics.findIndex(topic => topic == id);\n\n      if (index !== -1) {\n        selected_topics.splice(index, 1);\n        this.setState({\n          'selected_topics': selected_topics\n        });\n      }\n    });\n\n    _defineProperty(this, \"removeTag\", id => {\n      let selected_tags = this.state.selected_tags;\n      let index = selected_tags.findIndex(tag => tag == id);\n\n      if (index !== -1) {\n        selected_tags.splice(index, 1);\n        this.setState({\n          'selected_tags': selected_tags\n        });\n      }\n    });\n\n    _defineProperty(this, \"removeAgency\", id => {\n      let selected_agencies = this.state.selected_agencies;\n      let index = selected_agencies.findIndex(agency => agency == id);\n\n      if (index !== -1) {\n        selected_agencies.splice(index, 1);\n        this.setState({\n          'selected_agencies': selected_agencies\n        });\n      }\n    });\n\n    _defineProperty(this, \"_processSearch\", () => {\n      this.setState({\n        show_ad: false\n      });\n\n      this._fetchWhitepapers();\n    });\n\n    _defineProperty(this, \"setDate\", (type, date) => {\n      if (type == 'start') {\n        this.setState({\n          start_date: date\n        });\n      } else if (type == 'end') {\n        this.setState({\n          end_date: date\n        });\n      }\n    });\n\n    _defineProperty(this, \"_toggleFilterPanel\", () => {\n      this.setState(state => ({\n        filter_open: !state.filter_open\n      }));\n    });\n\n    _defineProperty(this, \"_clearFilters\", () => {\n      this.setState({\n        selected_topics: [],\n        selected_tags: [],\n        selected_agencies: [],\n        selected_format: '',\n        start_date: '',\n        end_date: '',\n        reached_end: false\n      }, () => {\n        this._fetchWhitepapers();\n      });\n    });\n\n    _defineProperty(this, \"_saveSearch\", () => {\n      event.preventDefault();\n      let button, component, json, url, login;\n      button = document.querySelector('.js-save-search');\n      component = this;\n\n      if (this.state.search_term == '') {\n        this.setState({\n          error: {\n            save_search: 'You must include a search term.'\n          }\n        });\n        return false;\n      }\n\n      const token = this.props.user.access_token;\n\n      if (!token) {\n        return false;\n      }\n\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/save-search';\n      json = JSON.stringify({\n        \"search_term\": this.state.search_term,\n        \"selected_topics\": this.state.selected_topics,\n        \"selected_tags\": this.state.selected_tags,\n        \"selected_agencies\": this.state.selected_agencies,\n        \"selected_format\": this.state.selected_format,\n        \"start_date\": this.state.start_date,\n        \"end_date\": this.state.end_date,\n        \"access_token\": token\n      });\n      button.disabled = true;\n      component.setState({\n        working: true\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setTimeout(function (e) {\n          button.disabled = false;\n          let flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: data.message,\n              working: false\n            });\n            return false;\n          }\n\n          component.setState({\n            working: false,\n            error: false\n          });\n        }, 1000);\n      });\n    });\n\n    _defineProperty(this, \"_renderLoadMoreClass\", () => {\n      if (this.state.reached_end == true) {\n        return `${topicStyles.nav} hide`;\n      } else {\n        return `${topicStyles.nav}`;\n      }\n    });\n\n    _defineProperty(this, \"_getTaxonomyName\", (term_type, term_id) => {\n      let term = this.props[term_type].find(element => element.term_id == term_id);\n      return decodeHTML(term.name);\n    });\n\n    _defineProperty(this, \"_renderSelectedTopics\", () => {\n      const {\n        selected_topics\n      } = this.state;\n\n      if (selected_topics.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_topics.map(term_id => __jsx(\"div\", {\n          key: term_id,\n          className: topicStyles.selectedTopic\n        }, this._getTaxonomyName('topics', term_id), __jsx(\"span\", {\n          onClick: () => {\n            this.removeTopic(term_id); // this.setState(state => ({\n            // \t// organization_id: '',\n            // \t// organization_name: '',\n            // }));\n          },\n          className: topicStyles.close\n        }, __jsx(\"img\", {\n          src: \"/images/close-blue.svg\",\n          alt: \"\"\n        })))));\n      }\n    });\n\n    _defineProperty(this, \"_renderSelectedTags\", () => {\n      const {\n        selected_tags\n      } = this.state;\n\n      if (selected_tags.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_tags.map(term_id => __jsx(\"div\", {\n          key: term_id,\n          className: topicStyles.selectedTag\n        }, this._getTaxonomyName('tags', term_id), __jsx(\"span\", {\n          onClick: () => {\n            this.removeTag(term_id); // this.setState(state => ({\n            // \t// organization_id: '',\n            // \t// organization_name: '',\n            // }));\n          },\n          className: topicStyles.close\n        }, __jsx(\"img\", {\n          src: \"/images/close-blue.svg\",\n          alt: \"\"\n        })))));\n      }\n    });\n\n    _defineProperty(this, \"_renderSelectedAgencies\", () => {\n      const {\n        selected_agencies\n      } = this.state;\n\n      if (selected_agencies.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_agencies.map(term_id => __jsx(\"div\", {\n          key: term_id,\n          className: topicStyles.selectedAgency\n        }, this._getTaxonomyName('agencies', term_id), __jsx(\"span\", {\n          onClick: () => {\n            this.removeAgency(term_id); // this.setState(state => ({\n            // \t// organization_id: '',\n            // \t// organization_name: '',\n            // }));\n          },\n          className: topicStyles.close\n        }, __jsx(\"img\", {\n          src: \"/images/close-blue.svg\",\n          alt: \"\"\n        })))));\n      }\n    });\n\n    _defineProperty(this, \"_renderActiveFilters\", () => {\n      let count = 0;\n\n      if (this.state.selected_topics.length > 0) {\n        count++;\n      }\n\n      if (this.state.selected_tags.length > 0) {\n        count++;\n      }\n\n      if (this.state.selected_agencies.length > 0) {\n        count++;\n      }\n\n      if (this.state.selected_format !== '') {\n        count++;\n      }\n\n      if (count == 0) {\n        return null;\n      } else {\n        return __jsx(\"span\", {\n          className: topicStyles.activeFilter\n        }, count);\n      }\n    });\n\n    _defineProperty(this, \"_renderNoResults\", () => {\n      const {\n        whitepapers\n      } = this.state;\n\n      if (this.state.whitepapers.length < 1) {\n        return __jsx(\"div\", {\n          className: topicStyles.noResults\n        }, __jsx(\"h3\", {\n          className: \"text-center\"\n        }, \"No results\"));\n      } else {\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"_renderAdRow\", () => {\n      if (this.state.show_ad) {\n        return __jsx(\"div\", {\n          className: \"row\"\n        }, __jsx(\"broadstreet-zone\", {\n          \"zone-id\": \"80367\"\n        }));\n      } else {\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"_renderSaveSearchButton\", () => {\n      const {\n        user\n      } = this.props;\n\n      if (user) {\n        return __jsx(\"button\", {\n          onClick: () => {\n            this._saveSearch();\n          },\n          className: `js-save-search button ${topicStyles.saveSearchButton}`\n        }, \"Save Search\");\n      } else {\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"_renderFilterPanel\", () => {\n      const {\n        topics\n      } = this.props;\n      const {\n        tags\n      } = this.props;\n      const {\n        formats\n      } = this.props;\n      const {\n        agencies\n      } = this.props;\n\n      if (this.state.filter_open == true) {\n        return __jsx(\"section\", {\n          className: `clearfix ${topicStyles.filterPanel}`\n        }, __jsx(\"header\", null, __jsx(\"h5\", null, \"Search Filter\"), __jsx(\"div\", {\n          onClick: () => {\n            this._clearFilters();\n          },\n          className: `${topicStyles.clearFilters}`\n        }, __jsx(\"div\", null, __jsx(\"img\", {\n          src: \"/images/trash.svg\",\n          alt: \"\"\n        }), __jsx(\"span\", null, \"Clear filters\")))), __jsx(\"div\", {\n          className: `small-up-1 medium-up-2`\n        }, __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: topicStyles.topics\n        }, __jsx(\"label\", null, \"Topics\", __jsx(\"select\", {\n          onChange: this.handleChange,\n          name: \"select_topic\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"Select Interests\"), topics.map(topic => __jsx(\"option\", {\n          key: topic.term_id,\n          value: topic.term_id\n        }, decodeHTML(topic.name))))), this._renderSelectedTopics())), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: topicStyles.tags\n        }, __jsx(\"label\", null, \"Tags\", __jsx(\"select\", {\n          onChange: this.handleChange,\n          name: \"select_tag\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"Select Tags\"), tags.map(tag => __jsx(\"option\", {\n          key: tag.term_id,\n          value: tag.term_id\n        }, decodeHTML(tag.name))))), this._renderSelectedTags())), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: `row collapse ${topicStyles.dateRow}`\n        }, __jsx(\"div\", {\n          className: \"small-12 medium-6 columns\"\n        }, __jsx(\"label\", null, \"Date Range\", __jsx(\"div\", {\n          className: topicStyles.dateBlock\n        }, __jsx(DatePicker, {\n          selectsStart: true,\n          startDate: this.state.start_date,\n          endDate: this.state.end_date,\n          placeholderText: \"Start Date\",\n          selected: this.state.start_date //onChange={this.setPublicationDate}\n          ,\n          onChange: date => {\n            this.setDate('start', date);\n          },\n          minDate: subDays(new Date(), 730),\n          maxDate: addDays(new Date(), 0)\n        }), __jsx(\"span\", {\n          className: topicStyles.cal\n        }, __jsx(\"img\", {\n          src: \"/images/calendar.svg\"\n        }))))), __jsx(\"div\", {\n          className: \"small-12 medium-6 columns\"\n        }, __jsx(\"label\", null, __jsx(\"span\", {\n          className: topicStyles.hiddenLabel\n        }, \"Date Range\"), __jsx(\"div\", {\n          className: topicStyles.dateBlock\n        }, __jsx(DatePicker, {\n          placeholderText: \"End Date\",\n          selectsEnd: true,\n          startDate: this.state.start_date,\n          endDate: this.state.end_date,\n          minDate: this.state.start_date,\n          maxDate: addDays(new Date(), 0),\n          selected: this.state.end_date //onChange={this.setPublicationDate}\n          ,\n          onChange: date => {\n            this.setDate('end', date);\n          }\n        }), __jsx(\"span\", {\n          className: topicStyles.cal\n        }, __jsx(\"img\", {\n          src: \"/images/calendar.svg\"\n        }))))))), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"label\", null, \"Format\", __jsx(\"select\", {\n          onChange: this.handleChange,\n          name: \"select_format\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"All\"), formats.map(format => __jsx(\"option\", {\n          key: format.term_id,\n          value: format.term_id\n        }, format.name))))), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: topicStyles.agencies\n        }, __jsx(\"label\", null, \"Audience Focus\", __jsx(\"select\", {\n          onChange: this.handleChange,\n          name: \"select_agency\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"Select Audience\"), agencies.map(agency => __jsx(\"option\", {\n          key: agency.term_id,\n          value: agency.term_id\n        }, decodeHTML(agency.name))))), this._renderSelectedAgencies()))), __jsx(\"div\", {\n          className: \"small-12 columns text-center\"\n        }, __jsx(\"div\", {\n          className: topicStyles.searchAction\n        }, this._renderSaveSearchButton(), __jsx(\"button\", {\n          onClick: () => {\n            this._processSearch();\n          },\n          className: `button ${topicStyles.searchButton}`\n        }, \"Search\")), this._renderError('save_search')));\n      } else {\n        return null;\n      }\n    });\n\n    this.state = {\n      whitepapers: [],\n      filter_open: false,\n      selected_topics: [],\n      selected_tags: [],\n      selected_agencies: [],\n      selected_format: '',\n      start_date: '',\n      end_date: '',\n      search_term: '',\n      sort_by: 'relevance',\n      per_page: 15,\n      reached_end: false,\n      show_ad: false,\n      working: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  static async getInitialProps(ctx) {\n    const wordpress = new WordpressService();\n    const query = ctx;\n    const topic = await wordpress.fetchTopic(ctx.query.topic);\n    let items = 15;\n    let sort_by = 'relevance';\n    let offset = 0;\n    let selected_topics = [topic.id];\n    let selected_tags = [];\n    let selected_agencies = [];\n    let format = '';\n    let search = '';\n    let start_date = '';\n    let end_date = ''; //selected_topics = Array.prototype.map.call(selected_topics, s => s.term_id).toString();\n\n    const whitepapers = await wordpress.fetchWhitepapers(items, offset, selected_topics, selected_tags, format, selected_agencies, search, start_date, end_date, sort_by);\n    const topics = await wordpress.fetchTopics();\n    const tags = await wordpress.fetchTags();\n    const formats = await wordpress.fetchFormats();\n    const agencies = await wordpress.fetchAgencies('');\n    return {\n      topic,\n      whitepapers,\n      topics,\n      tags,\n      formats,\n      agencies\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      topic\n    } = this.props;\n    this.setState(state => ({\n      selected_topics: [topic.id],\n      whitepapers: this.props.whitepapers\n    })); // if( process.browser ) {\n    //\n    // \twindow.broadstreet = window.broadstreet || { run: [] };\n    // \twindow.broadstreet.run.push(function() {\n    // \t\twindow.broadstreet.refreshAll();\n    // \t});\n    //\n    // } else {\n    // \tthis.setState(state => ({\n    // \t\twhitepapers: this.props.whitepapers\n    // \t}));\n    // }\n\n    (function matchHeight() {\n      setTimeout(function (e) {\n        var getDivs = document.getElementsByClassName('match-height');\n        var arrayLength = getDivs.length;\n        var heights = [];\n\n        for (var i = 0; i < arrayLength; i++) {\n          heights.push(getDivs[i].offsetHeight);\n        }\n\n        function getHighest() {\n          return Math.max(...heights);\n        }\n\n        var tallest = getHighest();\n\n        for (var i = 0; i < getDivs.length; i++) {\n          getDivs[i].style.minHeight = tallest + \"px\";\n        }\n      }, 750);\n    })();\n  }\n\n  componentDidUpdate() {\n    const {\n      working\n    } = this.state;\n    let html = document.querySelector('html');\n\n    if (working) {\n      html.classList.add('working');\n    } else {\n      html.classList.remove('working');\n    }\n  }\n\n  async _loadMore() {\n    this.setState({\n      working: true\n    });\n    const wordpress = new WordpressService();\n    let items = this.state.per_page;\n    let sort_by = this.state.sort_by;\n    let offset = this.state.whitepapers.length;\n    let topics = this.state.selected_topics;\n    let tags = this.state.selected_tags;\n    let agencies = this.state.selected_tags;\n    let format = this.state.selected_format;\n    let search = this.state.search_term;\n    let start_date = this.state.start_date;\n    let end_date = this.state.end_date;\n    topics = Array.prototype.map.call(topics, s => s.term_id).toString();\n    tags = Array.prototype.map.call(tags, s => s.term_id).toString();\n    agencies = Array.prototype.map.call(agencies, s => s.term_id).toString();\n    const whitepapers = await wordpress.fetchWhitepapers(items, offset, topics, tags, format, agencies, search, start_date, end_date, sort_by);\n\n    if (whitepapers.length < items) {\n      this.setState({\n        reached_end: true\n      });\n    }\n\n    this.setState({\n      whitepapers: [...this.state.whitepapers, ...whitepapers],\n      working: false\n    });\n  }\n\n  async handleChange(event) {\n    let name = event.target.getAttribute('name');\n\n    if (name == 'select_topic') {\n      let topic_id = event.target.value;\n\n      if (topic_id == 0) {\n        return;\n      }\n\n      let topic_r = this.state.selected_topics;\n\n      if (this.state.selected_topics.length >= 5) {\n        return;\n      }\n\n      let topic = this.props.topics.find(element => element.term_id == topic_id);\n      let index = topic_r.findIndex(term_id => term_id == topic_id);\n\n      if (index === -1) {\n        topic_r.push(topic.term_id);\n        this.setState({\n          'selected_topics': topic_r\n        });\n      }\n\n      let select = document.querySelector('select[name=\"select_topic\"]');\n      select.selectedIndex = 0;\n    } else if (name == 'select_tag') {\n      let tag_id = event.target.value;\n\n      if (tag_id == 0) {\n        return;\n      }\n\n      let tag_r = this.state.selected_tags;\n\n      if (this.state.selected_tags.length >= 5) {\n        return;\n      }\n\n      let tag = this.props.tags.find(element => element.term_id == tag_id);\n      let index = tag_r.findIndex(term_id => term_id == tag_id);\n\n      if (index === -1) {\n        tag_r.push(tag.term_id);\n        this.setState({\n          'selected_tags': tag_r\n        });\n      }\n\n      let select = document.querySelector('select[name=\"select_tag\"]');\n      select.selectedIndex = 0;\n    } else if (name == 'select_agency') {\n      let agency_id = event.target.value;\n\n      if (agency_id == 0) {\n        return;\n      }\n\n      let agency_r = this.state.selected_agencies;\n\n      if (this.state.selected_agencies.length >= 5) {\n        return;\n      }\n\n      let agency = this.props.agencies.find(element => element.term_id == agency_id);\n      let index = agency_r.findIndex(term_id => term_id == agency_id);\n\n      if (index === -1) {\n        agency_r.push(agency.term_id);\n        this.setState({\n          'selected_agencies': agency_r\n        });\n      }\n\n      let select = document.querySelector('select[name=\"select_agency\"]');\n      select.selectedIndex = 0;\n    } else if (name == 'select_format') {\n      let format_id = event.target.value;\n\n      if (format_id == 0 || format_id == '0') {\n        this.setState({\n          'selected_format': ''\n        });\n      } else {\n        this.setState({\n          'selected_format': format_id\n        });\n      }\n    } else if (name == 'sort_by') {\n      this.setState({\n        [name]: event.target.value\n      }, () => {\n        this._fetchWhitepapers();\n      });\n    } else if (name == 'per_page') {\n      this.setState({\n        [name]: event.target.value\n      }, () => {\n        this._fetchWhitepapers();\n      });\n    } else {\n      this.setState({\n        [name]: event.target.value\n      }, () => {});\n    }\n  }\n\n  async _fetchWhitepapers() {\n    this.setState({\n      working: true\n    });\n    const wordpress = new WordpressService();\n    let items = this.state.per_page;\n    let sort_by = this.state.sort_by;\n    let offset = 0;\n    let topics = this.state.selected_topics;\n    let tags = this.state.selected_tags;\n    let agencies = this.state.selected_tags;\n    let format = this.state.selected_format;\n    let search = this.state.search_term;\n    let start_date = this.state.start_date;\n    let end_date = this.state.end_date;\n\n    if (start_date) {\n      start_date = new Date(start_date).getTime() / 1000;\n    }\n\n    if (end_date) {\n      end_date = new Date(end_date).getTime() / 1000;\n    }\n\n    topics = Array.prototype.map.call(topics, s => s.term_id).toString();\n    tags = Array.prototype.map.call(tags, s => s.term_id).toString();\n    agencies = Array.prototype.map.call(agencies, s => s.term_id).toString();\n    const whitepapers = await wordpress.fetchWhitepapers(items, offset, topics, tags, format, agencies, search, start_date, end_date, sort_by);\n\n    if (whitepapers.length < items) {\n      this.setState({\n        reached_end: true\n      });\n    }\n\n    this.setState({\n      whitepapers: [...whitepapers],\n      working: false\n    });\n  }\n\n  _renderError(field) {\n    if (this.state.error) {\n      let flat = JSON.stringify(this.state.error);\n\n      if (flat.includes('save_search')) {\n        if (field == 'save_search') {\n          return __jsx(\"span\", {\n            className: `${topicStyles.errorText}`\n          }, this.state.error.save_search);\n        }\n      }\n    }\n  }\n\n  render() {\n    const {\n      user\n    } = this.props;\n    const display_name = this.props.display_name;\n    const {\n      whitepapers\n    } = this.state; // console.log('state');\n    // console.log(this.state);\n    // console.log(whitepapers);\n\n    const {\n      topic\n    } = this.props; //const title = 'Test';\n\n    const title = decodeHTML(topic.title);\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n      key: \"page-title\"\n    }, title), __jsx(\"meta\", {\n      charset: \"utf-8\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"180x180\",\n      href: \"/apple-touch-icon.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"32x32\",\n      href: \"/favicon-32x32.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"16x16\",\n      href: \"/favicon-16x16.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileImage\",\n      content: \"/favicon-270x270.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileColor\",\n      content: \"#ffffff\"\n    }), __jsx(\"link\", {\n      rel: \"manifest\",\n      href: \"/site.webmanifest\"\n    })), __jsx(Header, _extends({}, user, {\n      display_name: display_name\n    })), __jsx(\"div\", {\n      className: `row ${topicStyles.pageHeader}`\n    }, __jsx(\"div\", {\n      className: `row ${topicStyles.breadcrumbRow}`\n    }, __jsx(\"div\", {\n      className: \"small-12 columns text-center\"\n    }, __jsx(Breadcrumbs, {\n      base_path: '/find',\n      base_name: 'Find',\n      name: title\n    })))), __jsx(\"div\", {\n      className: `row ${topicStyles.searchPanel}`\n    }, __jsx(\"div\", {\n      className: `small-12 columns`\n    }, __jsx(\"div\", {\n      className: `input-group ${topicStyles.search}`\n    }, __jsx(\"span\", {\n      className: `input-group-label ${topicStyles.icon}`\n    }, __jsx(\"img\", {\n      src: \"/images/find-search.svg\"\n    })), __jsx(\"input\", {\n      className: `input-group-field ${topicStyles.searchField}`,\n      placeholder: \"Search White Papers\",\n      type: \"search\",\n      name: \"search_term\",\n      value: this.state.search_term,\n      onChange: this.handleChange\n    }), __jsx(\"div\", {\n      className: \"input-group-button\"\n    }, __jsx(\"button\", {\n      className: `button ${topicStyles.filterButton}`,\n      onClick: () => {\n        this._toggleFilterPanel();\n      }\n    }, __jsx(\"img\", {\n      src: \"/images/filter-icon.svg\"\n    }), \"Filter\", this._renderActiveFilters()), __jsx(\"button\", {\n      onClick: () => {\n        this._processSearch();\n      },\n      className: `button ${topicStyles.searchButton}`\n    }, \"Search\"))), this._renderFilterPanel())), __jsx(\"div\", {\n      className: `row ${topicStyles.orderPanel}`\n    }, __jsx(\"div\", {\n      className: `small-12 columns text-right`\n    }, __jsx(\"h4\", {\n      className: topicStyles.topicTitle\n    }, title, \" content\"), __jsx(\"label\", null, \"Sort by\", __jsx(\"select\", {\n      onChange: this.handleChange,\n      name: \"sort_by\"\n    }, __jsx(\"option\", {\n      value: \"relevance\"\n    }, \"Relevance\"), __jsx(\"option\", {\n      value: \"newest\"\n    }, \"Newest\"), __jsx(\"option\", {\n      value: \"oldest\"\n    }, \"Oldest\"), __jsx(\"option\", {\n      value: \"az\"\n    }, \"Title: A-Z\"), __jsx(\"option\", {\n      value: \"za\"\n    }, \"Title: Z-A\"))), __jsx(\"label\", null, \"Results per page\", __jsx(\"select\", {\n      onChange: this.handleChange,\n      name: \"per_page\"\n    }, __jsx(\"option\", {\n      value: \"15\"\n    }, \"15\"), __jsx(\"option\", {\n      value: \"30\"\n    }, \"30\"), __jsx(\"option\", {\n      value: \"60\"\n    }, \"60\"))))), this._renderAdRow(), __jsx(\"div\", {\n      className: `row small-up-1 medium-up-2 large-up-3`\n    }, this._renderNoResults(), whitepapers.map(whitepaper => __jsx(\"div\", {\n      key: whitepaper.ID,\n      className: `column column-block`\n    }, __jsx(WhitePaperCard, {\n      id: whitepaper.ID,\n      slug: whitepaper.slug,\n      title: decodeHTML(whitepaper.title),\n      featured_media: whitepaper.featured_media,\n      excerpt: decodeHTML(whitepaper.excerpt),\n      topics: whitepaper.topics\n    })))), __jsx(\"div\", {\n      className: this._renderLoadMoreClass()\n    }, __jsx(\"button\", {\n      onClick: () => {\n        this._loadMore();\n      },\n      className: `button ${topicStyles.button}`\n    }, \"Load More\")), __jsx(Footer, null));\n  }\n\n}\n\nexport default Topic;","map":null,"metadata":{},"sourceType":"module"}