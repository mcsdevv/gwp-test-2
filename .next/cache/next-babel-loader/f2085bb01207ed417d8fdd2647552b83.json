{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { decodeHTML } from 'entities';\nimport Head from 'next/head';\nimport { HTML } from '../services/util';\nimport Router from 'next/router';\nimport { withRouter } from 'next/router';\nimport React, { Component } from 'react';\nimport WordpressService from '../services/wordpress';\nimport Link from 'next/link';\nimport Header from '../components/Header';\nimport Breadcrumbs from '../components/Breadcrumbs';\nimport Footer from '../components/Footer';\nimport ContactPublisherModal from '../components/ContactPublisherModal';\nimport ClaimContentModal from '../components/ClaimContentModal';\nimport previewWhitePaperStyles from '../public/styles/modules/previewwhitepaper.module.css';\n\nclass PreviewWhitePaper extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"_toggleModal\", () => {\n      this.setState(state => ({\n        contact_publisher_open: !state.contact_publisher_open\n      }));\n    });\n\n    _defineProperty(this, \"_toggleClaimModal\", () => {\n      this.setState(state => ({\n        claim_content_open: !state.claim_content_open\n      }));\n    });\n\n    _defineProperty(this, \"_handleEdit\", () => {\n      Router.push({\n        pathname: '/edit',\n        query: {\n          id: this.props.data.id\n        }\n      });\n    });\n\n    _defineProperty(this, \"_handlePublish\", () => {\n      event.preventDefault();\n      let button, component, json, url, login;\n      button = document.querySelector('.js-publish');\n      component = this;\n      const token = this.props.user.access_token;\n\n      if (!token) {\n        return false;\n      }\n\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/publish-whitepaper';\n      json = JSON.stringify({\n        \"ID\": this.props.data.ID,\n        \"access_token\": token\n      });\n      button.disabled = true;\n      component.setState({\n        working: true\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setTimeout(function (e) {\n          button.disabled = false;\n          let flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: data.message,\n              working: false\n            });\n            return false;\n          }\n\n          Router.push('/thank-you');\n        }, 1000);\n      });\n    });\n\n    _defineProperty(this, \"_renderUserBlock\", () => {\n      const {\n        user\n      } = this.props;\n\n      if (!user) {\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: previewWhitePaperStyles.userBlock\n        }, __jsx(\"div\", {\n          className: previewWhitePaperStyles.gradient\n        }), __jsx(\"div\", {\n          className: previewWhitePaperStyles.content\n        }, __jsx(\"div\", {\n          className: \"row\"\n        }, __jsx(\"div\", {\n          className: \"small-12 columns text-center\"\n        }, __jsx(\"h2\", null, \"Join or Log In to Read More\"), __jsx(\"img\", {\n          className: previewWhitePaperStyles.hr,\n          src: \"/images/sep.svg\",\n          alt: \"\"\n        }), __jsx(\"p\", null, \"Create your free account or log in to continue reading.\"), __jsx(Link, {\n          href: \"/register\"\n        }, __jsx(\"a\", {\n          className: `button ${previewWhitePaperStyles.button}`\n        }, \"Sign Up\")))))));\n      } else {\n        return __jsx(\"div\", null);\n      }\n    });\n\n    _defineProperty(this, \"_downloadWhitepaper\", event => {\n      event.preventDefault();\n      const {\n        user\n      } = this.props;\n\n      if (user != undefined) {\n        const props = this.props;\n        const button = event.target;\n        const component = this;\n        button.disabled = true;\n        component.setState({\n          working: true\n        });\n        setTimeout(function () {\n          const {\n            slug\n          } = props.data;\n          const {\n            ID\n          } = props.data;\n          const {\n            file_url\n          } = props.data;\n          const {\n            content_link\n          } = props.data;\n          let anchor = window.document.createElement('a');\n          window.document.body.appendChild(anchor);\n\n          if (props.data.type == 'external') {\n            anchor.setAttribute('href', content_link);\n          } else {\n            anchor.setAttribute('href', file_url);\n            anchor.setAttribute('download', slug);\n          }\n\n          anchor.setAttribute('target', '_blank');\n          anchor.click();\n          window.document.body.removeChild(anchor);\n          button.disabled = false;\n          component.setState({\n            working: false\n          });\n        }, 1000);\n      } //\n\n    });\n\n    _defineProperty(this, \"_likePaper\", () => {\n      if (this.props.user != undefined) {\n        this.setState(state => ({\n          is_favorite: !state.is_favorite\n        }));\n        let url, json;\n        const {\n          ID\n        } = this.props.data;\n        const token = this.props.user.access_token;\n\n        if (!token) {\n          return false;\n        }\n\n        url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/favorite-whitepaper';\n        json = JSON.stringify({\n          \"ID\": ID,\n          \"access_token\": token\n        });\n        fetch(url, {\n          method: 'post',\n          body: json,\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (response) {\n          console.log(response);\n          return response.json();\n        }).then(function (data) {\n          console.log(data); // setTimeout( function(e) {\n          // \tlet flat = JSON.stringify(data);\n          //\n          // \tif( flat.includes('error') ) {\n          // \t\treturn false;\n          // \t}\n          // }, 300 );\n        });\n      }\n    });\n\n    _defineProperty(this, \"_renderClaimButton\", () => {\n      const {\n        data\n      } = this.props;\n      const user_id = this.props.user ? this.props.user.user.ID : false;\n\n      if (data.user_id == user_id) {\n        return null;\n      } else {\n        return __jsx(\"button\", {\n          onClick: () => this._toggleClaimModal(),\n          className: `button ${previewWhitePaperStyles.claim}`\n        }, \"Is this your content?\");\n      }\n    });\n\n    this.state = {\n      contact_publisher_open: false,\n      claim_content_open: false,\n      working: false,\n      is_favorite: false,\n      show_content: false\n    };\n  }\n\n  static async getInitialProps(ctx) {\n    const wordpress = new WordpressService();\n    const whitepaper = await wordpress.fetchWhitepaper(ctx.query.id);\n    return {\n      data: whitepaper\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      data\n    } = this.props;\n    let html = document.querySelector('html');\n    const {\n      user\n    } = this.props;\n\n    if (!user) {\n      Router.push('/login');\n    }\n\n    if (user.user.id != data.user_id) {\n      Router.push('/');\n    } else {\n      this.setState(state => ({\n        show_content: true\n      }));\n    }\n  }\n\n  componentDidUpdate() {\n    const {\n      working\n    } = this.state;\n    let html = document.querySelector('html');\n\n    if (working) {\n      html.classList.add('working');\n    } else {\n      html.classList.remove('working');\n    }\n  }\n\n  _renderImage() {\n    if (this.props.data.featured_media == false) {\n      return __jsx(\"img\", {\n        src: \"/images/blog-card.jpg\"\n      });\n    } else {\n      if (this.props.data.featured_media.sizes.hasOwnProperty('blog_card')) {\n        return __jsx(\"img\", {\n          src: this.props.data.featured_media.sizes.blog_card.file\n        });\n      } else {\n        return __jsx(\"img\", {\n          src: this.props.data.featured_media.file\n        });\n      }\n    }\n  }\n\n  _renderInfoTable() {\n    const {\n      data\n    } = this.props;\n    return __jsx(\"table\", {\n      className: `stack ${previewWhitePaperStyles.info}`\n    }, __jsx(\"tbody\", null, __jsx(\"tr\", null, __jsx(\"td\", {\n      className: previewWhitePaperStyles.label\n    }, \"Topics:\"), __jsx(\"td\", null, __jsx(\"ul\", null, this.props.data.topics.map((tag, index) => __jsx(\"li\", {\n      key: index\n    }, __jsx(\"a\", null, tag.name)))))), __jsx(\"tr\", null, __jsx(\"td\", {\n      className: previewWhitePaperStyles.label\n    }, \"Tags:\"), __jsx(\"td\", null, __jsx(\"ul\", null, this.props.data.tags.map((tag, index) => __jsx(\"li\", {\n      key: index\n    }, __jsx(\"a\", null, tag.name)))))), __jsx(\"tr\", null, __jsx(\"td\", {\n      className: previewWhitePaperStyles.label\n    }, \"Website:\"), __jsx(\"td\", null, __jsx(\"a\", {\n      href: \"https://govwhitepapers.com\"\n    }, \"https://govwhitepapers.com\"))), __jsx(\"tr\", null, __jsx(\"td\", {\n      className: previewWhitePaperStyles.label\n    }, \"Date:\"), __jsx(\"td\", null, data.publication_date_display)), __jsx(\"tr\", null, __jsx(\"td\", {\n      className: previewWhitePaperStyles.label\n    }, \"Copyright:\"), __jsx(\"td\", null, \"\\xA9 \", data.copyright_notice))));\n  }\n\n  render() {\n    const {\n      data\n    } = this.props;\n    const {\n      user\n    } = this.props;\n    const {\n      authors\n    } = data.authors;\n    const display_name = this.props.display_name;\n    const title = decodeHTML(data.title);\n    const description = decodeHTML(data.description);\n    const seo_title = decodeHTML(data.seo_title);\n    const open_graph_title = decodeHTML(data.open_graph_title);\n    const twitter_title = decodeHTML(data.twitter_title);\n    const seo_desc = decodeHTML(data.seo_desc);\n    const open_graph_desc = decodeHTML(data.open_graph_desc);\n    const twitter_desc = decodeHTML(data.twitter_desc);\n    const open_graph_image_url = decodeHTML(data.open_graph_image_url);\n    const twitter_image_url = decodeHTML(data.twitter_image_url);\n    let like_icon;\n\n    if (this.state.is_favorite == true) {\n      like_icon = __jsx(\"img\", {\n        src: \"/images/liked.png\",\n        alt: \"\"\n      });\n    } else {\n      like_icon = __jsx(\"img\", {\n        src: \"/images/like.svg\",\n        alt: \"\"\n      });\n    }\n\n    if (!this.state.show_content) return null;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n      key: \"whitepaper-title\"\n    }, seo_title), __jsx(\"meta\", {\n      charset: \"utf-8\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"180x180\",\n      href: \"/apple-touch-icon.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"32x32\",\n      href: \"/favicon-32x32.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"16x16\",\n      href: \"/favicon-16x16.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileImage\",\n      content: \"/favicon-270x270.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileColor\",\n      content: \"#ffffff\"\n    }), __jsx(\"link\", {\n      rel: \"manifest\",\n      href: \"/site.webmanifest\"\n    }), __jsx(\"meta\", {\n      property: \"og:title\",\n      content: seo_title,\n      key: \"og-title\"\n    }), __jsx(\"meta\", {\n      name: \"description\",\n      content: seo_desc,\n      key: \"description\"\n    }), __jsx(\"meta\", {\n      property: \"og:locale\",\n      content: \"en_US\",\n      key: \"og-locale\"\n    }), __jsx(\"meta\", {\n      property: \"og:title\",\n      content: open_graph_title,\n      key: \"og-title\"\n    }), __jsx(\"meta\", {\n      property: \"og:description\",\n      content: open_graph_desc,\n      key: \"og-description\"\n    }), __jsx(\"meta\", {\n      property: \"og:url\",\n      content: this.props.data.permalink,\n      key: \"og-url\"\n    }), __jsx(\"meta\", {\n      property: \"og:site_name\",\n      content: \"GovWhitePapers\"\n    }), __jsx(\"meta\", {\n      property: \"og:image\",\n      content: open_graph_image_url,\n      key: \"og-image\"\n    }), __jsx(\"meta\", {\n      property: \"og:image:secure_url\",\n      content: open_graph_image_url,\n      key: \"og-image-secure\"\n    }), __jsx(\"meta\", {\n      name: \"twitter:card\",\n      content: \"summary_large_image\",\n      key: \"twitter-card\"\n    }), __jsx(\"meta\", {\n      name: \"twitter:description\",\n      content: twitter_desc,\n      key: \"twitter-description\"\n    }), __jsx(\"meta\", {\n      name: \"twitter:title\",\n      content: twitter_title,\n      key: \"twitter-title\"\n    }), __jsx(\"meta\", {\n      name: \"twitter:site\",\n      content: \"@GovEventsGroup\",\n      key: \"twitter-site\"\n    }), __jsx(\"meta\", {\n      name: \"twitter:image\",\n      content: twitter_image_url,\n      key: \"twitter-image\"\n    }), __jsx(\"meta\", {\n      name: \"twitter:creator\",\n      content: \"@GovEventsGroup\",\n      key: \"twitter-creator\"\n    })), __jsx(Header, _extends({}, user, {\n      display_name: display_name\n    })), __jsx(\"div\", {\n      className: `${previewWhitePaperStyles.pageContent}`\n    }, this._renderUserBlock(), __jsx(\"div\", {\n      className: `row ${previewWhitePaperStyles.breadcrumbRow}`\n    }, __jsx(\"div\", {\n      className: \"small-12 columns text-center\"\n    }, __jsx(Breadcrumbs, {\n      base_path: '/post',\n      base_name: 'Post your content',\n      name: 'Preview'\n    }))), __jsx(\"div\", {\n      className: \"small-12 columns text-center\"\n    }, __jsx(\"div\", {\n      className: previewWhitePaperStyles.publishAction\n    }, __jsx(\"button\", {\n      onClick: () => {\n        this._handleEdit();\n      },\n      className: `button ${previewWhitePaperStyles.editButton}`\n    }, \"Edit\"), __jsx(\"button\", {\n      onClick: () => {\n        this._handlePublish();\n      },\n      className: `js-publish button ${previewWhitePaperStyles.publishButton}`\n    }, \"Publish\"))), __jsx(\"div\", {\n      className: `row ${previewWhitePaperStyles.content}`\n    }, __jsx(\"div\", {\n      className: \"small-12 medium-7 xxlarge-8 columns\"\n    }, __jsx(\"div\", {\n      className: `${previewWhitePaperStyles.preview}`\n    }, __jsx(\"h1\", null, title), __jsx(\"ul\", {\n      className: previewWhitePaperStyles.authors\n    }, __jsx(\"li\", {\n      className: previewWhitePaperStyles.label\n    }, \"Author(s):\"), data.authors.map((author, index) => __jsx(\"li\", {\n      key: index\n    }, author))), __jsx(HTML, {\n      html: description\n    }))), __jsx(\"div\", {\n      className: \"small-12 medium-5 xxlarge-4 columns\"\n    }, __jsx(\"div\", {\n      className: `${previewWhitePaperStyles.download}`\n    }, __jsx(\"div\", {\n      className: `${previewWhitePaperStyles.image}`\n    }, this._renderImage()), __jsx(\"button\", {\n      onClick: event => {\n        this._downloadWhitepaper(event);\n      },\n      className: `button ${previewWhitePaperStyles.downloadButton}`\n    }, __jsx(\"img\", {\n      src: \"/images/download-icon.png\"\n    }), \"Download\"), __jsx(\"button\", {\n      onClick: () => {\n        this._likePaper();\n      },\n      className: `clearfix button ${previewWhitePaperStyles.like}`\n    }, like_icon), this._renderInfoTable(), this._renderClaimButton(), __jsx(\"button\", {\n      onClick: () => this._toggleModal(),\n      className: `button ${previewWhitePaperStyles.contact}`\n    }, \"Contact Publisher\"))), __jsx(ContactPublisherModal, {\n      open: this.state.contact_publisher_open,\n      toggle: () => this._toggleModal(),\n      whitepaper_id: data.id\n    }), __jsx(ClaimContentModal, {\n      open: this.state.claim_content_open,\n      toggle: () => this._toggleClaimModal(),\n      whitepaper_id: data.id,\n      whitepaper_title: data.title\n    }))), __jsx(Footer, null));\n  }\n\n}\n\nexport default withRouter(PreviewWhitePaper);","map":null,"metadata":{},"sourceType":"module"}