{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport savedSearchCardStyles from '../public/styles/modules/components/savedsearchcard.module.css';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport DatePicker from \"react-datepicker\";\nimport { parseISO, format } from 'date-fns';\nimport subDays from \"date-fns/subDays\";\nimport addDays from \"date-fns/addDays\";\nimport { decodeHTML } from 'entities';\n\nvar SavedSearchCard = /*#__PURE__*/function (_React$Component) {\n  _inherits(SavedSearchCard, _React$Component);\n\n  var _super = _createSuper(SavedSearchCard);\n\n  function SavedSearchCard(props) {\n    var _this;\n\n    _classCallCheck(this, SavedSearchCard);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"removeTopic\", function (id) {\n      var selected_topics = _this.state.selected_topics;\n      var index = selected_topics.findIndex(function (topic) {\n        return topic == id;\n      });\n\n      if (index !== -1) {\n        selected_topics.splice(index, 1);\n\n        _this.setState({\n          'selected_topics': selected_topics\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeTag\", function (id) {\n      var selected_tags = _this.state.selected_tags;\n      var index = selected_tags.findIndex(function (tag) {\n        return tag == id;\n      });\n\n      if (index !== -1) {\n        selected_tags.splice(index, 1);\n\n        _this.setState({\n          'selected_tags': selected_tags\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeAgency\", function (id) {\n      var selected_agencies = _this.state.selected_agencies;\n      var index = selected_agencies.findIndex(function (agency) {\n        return agency == id;\n      });\n\n      if (index !== -1) {\n        selected_agencies.splice(index, 1);\n\n        _this.setState({\n          'selected_agencies': selected_agencies\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setDate\", function (type, date) {\n      if (type == 'start') {\n        _this.setState({\n          start_date: date\n        });\n      } else if (type == 'end') {\n        _this.setState({\n          end_date: date\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_togglePanel\", function () {\n      _this.setState(function (state) {\n        return {\n          open: !state.open\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_searchNow\", function () {\n      Router.push('/find?saved_search=' + _this.props.id);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_getTaxonomyName\", function (term_type, term_id) {\n      var term = _this.props[term_type].find(function (element) {\n        return element.term_id == term_id;\n      });\n\n      return decodeHTML(term.name);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderSelectedTopics\", function () {\n      var selected_topics = _this.state.selected_topics;\n\n      if (selected_topics.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_topics.map(function (term_id) {\n          return __jsx(\"div\", {\n            key: term_id,\n            className: savedSearchCardStyles.selectedTopic\n          }, _this._getTaxonomyName('topics', term_id), __jsx(\"span\", {\n            onClick: function onClick() {\n              _this.removeTopic(term_id);\n            },\n            className: savedSearchCardStyles.close\n          }, __jsx(\"img\", {\n            src: \"/images/close-blue.svg\",\n            alt: \"\"\n          })));\n        }));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderSelectedTags\", function () {\n      var selected_tags = _this.state.selected_tags;\n\n      if (selected_tags.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_tags.map(function (term_id) {\n          return __jsx(\"div\", {\n            key: term_id,\n            className: savedSearchCardStyles.selectedTag\n          }, _this._getTaxonomyName('tags', term_id), __jsx(\"span\", {\n            onClick: function onClick() {\n              _this.removeTag(term_id);\n            },\n            className: savedSearchCardStyles.close\n          }, __jsx(\"img\", {\n            src: \"/images/close-blue.svg\",\n            alt: \"\"\n          })));\n        }));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderActiveFilters\", function () {\n      var count = 0;\n\n      if (_this.state.selected_topics.length > 0) {\n        count++;\n      }\n\n      if (_this.state.selected_tags.length > 0) {\n        count++;\n      }\n\n      if (_this.state.selected_agencies.length > 0) {\n        count++;\n      }\n\n      if (_this.state.selected_format !== '') {\n        count++;\n      }\n\n      if (count == 0) {\n        return null;\n      } else {\n        return __jsx(\"span\", {\n          className: savedSearchCardStyles.activeFilter\n        }, count);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderSelectedAgencies\", function () {\n      var selected_agencies = _this.state.selected_agencies;\n\n      if (selected_agencies.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_agencies.map(function (term_id) {\n          return __jsx(\"div\", {\n            key: term_id,\n            className: savedSearchCardStyles.selectedAgency\n          }, _this._getTaxonomyName('agencies', term_id), __jsx(\"span\", {\n            onClick: function onClick() {\n              _this.removeAgency(term_id); // this.setState(state => ({\n              // \t// organization_id: '',\n              // \t// organization_name: '',\n              // }));\n\n            },\n            className: savedSearchCardStyles.close\n          }, __jsx(\"img\", {\n            src: \"/images/close-blue.svg\",\n            alt: \"\"\n          })));\n        }));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderFilterPanel\", function () {\n      var topics = _this.props.topics;\n      var tags = _this.props.tags;\n      var formats = _this.props.formats;\n      var agencies = _this.props.agencies;\n      var start_date = _this.state.start_date;\n      var end_date = _this.state.end_date;\n\n      if (_this.state.open == true) {\n        return __jsx(\"section\", {\n          className: \"clearfix \".concat(savedSearchCardStyles.filterPanel)\n        }, __jsx(\"button\", {\n          className: savedSearchCardStyles.closePanel,\n          onClick: function onClick(e) {\n            _this._togglePanel();\n          }\n        }, __jsx(\"img\", {\n          src: \"/images/close.svg\",\n          alt: \"\"\n        })), __jsx(\"div\", {\n          className: \"small-up-1 xlarge-up-2\"\n        }, __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: savedSearchCardStyles.topics\n        }, __jsx(\"label\", null, \"Topics\", __jsx(\"select\", {\n          onChange: _this.handleChange,\n          name: \"select_topic\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"Select Interests\"), topics.map(function (topic) {\n          return __jsx(\"option\", {\n            key: topic.term_id,\n            value: topic.term_id\n          }, decodeHTML(topic.name));\n        }))), _this._renderSelectedTopics())), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: savedSearchCardStyles.tags\n        }, __jsx(\"label\", null, \"Tags\", __jsx(\"select\", {\n          onChange: _this.handleChange,\n          name: \"select_tag\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"Select Tags\"), tags.map(function (tag) {\n          return __jsx(\"option\", {\n            key: tag.term_id,\n            value: tag.term_id\n          }, decodeHTML(tag.name));\n        }))), _this._renderSelectedTags())), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: \"row collapse \".concat(savedSearchCardStyles.dateRow)\n        }, __jsx(\"div\", {\n          className: \"small-12 xlarge-6 columns\"\n        }, __jsx(\"label\", null, \"Date Range\", __jsx(\"div\", {\n          className: savedSearchCardStyles.dateBlock\n        }, __jsx(DatePicker, {\n          selectsStart: true,\n          startDate: _this.state.start_date,\n          endDate: _this.state.end_date,\n          placeholderText: \"Start Date\",\n          selected: _this.state.start_date //onChange={this.setPublicationDate}\n          ,\n          onChange: function onChange(date) {\n            _this.setDate('start', date);\n          },\n          minDate: subDays(new Date(), 730),\n          maxDate: addDays(new Date(), 0)\n        }), __jsx(\"span\", {\n          className: savedSearchCardStyles.cal\n        }, __jsx(\"img\", {\n          src: \"/images/calendar.svg\"\n        }))))), __jsx(\"div\", {\n          className: \"small-12 xlarge-6 columns\"\n        }, __jsx(\"label\", null, __jsx(\"span\", {\n          className: savedSearchCardStyles.hiddenLabel\n        }, \"Date Range\"), __jsx(\"div\", {\n          className: savedSearchCardStyles.dateBlock\n        }, __jsx(DatePicker, {\n          placeholderText: \"End Date\",\n          selectsEnd: true,\n          startDate: _this.state.start_date,\n          endDate: _this.state.end_date,\n          minDate: _this.state.start_date,\n          maxDate: addDays(new Date(), 0),\n          selected: _this.state.end_date //onChange={this.setPublicationDate}\n          ,\n          onChange: function onChange(date) {\n            _this.setDate('end', date);\n          }\n        }), __jsx(\"span\", {\n          className: savedSearchCardStyles.cal\n        }, __jsx(\"img\", {\n          src: \"/images/calendar.svg\"\n        }))))))), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"label\", null, \"Format\", __jsx(\"select\", {\n          value: _this.state.selected_format,\n          onChange: _this.handleChange,\n          name: \"select_format\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"All\"), formats.map(function (format) {\n          return __jsx(\"option\", {\n            key: format.term_id,\n            value: format.term_id\n          }, format.name);\n        })))), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: savedSearchCardStyles.agencies\n        }, __jsx(\"label\", null, \"Audience Focus\", __jsx(\"select\", {\n          onChange: _this.handleChange,\n          name: \"select_agency\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"Select Audience\"), agencies.map(function (agency) {\n          return __jsx(\"option\", {\n            key: agency.term_id,\n            value: agency.term_id\n          }, decodeHTML(agency.name));\n        }))), _this._renderSelectedAgencies()))));\n      } else {\n        return null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderActionButtons\", function (id) {\n      if (_this.state.open == true) {\n        return __jsx(\"div\", {\n          className: savedSearchCardStyles.actions\n        }, __jsx(\"button\", {\n          onClick: function onClick() {\n            _this._deleteSavedSearch();\n          },\n          className: \"button \".concat(savedSearchCardStyles[\"delete\"])\n        }, \"Delete\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            _this._saveSearch();\n          },\n          className: \"js-save-search button \".concat(savedSearchCardStyles.saveChanges)\n        }, \"Save Changes\"));\n      } else {\n        return __jsx(\"div\", {\n          className: savedSearchCardStyles.actions\n        }, __jsx(\"button\", {\n          onClick: function onClick() {\n            _this._togglePanel();\n          },\n          className: \"button \".concat(savedSearchCardStyles.edit)\n        }, \"Edit\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            _this._searchNow();\n          },\n          className: \"button \".concat(savedSearchCardStyles.searchNow)\n        }, \"Search Now\"));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderCardClass\", function () {\n      if (_this.state.hide == true) {\n        return \"\".concat(savedSearchCardStyles.card, \" clearfix hide\");\n      } else {\n        return \"\".concat(savedSearchCardStyles.card, \" clearfix\");\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_deleteSavedSearch\", function () {\n      event.preventDefault();\n      var button, component, json, url;\n      component = _assertThisInitialized(_this);\n      var token = _this.props.access_token;\n\n      if (!token) {\n        return false;\n      }\n\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/delete-saved-search';\n      json = JSON.stringify({\n        \"id\": _this.state.id,\n        \"access_token\": token\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        console.log(response);\n        return response.json();\n      }).then(function (data) {\n        console.log(data);\n        component.setState({\n          hide: true\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_saveSearch\", function () {\n      event.preventDefault();\n      var button, component, json, url, login;\n      button = document.querySelector('.js-save-search');\n      component = _assertThisInitialized(_this);\n      var token = _this.props.access_token;\n\n      if (!token) {\n        return false;\n      }\n\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/edit-saved-search';\n      json = JSON.stringify({\n        \"id\": _this.state.id,\n        \"selected_topics\": _this.state.selected_topics,\n        \"selected_tags\": _this.state.selected_tags,\n        \"selected_agencies\": _this.state.selected_agencies,\n        \"selected_format\": _this.state.selected_format,\n        \"start_date\": _this.state.start_date,\n        \"end_date\": _this.state.end_date,\n        \"access_token\": token\n      });\n      button.disabled = true;\n      component.setState({\n        working: true\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setTimeout(function (e) {\n          button.disabled = false;\n          var flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: data.message,\n              working: false\n            });\n            return false;\n          }\n\n          component.setState({\n            working: false,\n            error: false\n          });\n        }, 1000);\n      });\n    });\n\n    _this.state = {\n      open: false,\n      hide: false,\n      id: _this.props.id,\n      selected_topics: _this.props.selected_topics,\n      selected_tags: _this.props.selected_tags,\n      selected_agencies: _this.props.selected_agencies,\n      selected_format: _this.props.selected_format,\n      start_date: _this.processDate('start_date', _this.props.start_date),\n      end_date: _this.processDate('end_date', _this.props.end_date),\n      search_term: _this.props.search_term\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SavedSearchCard, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var working = this.state.working;\n      var html = document.querySelector('html');\n\n      if (working) {\n        html.classList.add('working');\n      } else {\n        html.classList.remove('working');\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function () {\n      var _handleChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var name, topic_id, topic_r, topic, index, select, tag_id, tag_r, tag, _index, _select, agency_id, agency_r, agency, _index2, _select2, format_id;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                name = event.target.getAttribute('name');\n\n                if (!(name == 'select_topic')) {\n                  _context.next = 15;\n                  break;\n                }\n\n                topic_id = event.target.value;\n\n                if (!(topic_id == 0)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                topic_r = this.state.selected_topics;\n\n                if (!(this.state.selected_topics.length >= 5)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 8:\n                topic = this.props.topics.find(function (element) {\n                  return element.term_id == topic_id;\n                });\n                index = topic_r.findIndex(function (topic) {\n                  return topic == topic_id;\n                });\n\n                if (index === -1) {\n                  topic_r.push(topic.term_id);\n                  this.setState({\n                    'selected_topics': topic_r\n                  });\n                }\n\n                select = document.querySelector('select[name=\"select_topic\"]');\n                select.selectedIndex = 0;\n                _context.next = 44;\n                break;\n\n              case 15:\n                if (!(name == 'select_tag')) {\n                  _context.next = 29;\n                  break;\n                }\n\n                tag_id = event.target.value;\n\n                if (!(tag_id == 0)) {\n                  _context.next = 19;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 19:\n                tag_r = this.state.selected_tags;\n\n                if (!(this.state.selected_tags.length >= 5)) {\n                  _context.next = 22;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 22:\n                tag = this.props.tags.find(function (element) {\n                  return element.term_id == tag_id;\n                });\n                _index = tag_r.findIndex(function (tag) {\n                  return tag == tag_id;\n                });\n\n                if (_index === -1) {\n                  tag_r.push(tag.term_id);\n                  this.setState({\n                    'selected_tags': tag_r\n                  });\n                }\n\n                _select = document.querySelector('select[name=\"select_tag\"]');\n                _select.selectedIndex = 0;\n                _context.next = 44;\n                break;\n\n              case 29:\n                if (!(name == 'select_agency')) {\n                  _context.next = 43;\n                  break;\n                }\n\n                agency_id = event.target.value;\n\n                if (!(agency_id == 0)) {\n                  _context.next = 33;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 33:\n                agency_r = this.state.selected_agencies;\n\n                if (!(this.state.selected_agencies.length >= 5)) {\n                  _context.next = 36;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 36:\n                agency = this.props.agencies.find(function (element) {\n                  return element.term_id == agency_id;\n                });\n                _index2 = agency_r.findIndex(function (agency) {\n                  return agency == agency_id;\n                });\n\n                if (_index2 === -1) {\n                  agency_r.push(agency.term_id);\n                  this.setState({\n                    'selected_agencies': agency_r\n                  });\n                }\n\n                _select2 = document.querySelector('select[name=\"select_agency\"]');\n                _select2.selectedIndex = 0;\n                _context.next = 44;\n                break;\n\n              case 43:\n                if (name == 'select_format') {\n                  format_id = event.target.value;\n\n                  if (format_id == 0 || format_id == '0') {\n                    this.setState({\n                      'selected_format': ''\n                    });\n                  } else {\n                    this.setState({\n                      'selected_format': format_id\n                    });\n                  }\n                } else {\n                  this.setState(_defineProperty({}, name, event.target.value), function () {});\n                }\n\n              case 44:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleChange(_x) {\n        return _handleChange.apply(this, arguments);\n      }\n\n      return handleChange;\n    }()\n  }, {\n    key: \"processDate\",\n    value: function processDate(type, date) {\n      if (this.props[type]) {\n        return parseISO(date);\n      } else {\n        return '';\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: this._renderCardClass()\n      }, __jsx(\"div\", {\n        className: \"\".concat(savedSearchCardStyles.control)\n      }, __jsx(\"div\", {\n        className: \"small-12 medium-6 columns \".concat(savedSearchCardStyles.block)\n      }, __jsx(\"h5\", {\n        onClick: function onClick() {\n          _this2._togglePanel();\n        }\n      }, \"Search \\\"\", this.props.name, \"\\\"\")), __jsx(\"div\", {\n        className: \"small-12 medium-6 columns \".concat(savedSearchCardStyles.block)\n      }, this._renderActionButtons(this.props.id))), this._renderFilterPanel()));\n    }\n  }]);\n\n  return SavedSearchCard;\n}(React.Component);\n\nexport default SavedSearchCard;","map":null,"metadata":{},"sourceType":"module"}