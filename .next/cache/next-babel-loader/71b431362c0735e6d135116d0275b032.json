{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport Router from 'next/router';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport DatePicker from \"react-datepicker\";\nimport subDays from \"date-fns/subDays\";\nimport addDays from \"date-fns/addDays\";\nimport { decodeHTML } from 'entities';\nimport WordpressService from '../../services/wordpress';\nimport Header from '../../components/Header';\nimport Footer from '../../components/Footer';\nimport Breadcrumbs from '../../components/Breadcrumbs';\nimport WhitePaperCard from '../../components/WhitePaperCard';\nimport topicStyles from '../../public/styles/modules/topic.module.css';\n\nvar Topic = /*#__PURE__*/function (_React$Component) {\n  _inherits(Topic, _React$Component);\n\n  var _super = _createSuper(Topic);\n\n  function Topic(props) {\n    var _this;\n\n    _classCallCheck(this, Topic);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"removeTopic\", function (id) {\n      var selected_topics = _this.state.selected_topics;\n      var index = selected_topics.findIndex(function (topic) {\n        return topic == id;\n      });\n\n      if (index !== -1) {\n        selected_topics.splice(index, 1);\n\n        _this.setState({\n          'selected_topics': selected_topics\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeTag\", function (id) {\n      var selected_tags = _this.state.selected_tags;\n      var index = selected_tags.findIndex(function (tag) {\n        return tag == id;\n      });\n\n      if (index !== -1) {\n        selected_tags.splice(index, 1);\n\n        _this.setState({\n          'selected_tags': selected_tags\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeAgency\", function (id) {\n      var selected_agencies = _this.state.selected_agencies;\n      var index = selected_agencies.findIndex(function (agency) {\n        return agency == id;\n      });\n\n      if (index !== -1) {\n        selected_agencies.splice(index, 1);\n\n        _this.setState({\n          'selected_agencies': selected_agencies\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_processSearch\", function () {\n      _this.setState({\n        show_ad: false\n      });\n\n      _this._fetchWhitepapers();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setDate\", function (type, date) {\n      if (type == 'start') {\n        _this.setState({\n          start_date: date\n        });\n      } else if (type == 'end') {\n        _this.setState({\n          end_date: date\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_toggleFilterPanel\", function () {\n      _this.setState(function (state) {\n        return {\n          filter_open: !state.filter_open\n        };\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_clearFilters\", function () {\n      _this.setState({\n        selected_topics: [],\n        selected_tags: [],\n        selected_agencies: [],\n        selected_format: '',\n        start_date: '',\n        end_date: '',\n        reached_end: false\n      }, function () {\n        _this._fetchWhitepapers();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_saveSearch\", function () {\n      event.preventDefault();\n      var button, component, json, url, login;\n      button = document.querySelector('.js-save-search');\n      component = _assertThisInitialized(_this);\n\n      if (_this.state.search_term == '') {\n        _this.setState({\n          error: {\n            save_search: 'You must include a search term.'\n          }\n        });\n\n        return false;\n      }\n\n      var token = _this.props.user.access_token;\n\n      if (!token) {\n        return false;\n      }\n\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/save-search';\n      json = JSON.stringify({\n        \"search_term\": _this.state.search_term,\n        \"selected_topics\": _this.state.selected_topics,\n        \"selected_tags\": _this.state.selected_tags,\n        \"selected_agencies\": _this.state.selected_agencies,\n        \"selected_format\": _this.state.selected_format,\n        \"start_date\": _this.state.start_date,\n        \"end_date\": _this.state.end_date,\n        \"access_token\": token\n      });\n      button.disabled = true;\n      component.setState({\n        working: true\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setTimeout(function (e) {\n          button.disabled = false;\n          var flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: data.message,\n              working: false\n            });\n            return false;\n          }\n\n          component.setState({\n            working: false,\n            error: false\n          });\n        }, 1000);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderLoadMoreClass\", function () {\n      if (_this.state.reached_end == true) {\n        return \"\".concat(topicStyles.nav, \" hide\");\n      } else {\n        return \"\".concat(topicStyles.nav);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_getTaxonomyName\", function (term_type, term_id) {\n      var term = _this.props[term_type].find(function (element) {\n        return element.term_id == term_id;\n      });\n\n      return decodeHTML(term.name);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderSelectedTopics\", function () {\n      var selected_topics = _this.state.selected_topics;\n\n      if (selected_topics.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_topics.map(function (term_id) {\n          return __jsx(\"div\", {\n            key: term_id,\n            className: topicStyles.selectedTopic\n          }, _this._getTaxonomyName('topics', term_id), __jsx(\"span\", {\n            onClick: function onClick() {\n              _this.removeTopic(term_id); // this.setState(state => ({\n              // \t// organization_id: '',\n              // \t// organization_name: '',\n              // }));\n\n            },\n            className: topicStyles.close\n          }, __jsx(\"img\", {\n            src: \"/images/close-blue.svg\",\n            alt: \"\"\n          })));\n        }));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderSelectedTags\", function () {\n      var selected_tags = _this.state.selected_tags;\n\n      if (selected_tags.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_tags.map(function (term_id) {\n          return __jsx(\"div\", {\n            key: term_id,\n            className: topicStyles.selectedTag\n          }, _this._getTaxonomyName('tags', term_id), __jsx(\"span\", {\n            onClick: function onClick() {\n              _this.removeTag(term_id); // this.setState(state => ({\n              // \t// organization_id: '',\n              // \t// organization_name: '',\n              // }));\n\n            },\n            className: topicStyles.close\n          }, __jsx(\"img\", {\n            src: \"/images/close-blue.svg\",\n            alt: \"\"\n          })));\n        }));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderSelectedAgencies\", function () {\n      var selected_agencies = _this.state.selected_agencies;\n\n      if (selected_agencies.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_agencies.map(function (term_id) {\n          return __jsx(\"div\", {\n            key: term_id,\n            className: topicStyles.selectedAgency\n          }, _this._getTaxonomyName('agencies', term_id), __jsx(\"span\", {\n            onClick: function onClick() {\n              _this.removeAgency(term_id); // this.setState(state => ({\n              // \t// organization_id: '',\n              // \t// organization_name: '',\n              // }));\n\n            },\n            className: topicStyles.close\n          }, __jsx(\"img\", {\n            src: \"/images/close-blue.svg\",\n            alt: \"\"\n          })));\n        }));\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderActiveFilters\", function () {\n      var count = 0;\n\n      if (_this.state.selected_topics.length > 0) {\n        count++;\n      }\n\n      if (_this.state.selected_tags.length > 0) {\n        count++;\n      }\n\n      if (_this.state.selected_agencies.length > 0) {\n        count++;\n      }\n\n      if (_this.state.selected_format !== '') {\n        count++;\n      }\n\n      if (count == 0) {\n        return null;\n      } else {\n        return __jsx(\"span\", {\n          className: topicStyles.activeFilter\n        }, count);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderNoResults\", function () {\n      var whitepapers = _this.state.whitepapers;\n\n      if (_this.state.whitepapers.length < 1) {\n        return __jsx(\"div\", {\n          className: topicStyles.noResults\n        }, __jsx(\"h3\", {\n          className: \"text-center\"\n        }, \"No results\"));\n      } else {\n        return null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderAdRow\", function () {\n      if (_this.state.show_ad) {\n        return __jsx(\"div\", {\n          className: \"row\"\n        }, __jsx(\"broadstreet-zone\", {\n          \"zone-id\": \"80367\"\n        }));\n      } else {\n        return null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderSaveSearchButton\", function () {\n      var user = _this.props.user;\n\n      if (user) {\n        return __jsx(\"button\", {\n          onClick: function onClick() {\n            _this._saveSearch();\n          },\n          className: \"js-save-search button \".concat(topicStyles.saveSearchButton)\n        }, \"Save Search\");\n      } else {\n        return null;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderFilterPanel\", function () {\n      var topics = _this.props.topics;\n      var tags = _this.props.tags;\n      var formats = _this.props.formats;\n      var agencies = _this.props.agencies;\n\n      if (_this.state.filter_open == true) {\n        return __jsx(\"section\", {\n          className: \"clearfix \".concat(topicStyles.filterPanel)\n        }, __jsx(\"header\", null, __jsx(\"h5\", null, \"Search Filter\"), __jsx(\"div\", {\n          onClick: function onClick() {\n            _this._clearFilters();\n          },\n          className: \"\".concat(topicStyles.clearFilters)\n        }, __jsx(\"div\", null, __jsx(\"img\", {\n          src: \"/images/trash.svg\",\n          alt: \"\"\n        }), __jsx(\"span\", null, \"Clear filters\")))), __jsx(\"div\", {\n          className: \"small-up-1 medium-up-2\"\n        }, __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: topicStyles.topics\n        }, __jsx(\"label\", null, \"Topics\", __jsx(\"select\", {\n          onChange: _this.handleChange,\n          name: \"select_topic\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"Select Interests\"), topics.map(function (topic) {\n          return __jsx(\"option\", {\n            key: topic.term_id,\n            value: topic.term_id\n          }, decodeHTML(topic.name));\n        }))), _this._renderSelectedTopics())), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: topicStyles.tags\n        }, __jsx(\"label\", null, \"Tags\", __jsx(\"select\", {\n          onChange: _this.handleChange,\n          name: \"select_tag\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"Select Tags\"), tags.map(function (tag) {\n          return __jsx(\"option\", {\n            key: tag.term_id,\n            value: tag.term_id\n          }, decodeHTML(tag.name));\n        }))), _this._renderSelectedTags())), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: \"row collapse \".concat(topicStyles.dateRow)\n        }, __jsx(\"div\", {\n          className: \"small-12 medium-6 columns\"\n        }, __jsx(\"label\", null, \"Date Range\", __jsx(\"div\", {\n          className: topicStyles.dateBlock\n        }, __jsx(DatePicker, {\n          selectsStart: true,\n          startDate: _this.state.start_date,\n          endDate: _this.state.end_date,\n          placeholderText: \"Start Date\",\n          selected: _this.state.start_date //onChange={this.setPublicationDate}\n          ,\n          onChange: function onChange(date) {\n            _this.setDate('start', date);\n          },\n          minDate: subDays(new Date(), 730),\n          maxDate: addDays(new Date(), 0)\n        }), __jsx(\"span\", {\n          className: topicStyles.cal\n        }, __jsx(\"img\", {\n          src: \"/images/calendar.svg\"\n        }))))), __jsx(\"div\", {\n          className: \"small-12 medium-6 columns\"\n        }, __jsx(\"label\", null, __jsx(\"span\", {\n          className: topicStyles.hiddenLabel\n        }, \"Date Range\"), __jsx(\"div\", {\n          className: topicStyles.dateBlock\n        }, __jsx(DatePicker, {\n          placeholderText: \"End Date\",\n          selectsEnd: true,\n          startDate: _this.state.start_date,\n          endDate: _this.state.end_date,\n          minDate: _this.state.start_date,\n          maxDate: addDays(new Date(), 0),\n          selected: _this.state.end_date //onChange={this.setPublicationDate}\n          ,\n          onChange: function onChange(date) {\n            _this.setDate('end', date);\n          }\n        }), __jsx(\"span\", {\n          className: topicStyles.cal\n        }, __jsx(\"img\", {\n          src: \"/images/calendar.svg\"\n        }))))))), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"label\", null, \"Format\", __jsx(\"select\", {\n          onChange: _this.handleChange,\n          name: \"select_format\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"All\"), formats.map(function (format) {\n          return __jsx(\"option\", {\n            key: format.term_id,\n            value: format.term_id\n          }, format.name);\n        })))), __jsx(\"div\", {\n          className: \"column column-block\"\n        }, __jsx(\"div\", {\n          className: topicStyles.agencies\n        }, __jsx(\"label\", null, \"Audience Focus\", __jsx(\"select\", {\n          onChange: _this.handleChange,\n          name: \"select_agency\"\n        }, __jsx(\"option\", {\n          value: \"0\"\n        }, \"Select Audience\"), agencies.map(function (agency) {\n          return __jsx(\"option\", {\n            key: agency.term_id,\n            value: agency.term_id\n          }, decodeHTML(agency.name));\n        }))), _this._renderSelectedAgencies()))), __jsx(\"div\", {\n          className: \"small-12 columns text-center\"\n        }, __jsx(\"div\", {\n          className: topicStyles.searchAction\n        }, _this._renderSaveSearchButton(), __jsx(\"button\", {\n          onClick: function onClick() {\n            _this._processSearch();\n          },\n          className: \"button \".concat(topicStyles.searchButton)\n        }, \"Search\")), _this._renderError('save_search')));\n      } else {\n        return null;\n      }\n    });\n\n    _this.state = {\n      whitepapers: [],\n      filter_open: false,\n      selected_topics: [],\n      selected_tags: [],\n      selected_agencies: [],\n      selected_format: '',\n      start_date: '',\n      end_date: '',\n      search_term: '',\n      sort_by: 'relevance',\n      per_page: 15,\n      reached_end: false,\n      show_ad: false,\n      working: false\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Topic, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var topic;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                topic = this.props.topic;\n                this.setState(function (state) {\n                  return {\n                    selected_topics: [topic.id],\n                    whitepapers: _this2.props.whitepapers\n                  };\n                }); // if( process.browser ) {\n                //\n                // \twindow.broadstreet = window.broadstreet || { run: [] };\n                // \twindow.broadstreet.run.push(function() {\n                // \t\twindow.broadstreet.refreshAll();\n                // \t});\n                //\n                // } else {\n                // \tthis.setState(state => ({\n                // \t\twhitepapers: this.props.whitepapers\n                // \t}));\n                // }\n\n                (function matchHeight() {\n                  setTimeout(function (e) {\n                    var getDivs = document.getElementsByClassName('match-height');\n                    var arrayLength = getDivs.length;\n                    var heights = [];\n\n                    for (var i = 0; i < arrayLength; i++) {\n                      heights.push(getDivs[i].offsetHeight);\n                    }\n\n                    function getHighest() {\n                      return Math.max.apply(Math, heights);\n                    }\n\n                    var tallest = getHighest();\n\n                    for (var i = 0; i < getDivs.length; i++) {\n                      getDivs[i].style.minHeight = tallest + \"px\";\n                    }\n                  }, 750);\n                })();\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var working = this.state.working;\n      var html = document.querySelector('html');\n\n      if (working) {\n        html.classList.add('working');\n      } else {\n        html.classList.remove('working');\n      }\n    }\n  }, {\n    key: \"_loadMore\",\n    value: function () {\n      var _loadMore2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var wordpress, items, sort_by, offset, topics, tags, agencies, format, search, start_date, end_date, whitepapers;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.setState({\n                  working: true\n                });\n                wordpress = new WordpressService();\n                items = this.state.per_page;\n                sort_by = this.state.sort_by;\n                offset = this.state.whitepapers.length;\n                topics = this.state.selected_topics;\n                tags = this.state.selected_tags;\n                agencies = this.state.selected_tags;\n                format = this.state.selected_format;\n                search = this.state.search_term;\n                start_date = this.state.start_date;\n                end_date = this.state.end_date;\n                topics = Array.prototype.map.call(topics, function (s) {\n                  return s.term_id;\n                }).toString();\n                tags = Array.prototype.map.call(tags, function (s) {\n                  return s.term_id;\n                }).toString();\n                agencies = Array.prototype.map.call(agencies, function (s) {\n                  return s.term_id;\n                }).toString();\n                _context2.next = 17;\n                return wordpress.fetchWhitepapers(items, offset, topics, tags, format, agencies, search, start_date, end_date, sort_by);\n\n              case 17:\n                whitepapers = _context2.sent;\n\n                if (whitepapers.length < items) {\n                  this.setState({\n                    reached_end: true\n                  });\n                }\n\n                this.setState({\n                  whitepapers: [].concat(_toConsumableArray(this.state.whitepapers), _toConsumableArray(whitepapers)),\n                  working: false\n                });\n\n              case 20:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _loadMore() {\n        return _loadMore2.apply(this, arguments);\n      }\n\n      return _loadMore;\n    }()\n  }, {\n    key: \"handleChange\",\n    value: function () {\n      var _handleChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n        var _this3 = this;\n\n        var name, topic_id, topic_r, topic, index, select, tag_id, tag_r, tag, _index, _select, agency_id, agency_r, agency, _index2, _select2, format_id;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                name = event.target.getAttribute('name');\n\n                if (!(name == 'select_topic')) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                topic_id = event.target.value;\n\n                if (!(topic_id == 0)) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 5:\n                topic_r = this.state.selected_topics;\n\n                if (!(this.state.selected_topics.length >= 5)) {\n                  _context3.next = 8;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 8:\n                topic = this.props.topics.find(function (element) {\n                  return element.term_id == topic_id;\n                });\n                index = topic_r.findIndex(function (term_id) {\n                  return term_id == topic_id;\n                });\n\n                if (index === -1) {\n                  topic_r.push(topic.term_id);\n                  this.setState({\n                    'selected_topics': topic_r\n                  });\n                }\n\n                select = document.querySelector('select[name=\"select_topic\"]');\n                select.selectedIndex = 0;\n                _context3.next = 44;\n                break;\n\n              case 15:\n                if (!(name == 'select_tag')) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                tag_id = event.target.value;\n\n                if (!(tag_id == 0)) {\n                  _context3.next = 19;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 19:\n                tag_r = this.state.selected_tags;\n\n                if (!(this.state.selected_tags.length >= 5)) {\n                  _context3.next = 22;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 22:\n                tag = this.props.tags.find(function (element) {\n                  return element.term_id == tag_id;\n                });\n                _index = tag_r.findIndex(function (term_id) {\n                  return term_id == tag_id;\n                });\n\n                if (_index === -1) {\n                  tag_r.push(tag.term_id);\n                  this.setState({\n                    'selected_tags': tag_r\n                  });\n                }\n\n                _select = document.querySelector('select[name=\"select_tag\"]');\n                _select.selectedIndex = 0;\n                _context3.next = 44;\n                break;\n\n              case 29:\n                if (!(name == 'select_agency')) {\n                  _context3.next = 43;\n                  break;\n                }\n\n                agency_id = event.target.value;\n\n                if (!(agency_id == 0)) {\n                  _context3.next = 33;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 33:\n                agency_r = this.state.selected_agencies;\n\n                if (!(this.state.selected_agencies.length >= 5)) {\n                  _context3.next = 36;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 36:\n                agency = this.props.agencies.find(function (element) {\n                  return element.term_id == agency_id;\n                });\n                _index2 = agency_r.findIndex(function (term_id) {\n                  return term_id == agency_id;\n                });\n\n                if (_index2 === -1) {\n                  agency_r.push(agency.term_id);\n                  this.setState({\n                    'selected_agencies': agency_r\n                  });\n                }\n\n                _select2 = document.querySelector('select[name=\"select_agency\"]');\n                _select2.selectedIndex = 0;\n                _context3.next = 44;\n                break;\n\n              case 43:\n                if (name == 'select_format') {\n                  format_id = event.target.value;\n\n                  if (format_id == 0 || format_id == '0') {\n                    this.setState({\n                      'selected_format': ''\n                    });\n                  } else {\n                    this.setState({\n                      'selected_format': format_id\n                    });\n                  }\n                } else if (name == 'sort_by') {\n                  this.setState(_defineProperty({}, name, event.target.value), function () {\n                    _this3._fetchWhitepapers();\n                  });\n                } else if (name == 'per_page') {\n                  this.setState(_defineProperty({}, name, event.target.value), function () {\n                    _this3._fetchWhitepapers();\n                  });\n                } else {\n                  this.setState(_defineProperty({}, name, event.target.value), function () {});\n                }\n\n              case 44:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleChange(_x) {\n        return _handleChange.apply(this, arguments);\n      }\n\n      return handleChange;\n    }()\n  }, {\n    key: \"_fetchWhitepapers\",\n    value: function () {\n      var _fetchWhitepapers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var wordpress, items, sort_by, offset, topics, tags, agencies, format, search, start_date, end_date, whitepapers;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.setState({\n                  working: true\n                });\n                wordpress = new WordpressService();\n                items = this.state.per_page;\n                sort_by = this.state.sort_by;\n                offset = 0;\n                topics = this.state.selected_topics;\n                tags = this.state.selected_tags;\n                agencies = this.state.selected_tags;\n                format = this.state.selected_format;\n                search = this.state.search_term;\n                start_date = this.state.start_date;\n                end_date = this.state.end_date;\n\n                if (start_date) {\n                  start_date = new Date(start_date).getTime() / 1000;\n                }\n\n                if (end_date) {\n                  end_date = new Date(end_date).getTime() / 1000;\n                }\n\n                topics = Array.prototype.map.call(topics, function (s) {\n                  return s.term_id;\n                }).toString();\n                tags = Array.prototype.map.call(tags, function (s) {\n                  return s.term_id;\n                }).toString();\n                agencies = Array.prototype.map.call(agencies, function (s) {\n                  return s.term_id;\n                }).toString();\n                _context4.next = 19;\n                return wordpress.fetchWhitepapers(items, offset, topics, tags, format, agencies, search, start_date, end_date, sort_by);\n\n              case 19:\n                whitepapers = _context4.sent;\n\n                if (whitepapers.length < items) {\n                  this.setState({\n                    reached_end: true\n                  });\n                }\n\n                this.setState({\n                  whitepapers: _toConsumableArray(whitepapers),\n                  working: false\n                });\n\n              case 22:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _fetchWhitepapers() {\n        return _fetchWhitepapers2.apply(this, arguments);\n      }\n\n      return _fetchWhitepapers;\n    }()\n  }, {\n    key: \"_renderError\",\n    value: function _renderError(field) {\n      if (this.state.error) {\n        var flat = JSON.stringify(this.state.error);\n\n        if (flat.includes('save_search')) {\n          if (field == 'save_search') {\n            return __jsx(\"span\", {\n              className: \"\".concat(topicStyles.errorText)\n            }, this.state.error.save_search);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var user = this.props.user;\n      var display_name = this.props.display_name;\n      var whitepapers = this.state.whitepapers; // console.log('state');\n      // console.log(this.state);\n      // console.log(whitepapers);\n\n      var topic = this.props.topic; //const title = 'Test';\n\n      var title = decodeHTML(topic.title);\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n        key: \"page-title\"\n      }, title), __jsx(\"meta\", {\n        charset: \"utf-8\"\n      }), __jsx(\"link\", {\n        rel: \"apple-touch-icon\",\n        sizes: \"180x180\",\n        href: \"/apple-touch-icon.png\"\n      }), __jsx(\"link\", {\n        rel: \"icon\",\n        type: \"image/png\",\n        sizes: \"32x32\",\n        href: \"/favicon-32x32.png\"\n      }), __jsx(\"link\", {\n        rel: \"icon\",\n        type: \"image/png\",\n        sizes: \"16x16\",\n        href: \"/favicon-16x16.png\"\n      }), __jsx(\"meta\", {\n        name: \"msapplication-TileImage\",\n        content: \"/favicon-270x270.png\"\n      }), __jsx(\"meta\", {\n        name: \"msapplication-TileColor\",\n        content: \"#ffffff\"\n      }), __jsx(\"link\", {\n        rel: \"manifest\",\n        href: \"/site.webmanifest\"\n      })), __jsx(Header, _extends({}, user, {\n        display_name: display_name\n      })), __jsx(\"div\", {\n        className: \"row \".concat(topicStyles.pageHeader)\n      }, __jsx(\"div\", {\n        className: \"row \".concat(topicStyles.breadcrumbRow)\n      }, __jsx(\"div\", {\n        className: \"small-12 columns text-center\"\n      }, __jsx(Breadcrumbs, {\n        base_path: '/find',\n        base_name: 'Find',\n        name: title\n      })))), __jsx(\"div\", {\n        className: \"row \".concat(topicStyles.searchPanel)\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"div\", {\n        className: \"input-group \".concat(topicStyles.search)\n      }, __jsx(\"span\", {\n        className: \"input-group-label \".concat(topicStyles.icon)\n      }, __jsx(\"img\", {\n        src: \"/images/find-search.svg\"\n      })), __jsx(\"input\", {\n        className: \"input-group-field \".concat(topicStyles.searchField),\n        placeholder: \"Search White Papers\",\n        type: \"search\",\n        name: \"search_term\",\n        value: this.state.search_term,\n        onChange: this.handleChange\n      }), __jsx(\"div\", {\n        className: \"input-group-button\"\n      }, __jsx(\"button\", {\n        className: \"button \".concat(topicStyles.filterButton),\n        onClick: function onClick() {\n          _this4._toggleFilterPanel();\n        }\n      }, __jsx(\"img\", {\n        src: \"/images/filter-icon.svg\"\n      }), \"Filter\", this._renderActiveFilters()), __jsx(\"button\", {\n        onClick: function onClick() {\n          _this4._processSearch();\n        },\n        className: \"button \".concat(topicStyles.searchButton)\n      }, \"Search\"))), this._renderFilterPanel())), __jsx(\"div\", {\n        className: \"row \".concat(topicStyles.orderPanel)\n      }, __jsx(\"div\", {\n        className: \"small-12 columns text-right\"\n      }, __jsx(\"h4\", {\n        className: topicStyles.topicTitle\n      }, title, \" content\"), __jsx(\"label\", null, \"Sort by\", __jsx(\"select\", {\n        onChange: this.handleChange,\n        name: \"sort_by\"\n      }, __jsx(\"option\", {\n        value: \"relevance\"\n      }, \"Relevance\"), __jsx(\"option\", {\n        value: \"newest\"\n      }, \"Newest\"), __jsx(\"option\", {\n        value: \"oldest\"\n      }, \"Oldest\"), __jsx(\"option\", {\n        value: \"az\"\n      }, \"Title: A-Z\"), __jsx(\"option\", {\n        value: \"za\"\n      }, \"Title: Z-A\"))), __jsx(\"label\", null, \"Results per page\", __jsx(\"select\", {\n        onChange: this.handleChange,\n        name: \"per_page\"\n      }, __jsx(\"option\", {\n        value: \"15\"\n      }, \"15\"), __jsx(\"option\", {\n        value: \"30\"\n      }, \"30\"), __jsx(\"option\", {\n        value: \"60\"\n      }, \"60\"))))), this._renderAdRow(), __jsx(\"div\", {\n        className: \"row small-up-1 medium-up-2 large-up-3\"\n      }, this._renderNoResults(), whitepapers.map(function (whitepaper) {\n        return __jsx(\"div\", {\n          key: whitepaper.ID,\n          className: \"column column-block\"\n        }, __jsx(WhitePaperCard, {\n          id: whitepaper.ID,\n          slug: whitepaper.slug,\n          title: decodeHTML(whitepaper.title),\n          featured_media: whitepaper.featured_media,\n          excerpt: decodeHTML(whitepaper.excerpt),\n          topics: whitepaper.topics\n        }));\n      })), __jsx(\"div\", {\n        className: this._renderLoadMoreClass()\n      }, __jsx(\"button\", {\n        onClick: function onClick() {\n          _this4._loadMore();\n        },\n        className: \"button \".concat(topicStyles.button)\n      }, \"Load More\")), __jsx(Footer, null));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(ctx) {\n        var wordpress, query, topic, items, sort_by, offset, selected_topics, selected_tags, selected_agencies, format, search, start_date, end_date, whitepapers, topics, tags, formats, agencies;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                wordpress = new WordpressService();\n                query = ctx;\n                _context5.next = 4;\n                return wordpress.fetchTopic(ctx.query.topic);\n\n              case 4:\n                topic = _context5.sent;\n                items = 15;\n                sort_by = 'relevance';\n                offset = 0;\n                selected_topics = [topic.id];\n                selected_tags = [];\n                selected_agencies = [];\n                format = '';\n                search = '';\n                start_date = '';\n                end_date = ''; //selected_topics = Array.prototype.map.call(selected_topics, s => s.term_id).toString();\n\n                _context5.next = 17;\n                return wordpress.fetchWhitepapers(items, offset, selected_topics, selected_tags, format, selected_agencies, search, start_date, end_date, sort_by);\n\n              case 17:\n                whitepapers = _context5.sent;\n                _context5.next = 20;\n                return wordpress.fetchTopics();\n\n              case 20:\n                topics = _context5.sent;\n                _context5.next = 23;\n                return wordpress.fetchTags();\n\n              case 23:\n                tags = _context5.sent;\n                _context5.next = 26;\n                return wordpress.fetchFormats();\n\n              case 26:\n                formats = _context5.sent;\n                _context5.next = 29;\n                return wordpress.fetchAgencies('');\n\n              case 29:\n                agencies = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  topic: topic,\n                  whitepapers: whitepapers,\n                  topics: topics,\n                  tags: tags,\n                  formats: formats,\n                  agencies: agencies\n                });\n\n              case 31:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function getInitialProps(_x2) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return Topic;\n}(React.Component);\n\nexport default Topic;","map":null,"metadata":{},"sourceType":"module"}