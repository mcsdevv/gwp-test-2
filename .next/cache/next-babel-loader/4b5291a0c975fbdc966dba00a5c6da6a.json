{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Header from '../components/Header';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport { decodeHTML } from 'entities';\nimport WordpressService from '../services/wordpress';\nimport Footer from '../components/Footer';\nimport passwordResetStyles from '../public/styles/modules/passwordreset.module.css';\n\nclass PasswordReset extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_processSubmission\", () => {\n      event.preventDefault();\n      var emailAddressField, url, json, button, component;\n      component = this;\n      emailAddressField = document.querySelector('input[name=\"email_address\"]');\n\n      if (!emailAddressField.checkValidity()) {\n        emailAddressField.classList.add('invalid');\n        return false;\n      } else {\n        emailAddressField.classList.remove('invalid');\n      }\n\n      button = document.querySelector('.js-submit');\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/password-reset-request';\n      json = JSON.stringify({\n        \"email_address\": this.state.email_address\n      });\n      button.disabled = true;\n      component.setState({\n        working: true\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setTimeout(function (e) {\n          button.disabled = false;\n          let flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: data.message,\n              working: false\n            });\n            return false;\n          }\n\n          component.setState({\n            email_address: '',\n            confirmation: 'Check your email to complete the process.',\n            working: false\n          }, () => {// Redirect to profile\n            //Router.push('/dashboard')\n          });\n        }, 1000);\n      });\n    });\n\n    _defineProperty(this, \"_processReset\", () => {\n      event.preventDefault();\n\n      if (this.state.new_password.length < 12) {\n        this.setState({\n          error: {\n            new_password: 'Minimum of 12 characters.'\n          }\n        });\n        return;\n      }\n\n      if (this.state.new_password_confirm !== this.state.new_password) {\n        this.setState({\n          error: {\n            new_password_confirm: 'Passwords do not match.'\n          }\n        });\n        return false;\n      }\n\n      var url, json, button, component; //\n\n      component = this;\n      button = document.querySelector('.js-reset');\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/user-password-reset';\n      json = JSON.stringify({\n        \"new_password\": this.state.new_password,\n        \"new_password_confirm\": this.state.new_password_confirm,\n        \"token\": this.props.token\n      }); //\n\n      button.disabled = true; //\n\n      component.setState({\n        working: true\n      }); //\n\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setTimeout(function (e) {\n          button.disabled = false;\n          let flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: {\n                response: data.message\n              },\n              working: false\n            });\n            return false;\n          }\n\n          component.setState({\n            email_address: '',\n            confirmation: 'Your password has been reset.',\n            working: false\n          }, () => {\n            setTimeout(function (e) {\n              Router.push('/');\n            }, 1000);\n          });\n        }, 1000);\n      });\n    });\n\n    this.state = {\n      email_address: '',\n      working: false,\n      confirmation: false,\n      new_password: '',\n      new_password_confirm: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {}\n\n  static async getInitialProps(ctx) {\n    let token = false;\n\n    if (ctx.query.token) {\n      token = ctx.query.token;\n    }\n\n    return {\n      token\n    };\n  }\n\n  handleChange(event) {\n    let name = event.target.getAttribute('name');\n    this.setState({\n      [name]: event.target.value\n    }, () => {});\n  }\n\n  componentDidUpdate() {\n    const {\n      working\n    } = this.state;\n    let html = document.querySelector('html');\n\n    if (working) {\n      html.classList.add('working');\n    } else {\n      html.classList.remove('working');\n    }\n  }\n\n  _renderError(field) {\n    if (this.state.error) {\n      let flat = JSON.stringify(this.state.error);\n\n      if (flat.includes('new_password')) {\n        if (field == 'new_password') {\n          return __jsx(React.Fragment, null, __jsx(\"span\", {\n            className: `${passwordResetStyles.errorText}`\n          }, this.state.error.new_password));\n        }\n      }\n\n      if (flat.includes('new_password_confirm')) {\n        if (field == 'new_password_confirm') {\n          return __jsx(React.Fragment, null, __jsx(\"span\", {\n            className: `${passwordResetStyles.errorText}`\n          }, this.state.error.new_password_confirm));\n        }\n      }\n\n      if (flat.includes('response')) {\n        if (field == 'response') {\n          return __jsx(React.Fragment, null, __jsx(\"p\", null, __jsx(\"span\", {\n            className: `${passwordResetStyles.errorText}`\n          }, this.state.error.response)));\n        }\n      }\n    }\n  }\n\n  _renderContent() {\n    if (this.props.token == false) {\n      return this._renderForm();\n    } else {\n      return this._renderPasswordForm();\n    }\n  }\n\n  _renderForm() {\n    if (this.state.confirmation == false) {\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: `row ${passwordResetStyles.pageHeader} text-center`\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"h1\", null, \"Reset Your Password\"), __jsx(\"img\", {\n        className: passwordResetStyles.hr,\n        src: \"/images/sep.svg\",\n        alt: \"\"\n      }))), __jsx(\"div\", {\n        className: `row ${passwordResetStyles.pageContent}`\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"form\", {\n        className: passwordResetStyles.form\n      }, __jsx(\"div\", {\n        className: `input-group ${passwordResetStyles.reset}`\n      }, __jsx(\"input\", {\n        className: `input-group-field ${passwordResetStyles.emailField}`,\n        onChange: this.handleChange,\n        name: \"email_address\",\n        value: this.state.email_address,\n        type: \"email\",\n        placeholder: \"Email Address\",\n        required: true\n      }), __jsx(\"div\", {\n        className: \"input-group-button\"\n      }, __jsx(\"input\", {\n        onClick: this._processSubmission,\n        type: \"submit\",\n        className: `js-submit button ${passwordResetStyles.searchButton}`,\n        value: \"Send\"\n      })))))));\n    } else {\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: `row ${passwordResetStyles.pageHeader} text-center`\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"h1\", null, \"Reset Your Password\"), __jsx(\"img\", {\n        className: passwordResetStyles.hr,\n        src: \"/images/sep.svg\",\n        alt: \"\"\n      }), __jsx(\"p\", null, \"Submit your email address below and we will send you a confirmation email to reset your password. \"))), __jsx(\"div\", {\n        className: `row ${passwordResetStyles.pageContent}`\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"div\", {\n        className: passwordResetStyles.form\n      }, __jsx(\"h5\", {\n        className: \"text-center\"\n      }, this.state.confirmation)))));\n    }\n  }\n\n  _renderPasswordForm() {\n    if (this.state.confirmation == false) {\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: `row ${passwordResetStyles.pageHeader} text-center`\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"h1\", null, \"Reset Your Password\"), __jsx(\"img\", {\n        className: passwordResetStyles.hr,\n        src: \"/images/sep.svg\",\n        alt: \"\"\n      }), __jsx(\"p\", null, \"Set your new password using the form below.\"))), __jsx(\"div\", {\n        className: `row ${passwordResetStyles.pageContent}`\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"form\", {\n        className: passwordResetStyles.form\n      }, __jsx(\"div\", {\n        className: `${passwordResetStyles.reset}`\n      }, __jsx(\"label\", null, \"New Password \", this._renderError('new_password'), __jsx(\"span\", {\n        className: passwordResetStyles.subLabel\n      }, __jsx(\"span\", {\n        className: passwordResetStyles.dot\n      }, \"\\xB7\"), \" minimum of 10 characters\"), __jsx(\"input\", {\n        onChange: this.handleChange,\n        name: \"new_password\",\n        value: this.state.new_password,\n        type: \"password\",\n        placeholder: \"Type your password\",\n        required: true\n      })), __jsx(\"label\", null, \"Confim New Password \", this._renderError('new_password_confirm'), __jsx(\"input\", {\n        onChange: this.handleChange,\n        name: \"new_password_confirm\",\n        value: this.state.new_password_confirm,\n        type: \"password\",\n        placeholder: \"Verify your password\",\n        required: true\n      })), __jsx(\"div\", {\n        className: `text-right ${passwordResetStyles.send}`\n      }, this._renderError('response'), __jsx(\"input\", {\n        onClick: this._processReset,\n        type: \"submit\",\n        className: \"text-right js-reset button\",\n        value: \"Reset Password\"\n      })))))));\n    } else {\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: `row ${passwordResetStyles.pageHeader} text-center`\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"h1\", null, \"Reset Your Password\"), __jsx(\"img\", {\n        className: passwordResetStyles.hr,\n        src: \"/images/sep.svg\",\n        alt: \"\"\n      }), __jsx(\"p\", null, \"Set your new password using the form below.\"))), __jsx(\"div\", {\n        className: `row ${passwordResetStyles.pageContent}`\n      }, __jsx(\"div\", {\n        className: \"small-12 columns\"\n      }, __jsx(\"div\", {\n        className: passwordResetStyles.form\n      }, __jsx(\"h5\", {\n        className: \"text-center\"\n      }, this.state.confirmation)))));\n    }\n  }\n\n  render() {\n    const display_name = this.props.display_name;\n    const {\n      user\n    } = this.props;\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n      key: \"page-title\"\n    }, \"Reset Password\"), __jsx(\"meta\", {\n      charset: \"utf-8\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"180x180\",\n      href: \"/apple-touch-icon.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"32x32\",\n      href: \"/favicon-32x32.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"16x16\",\n      href: \"/favicon-16x16.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileImage\",\n      content: \"/favicon-270x270.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileColor\",\n      content: \"#ffffff\"\n    }), __jsx(\"link\", {\n      rel: \"manifest\",\n      href: \"/site.webmanifest\"\n    })), __jsx(Header, _extends({}, user, {\n      display_name: display_name\n    })), this._renderContent(), __jsx(Footer, null));\n  }\n\n}\n\nexport default PasswordReset;","map":null,"metadata":{},"sourceType":"module"}