{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Header from '../components/Header';\nimport Head from 'next/head';\nimport Router from 'next/router';\nimport { decodeHTML } from 'entities';\nimport WordpressService from '../services/wordpress';\nimport Footer from '../components/Footer';\nimport passwordResetStyles from '../public/styles/modules/passwordreset.module.css';\n\nvar PasswordReset = /*#__PURE__*/function (_React$Component) {\n  _inherits(PasswordReset, _React$Component);\n\n  var _super = _createSuper(PasswordReset);\n\n  function PasswordReset(props) {\n    var _this;\n\n    _classCallCheck(this, PasswordReset);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"_processSubmission\", function () {\n      event.preventDefault();\n      var emailAddressField, url, json, button, component;\n      component = _assertThisInitialized(_this);\n      emailAddressField = document.querySelector('input[name=\"email_address\"]');\n\n      if (!emailAddressField.checkValidity()) {\n        emailAddressField.classList.add('invalid');\n        return false;\n      } else {\n        emailAddressField.classList.remove('invalid');\n      }\n\n      button = document.querySelector('.js-submit');\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/password-reset-request';\n      json = JSON.stringify({\n        \"email_address\": _this.state.email_address\n      });\n      button.disabled = true;\n      component.setState({\n        working: true\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setTimeout(function (e) {\n          button.disabled = false;\n          var flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: data.message,\n              working: false\n            });\n            return false;\n          }\n\n          component.setState({\n            email_address: '',\n            confirmation: 'Check your email to complete the process.',\n            working: false\n          }, function () {// Redirect to profile\n            //Router.push('/dashboard')\n          });\n        }, 1000);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_processReset\", function () {\n      event.preventDefault();\n\n      if (_this.state.new_password.length < 12) {\n        _this.setState({\n          error: {\n            new_password: 'Minimum of 12 characters.'\n          }\n        });\n\n        return;\n      }\n\n      if (_this.state.new_password_confirm !== _this.state.new_password) {\n        _this.setState({\n          error: {\n            new_password_confirm: 'Passwords do not match.'\n          }\n        });\n\n        return false;\n      }\n\n      var url, json, button, component; //\n\n      component = _assertThisInitialized(_this);\n      button = document.querySelector('.js-reset');\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/user-password-reset';\n      json = JSON.stringify({\n        \"new_password\": _this.state.new_password,\n        \"new_password_confirm\": _this.state.new_password_confirm,\n        \"token\": _this.props.token\n      }); //\n\n      button.disabled = true; //\n\n      component.setState({\n        working: true\n      }); //\n\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setTimeout(function (e) {\n          button.disabled = false;\n          var flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: {\n                response: data.message\n              },\n              working: false\n            });\n            return false;\n          }\n\n          component.setState({\n            email_address: '',\n            confirmation: 'Your password has been reset.',\n            working: false\n          }, function () {\n            setTimeout(function (e) {\n              Router.push('/');\n            }, 1000);\n          });\n        }, 1000);\n      });\n    });\n\n    _this.state = {\n      email_address: '',\n      working: false,\n      confirmation: false,\n      new_password: '',\n      new_password_confirm: ''\n    };\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(PasswordReset, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(event) {\n      var name = event.target.getAttribute('name');\n      this.setState(_defineProperty({}, name, event.target.value), function () {});\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var working = this.state.working;\n      var html = document.querySelector('html');\n\n      if (working) {\n        html.classList.add('working');\n      } else {\n        html.classList.remove('working');\n      }\n    }\n  }, {\n    key: \"_renderError\",\n    value: function _renderError(field) {\n      if (this.state.error) {\n        var flat = JSON.stringify(this.state.error);\n\n        if (flat.includes('new_password')) {\n          if (field == 'new_password') {\n            return __jsx(React.Fragment, null, __jsx(\"span\", {\n              className: \"\".concat(passwordResetStyles.errorText)\n            }, this.state.error.new_password));\n          }\n        }\n\n        if (flat.includes('new_password_confirm')) {\n          if (field == 'new_password_confirm') {\n            return __jsx(React.Fragment, null, __jsx(\"span\", {\n              className: \"\".concat(passwordResetStyles.errorText)\n            }, this.state.error.new_password_confirm));\n          }\n        }\n\n        if (flat.includes('response')) {\n          if (field == 'response') {\n            return __jsx(React.Fragment, null, __jsx(\"p\", null, __jsx(\"span\", {\n              className: \"\".concat(passwordResetStyles.errorText)\n            }, this.state.error.response)));\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_renderContent\",\n    value: function _renderContent() {\n      if (this.props.token == false) {\n        return this._renderForm();\n      } else {\n        return this._renderPasswordForm();\n      }\n    }\n  }, {\n    key: \"_renderForm\",\n    value: function _renderForm() {\n      if (this.state.confirmation == false) {\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: \"row \".concat(passwordResetStyles.pageHeader, \" text-center\")\n        }, __jsx(\"div\", {\n          className: \"small-12 columns\"\n        }, __jsx(\"h1\", null, \"Reset Your Password\"), __jsx(\"img\", {\n          className: passwordResetStyles.hr,\n          src: \"/images/sep.svg\",\n          alt: \"\"\n        }))), __jsx(\"div\", {\n          className: \"row \".concat(passwordResetStyles.pageContent)\n        }, __jsx(\"div\", {\n          className: \"small-12 columns\"\n        }, __jsx(\"form\", {\n          className: passwordResetStyles.form\n        }, __jsx(\"div\", {\n          className: \"input-group \".concat(passwordResetStyles.reset)\n        }, __jsx(\"input\", {\n          className: \"input-group-field \".concat(passwordResetStyles.emailField),\n          onChange: this.handleChange,\n          name: \"email_address\",\n          value: this.state.email_address,\n          type: \"email\",\n          placeholder: \"Email Address\",\n          required: true\n        }), __jsx(\"div\", {\n          className: \"input-group-button\"\n        }, __jsx(\"input\", {\n          onClick: this._processSubmission,\n          type: \"submit\",\n          className: \"js-submit button \".concat(passwordResetStyles.searchButton),\n          value: \"Send\"\n        })))))));\n      } else {\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: \"row \".concat(passwordResetStyles.pageHeader, \" text-center\")\n        }, __jsx(\"div\", {\n          className: \"small-12 columns\"\n        }, __jsx(\"h1\", null, \"Reset Your Password\"), __jsx(\"img\", {\n          className: passwordResetStyles.hr,\n          src: \"/images/sep.svg\",\n          alt: \"\"\n        }), __jsx(\"p\", null, \"Submit your email address below and we will send you a confirmation email to reset your password. \"))), __jsx(\"div\", {\n          className: \"row \".concat(passwordResetStyles.pageContent)\n        }, __jsx(\"div\", {\n          className: \"small-12 columns\"\n        }, __jsx(\"div\", {\n          className: passwordResetStyles.form\n        }, __jsx(\"h5\", {\n          className: \"text-center\"\n        }, this.state.confirmation)))));\n      }\n    }\n  }, {\n    key: \"_renderPasswordForm\",\n    value: function _renderPasswordForm() {\n      if (this.state.confirmation == false) {\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: \"row \".concat(passwordResetStyles.pageHeader, \" text-center\")\n        }, __jsx(\"div\", {\n          className: \"small-12 columns\"\n        }, __jsx(\"h1\", null, \"Reset Your Password\"), __jsx(\"img\", {\n          className: passwordResetStyles.hr,\n          src: \"/images/sep.svg\",\n          alt: \"\"\n        }), __jsx(\"p\", null, \"Set your new password using the form below.\"))), __jsx(\"div\", {\n          className: \"row \".concat(passwordResetStyles.pageContent)\n        }, __jsx(\"div\", {\n          className: \"small-12 columns\"\n        }, __jsx(\"form\", {\n          className: passwordResetStyles.form\n        }, __jsx(\"div\", {\n          className: \"\".concat(passwordResetStyles.reset)\n        }, __jsx(\"label\", null, \"New Password \", this._renderError('new_password'), __jsx(\"span\", {\n          className: passwordResetStyles.subLabel\n        }, __jsx(\"span\", {\n          className: passwordResetStyles.dot\n        }, \"\\xB7\"), \" minimum of 10 characters\"), __jsx(\"input\", {\n          onChange: this.handleChange,\n          name: \"new_password\",\n          value: this.state.new_password,\n          type: \"password\",\n          placeholder: \"Type your password\",\n          required: true\n        })), __jsx(\"label\", null, \"Confim New Password \", this._renderError('new_password_confirm'), __jsx(\"input\", {\n          onChange: this.handleChange,\n          name: \"new_password_confirm\",\n          value: this.state.new_password_confirm,\n          type: \"password\",\n          placeholder: \"Verify your password\",\n          required: true\n        })), __jsx(\"div\", {\n          className: \"text-right \".concat(passwordResetStyles.send)\n        }, this._renderError('response'), __jsx(\"input\", {\n          onClick: this._processReset,\n          type: \"submit\",\n          className: \"text-right js-reset button\",\n          value: \"Reset Password\"\n        })))))));\n      } else {\n        return __jsx(React.Fragment, null, __jsx(\"div\", {\n          className: \"row \".concat(passwordResetStyles.pageHeader, \" text-center\")\n        }, __jsx(\"div\", {\n          className: \"small-12 columns\"\n        }, __jsx(\"h1\", null, \"Reset Your Password\"), __jsx(\"img\", {\n          className: passwordResetStyles.hr,\n          src: \"/images/sep.svg\",\n          alt: \"\"\n        }), __jsx(\"p\", null, \"Set your new password using the form below.\"))), __jsx(\"div\", {\n          className: \"row \".concat(passwordResetStyles.pageContent)\n        }, __jsx(\"div\", {\n          className: \"small-12 columns\"\n        }, __jsx(\"div\", {\n          className: passwordResetStyles.form\n        }, __jsx(\"h5\", {\n          className: \"text-center\"\n        }, this.state.confirmation)))));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var display_name = this.props.display_name;\n      var user = this.props.user;\n      return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n        key: \"page-title\"\n      }, \"Reset Password\"), __jsx(\"meta\", {\n        charset: \"utf-8\"\n      }), __jsx(\"link\", {\n        rel: \"apple-touch-icon\",\n        sizes: \"180x180\",\n        href: \"/apple-touch-icon.png\"\n      }), __jsx(\"link\", {\n        rel: \"icon\",\n        type: \"image/png\",\n        sizes: \"32x32\",\n        href: \"/favicon-32x32.png\"\n      }), __jsx(\"link\", {\n        rel: \"icon\",\n        type: \"image/png\",\n        sizes: \"16x16\",\n        href: \"/favicon-16x16.png\"\n      }), __jsx(\"meta\", {\n        name: \"msapplication-TileImage\",\n        content: \"/favicon-270x270.png\"\n      }), __jsx(\"meta\", {\n        name: \"msapplication-TileColor\",\n        content: \"#ffffff\"\n      }), __jsx(\"link\", {\n        rel: \"manifest\",\n        href: \"/site.webmanifest\"\n      })), __jsx(Header, _extends({}, user, {\n        display_name: display_name\n      })), this._renderContent(), __jsx(Footer, null));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function () {\n      var _getInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(ctx) {\n        var token;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                token = false;\n\n                if (ctx.query.token) {\n                  token = ctx.query.token;\n                }\n\n                return _context.abrupt(\"return\", {\n                  token: token\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function getInitialProps(_x) {\n        return _getInitialProps.apply(this, arguments);\n      }\n\n      return getInitialProps;\n    }()\n  }]);\n\n  return PasswordReset;\n}(React.Component);\n\nexport default PasswordReset;","map":null,"metadata":{},"sourceType":"module"}