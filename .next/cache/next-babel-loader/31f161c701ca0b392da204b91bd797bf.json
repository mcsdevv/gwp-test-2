{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Router from 'next/router';\nimport Head from 'next/head';\nimport fetch from 'isomorphic-unfetch';\nimport Link from 'next/link';\nimport { decodeHTML } from 'entities';\nimport WordpressService from '../services/wordpress';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport registerStyles from '../public/styles/modules/register.module.css';\nimport DatePicker from \"react-datepicker\";\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"_openLogin\", () => {\n      let login = document.querySelector('.js-login');\n      login.click();\n    });\n\n    _defineProperty(this, \"removeTopic\", id => {\n      let selected_topics = this.state.selected_topics;\n      let index = selected_topics.findIndex(topic => topic.term_id == id);\n\n      if (index !== -1) {\n        selected_topics.splice(index, 1);\n        this.setState({\n          'selected_topics': selected_topics\n        });\n        let select = document.querySelector('select[name=\"select_topic\"]');\n        select.selectedIndex = 0;\n      }\n    });\n\n    _defineProperty(this, \"_renderSelectedTopics\", () => {\n      const {\n        selected_topics\n      } = this.state;\n\n      if (selected_topics.length < 1) {\n        return null;\n      } else {\n        return __jsx(React.Fragment, null, selected_topics.map(topic => __jsx(\"div\", {\n          key: topic.term_id,\n          className: registerStyles.selectedTopic\n        }, decodeHTML(topic.name), __jsx(\"span\", {\n          onClick: () => {\n            this.removeTopic(topic.term_id);\n          },\n          className: registerStyles.close\n        }, __jsx(\"img\", {\n          src: \"/images/close-blue.svg\",\n          alt: \"\"\n        })))));\n      }\n    });\n\n    _defineProperty(this, \"_renderOrganizationSelect\", () => {\n      const {\n        agencies\n      } = this.props;\n      const {\n        works_for\n      } = this.state;\n\n      if (works_for == '') {\n        return null;\n      }\n\n      if (works_for == 'private_industry' || works_for == 'government_contractor') {\n        return __jsx(React.Fragment, null, __jsx(\"form\", {\n          autoComplete: \"off\"\n        }, __jsx(\"div\", {\n          className: registerStyles.findOrganization\n        }, __jsx(\"label\", null, \"Find Organization \", this._renderError('organization_name'), __jsx(\"input\", {\n          onChange: this.handleChange,\n          name: \"organization_name\",\n          type: \"search\",\n          autoComplete: this.generateRandomString(),\n          placeholder: \"Start typing your organization's name\"\n        }), this._renderOrganizationsResult()), this._renderSelectedOrganization(), __jsx(\"label\", null, \"Organization Email \", this._renderError('organization_email'), __jsx(\"input\", {\n          onChange: this.handleChange,\n          name: \"organization_email\",\n          autoComplete: this.generateRandomString(),\n          value: this.state.organization_email,\n          type: \"email\",\n          placeholder: \"To verify your affiliation\"\n        }))), __jsx(\"div\", {\n          className: registerStyles.addDivider\n        }, __jsx(\"hr\", null), __jsx(\"span\", null, \"or add new\")), __jsx(\"div\", {\n          className: registerStyles.addOrganization\n        }, __jsx(\"label\", null, \"Add Organization \", this._renderError('new_organization'), __jsx(\"input\", {\n          onChange: this.handleChange,\n          autoComplete: this.generateRandomString(),\n          name: \"new_organization\",\n          type: \"text\",\n          placeholder: \"Type organization name\"\n        }))), __jsx(\"label\", null, \"Organization Email \", this._renderError('new_organization_email'), __jsx(\"input\", {\n          onChange: this.handleChange,\n          name: \"new_organization_email\",\n          value: this.state.new_organization_email,\n          autoComplete: this.generateRandomString(),\n          type: \"email\",\n          placeholder: \"To verify your affiliation\"\n        }))));\n      } else {\n        return __jsx(React.Fragment, null, __jsx(\"label\", null, \"Personal Email \", this._renderError('personal_email'), __jsx(\"span\", {\n          className: registerStyles.subLabel\n        }, __jsx(\"span\", {\n          className: registerStyles.dot\n        }, \"\\xB7\"), \" optional\"), __jsx(\"input\", {\n          onChange: this.handleChange,\n          name: \"personal_email\",\n          value: this.state.personal_email,\n          type: \"email\",\n          placeholder: \"Add your personal email\"\n        })), __jsx(\"label\", null, \"Work Email \", this._renderError('work_email'), __jsx(\"span\", {\n          className: registerStyles.subLabel\n        }, __jsx(\"span\", {\n          className: registerStyles.dot\n        }, \"\\xB7\"), \" optional\"), __jsx(\"input\", {\n          onChange: this.handleChange,\n          name: \"work_email\",\n          value: this.state.work_email,\n          type: \"email\",\n          placeholder: \"Add your work email\"\n        })));\n      }\n    });\n\n    _defineProperty(this, \"_setOrganization\", (id, name) => {\n      let searchInput = document.querySelector('input[name=\"organization_name\"]');\n      searchInput.value = '';\n      this.setState(state => ({\n        organization_id: id,\n        organization_name: name,\n        organizations: []\n      }));\n    });\n\n    _defineProperty(this, \"_renderSelectedOrganization\", () => {\n      const {\n        organization_id\n      } = this.state;\n\n      if (organization_id) {\n        return __jsx(\"div\", {\n          className: registerStyles.selectedOrganization\n        }, this.state.organization_name, __jsx(\"span\", {\n          onClick: () => {\n            this.setState(state => ({\n              organization_id: '',\n              organization_name: ''\n            }));\n          },\n          className: registerStyles.close\n        }, __jsx(\"img\", {\n          src: \"/images/close-blue.svg\",\n          alt: \"\"\n        })));\n      } else {\n        return null;\n      }\n    });\n\n    _defineProperty(this, \"_renderOrganizationsResult\", () => {\n      const {\n        organizations\n      } = this.state;\n\n      if (organizations.length < 1) {\n        return null;\n      } else {\n        return __jsx(\"div\", {\n          className: registerStyles.results\n        }, __jsx(\"ul\", null, organizations.map(org => __jsx(\"li\", {\n          key: org.ID,\n          \"data-id\": org.ID,\n          onClick: () => {\n            this._setOrganization(org.ID, org.name);\n          }\n        }, decodeHTML(org.name)))));\n      }\n    });\n\n    _defineProperty(this, \"_renderTabClass\", tab => {\n      const {\n        active_tab\n      } = this.state;\n\n      if (active_tab == tab) {\n        return `${registerStyles.tab} ${registerStyles.open}`;\n      } else {\n        return `${registerStyles.tab}`;\n      }\n    });\n\n    _defineProperty(this, \"_renderSocialWrapClass\", () => {\n      const {\n        active_tab\n      } = this.state;\n\n      if (active_tab == 1) {\n        return `${registerStyles.socialWrap}`;\n      } else {\n        return `${registerStyles.socialWrap} ${registerStyles.hide}`;\n      }\n    });\n\n    _defineProperty(this, \"_renderControlIcon\", tab => {\n      const {\n        active_tab\n      } = this.state;\n\n      if (active_tab == tab) {\n        return __jsx(\"img\", {\n          src: \"/images/tab-active.svg\"\n        });\n      } else {\n        if (active_tab > tab) {\n          return __jsx(\"img\", {\n            src: \"/images/tab-complete.svg\"\n          });\n        } else {\n          return __jsx(\"img\", {\n            src: \"/images/tab-inactive.svg\"\n          });\n        }\n      }\n    });\n\n    _defineProperty(this, \"_handleRegistration\", () => {\n      event.preventDefault();\n      let button, component, json, url, login, firstNameField, lastNameField, emailAddressField, jobTitleField;\n      button = document.querySelector('.js-register');\n      component = this;\n\n      if (!this.state.works_for) {\n        var selectFormat = document.querySelector('select[name=\"works_for\"]');\n        this.setState({\n          error: {\n            works_for: 'Please select your industry.'\n          }\n        });\n        selectFormat.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\",\n          inline: \"nearest\"\n        });\n        return;\n      }\n\n      if (this.state.job_title.length < 2) {\n        var inputJobTitle = document.querySelector('input[name=\"job_title\"]');\n        this.setState({\n          error: {\n            job_title: 'Invalid job title'\n          }\n        });\n        inputJobTitle.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\",\n          inline: \"nearest\"\n        });\n        return false;\n      }\n\n      url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/register-user';\n      json = JSON.stringify({\n        \"email_address\": this.state.email_address,\n        \"phone_number\": this.state.phone_number,\n        \"password\": this.state.password,\n        \"password_confirm\": parseInt(this.state.password_confirm),\n        \"first_name\": this.state.first_name,\n        \"last_name\": this.state.last_name,\n        \"job_title\": this.state.job_title,\n        \"works_for\": this.state.works_for,\n        \"selected_topics\": this.state.selected_topics,\n        \"organization_id\": this.state.organization_id,\n        \"new_organization\": this.state.new_organization,\n        \"organization_email\": this.state.organization_email,\n        \"new_organization_email\": this.state.new_organization_email,\n        \"personal_email\": this.state.personal_email,\n        \"work_email\": this.state.work_email,\n        \"address\": this.state.address,\n        \"address_line_two\": this.state.address_line_two,\n        \"city\": this.state.city,\n        \"state\": this.state.state,\n        \"country\": this.state.country,\n        \"zip\": this.state.zip\n      });\n      button.disabled = true;\n      component.setState({\n        working: true\n      });\n      fetch(url, {\n        method: 'post',\n        body: json,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        setTimeout(function (e) {\n          button.disabled = false;\n          let flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: data.message,\n              working: false\n            });\n            return false;\n          }\n\n          component.setState({\n            active_tab: '1',\n            email_address: '',\n            phone_number: '',\n            password: '',\n            password_confirm: '',\n            first_name: '',\n            last_name: '',\n            works_for: '',\n            job_title: '',\n            selected_topics: [],\n            organizations: [],\n            organization_id: '',\n            organization_name: '',\n            new_organization: '',\n            organization_email: '',\n            new_organization_email: '',\n            personal_email: '',\n            work_email: '',\n            working: false,\n            error: false\n          }, () => {\n            // Redirect to profile\n            //Router.push('/');\n            let login = document.querySelector('.js-login');\n            login.click();\n            return false;\n          });\n        }, 1000);\n      });\n    });\n\n    _defineProperty(this, \"_toggleTab\", tab => {\n      var controls = document.querySelector('#controls');\n      event.preventDefault();\n\n      if (tab == 2) {\n        var inputEmail = document.querySelector('input[name=\"email_address\"]');\n\n        if (!inputEmail.checkValidity()) {\n          this.setState({\n            error: {\n              email_address: 'Please add a valid email address.'\n            }\n          });\n          inputEmail.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n\n        if (this.state.password.length < 10) {\n          var inputPassword = document.querySelector('input[name=\"password\"]');\n          this.setState({\n            error: {\n              password: 'Minimum of 10 characters.'\n            }\n          });\n          inputPassword.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return;\n        }\n\n        if (this.state.password_confirm !== this.state.password) {\n          this.setState({\n            error: {\n              password_confirm: 'Passwords do not match.'\n            }\n          });\n          return false;\n        } // Verify that email doesn't exist\n\n\n        let component = this;\n        let url = 'https://gwpadmin.codewrangler.io/api/gwp/v1/check-email';\n        let json = JSON.stringify({\n          \"email_address\": this.state.email_address\n        });\n        component.setState({\n          working: true\n        });\n        fetch(url, {\n          method: 'post',\n          body: json,\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          let flat = JSON.stringify(data);\n\n          if (flat.includes('error')) {\n            component.setState({\n              error: data.message,\n              error: {\n                email_address: data.message\n              },\n              working: false\n            });\n            inputEmail.scrollIntoView({\n              behavior: \"smooth\",\n              block: \"end\",\n              inline: \"nearest\"\n            });\n            return false;\n          } else {\n            component.setState(state => ({\n              active_tab: tab,\n              error: false,\n              working: false\n            }));\n            controls.scrollIntoView({\n              behavior: \"smooth\",\n              block: \"end\",\n              inline: \"nearest\"\n            });\n          }\n        });\n      } //\n\n\n      if (tab == 3) {\n        if (this.state.first_name.length < 2) {\n          var inputFirstName = document.querySelector('input[name=\"first_name\"]');\n          this.setState({\n            error: {\n              first_name: 'Invalid first name'\n            }\n          });\n          inputFirstName.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n\n        if (this.state.last_name.length < 2) {\n          var inputLastName = document.querySelector('input[name=\"last_name\"]');\n          this.setState({\n            error: {\n              last_name: 'Invalid last name'\n            }\n          });\n          inputLastName.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n\n        if (this.state.phone_number.length < 7) {\n          var inputPhoneNumber = document.querySelector('input[name=\"phone_number\"]');\n          this.setState({\n            error: {\n              phone_number: 'Invalid phone number'\n            }\n          });\n          inputPhoneNumber.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n\n        if (this.state.country.length < 2) {\n          var countryField = document.querySelector('select[name=\"country\"]');\n          this.setState({\n            error: {\n              country: 'Select your country.'\n            }\n          });\n          countryField.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n\n        if (this.state.address.length < 2) {\n          var addressField = document.querySelector('input[name=\"address\"]');\n          this.setState({\n            error: {\n              address: 'Include your address'\n            }\n          });\n          addressField.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n\n        if (this.state.state == '' || this.state.state == 0 || this.state.state == \"0\") {\n          //var stateField = document.querySelector('select[name=\"state\"]');\n          this.setState({\n            error: {\n              state: 'Select your state.'\n            }\n          }); // stateField.scrollIntoView({\n          // \tbehavior: \"smooth\",\n          // \tblock: \"end\",\n          // \tinline: \"nearest\"\n          // });\n\n          return false;\n        }\n\n        if (this.state.zip.length < 2) {\n          var zipField = document.querySelector('input[name=\"zip\"]');\n          this.setState({\n            error: {\n              zip: 'Include your zip code.'\n            }\n          });\n          zipField.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"end\",\n            inline: \"nearest\"\n          });\n          return false;\n        }\n\n        if (this.state.selected_topics.length < 1) {\n          this.setState({\n            error: {\n              selected_topics: 'Please select at least one area of interest.'\n            }\n          });\n          return;\n        }\n\n        if (this.state.email_address.includes('.gov') || this.state.email_address.includes('.edu') || this.state.email_address.includes('.mil') || this.state.email_address.includes('.us')) {\n          this.setState({\n            work_email: this.state.email_address\n          });\n        }\n\n        this.setState(state => ({\n          active_tab: tab,\n          error: false\n        }));\n        controls.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"end\",\n          inline: \"nearest\"\n        });\n      }\n    });\n\n    this.state = {\n      active_tab: 1,\n      email_address: '',\n      phone_number: '',\n      password: '',\n      password_confirm: '',\n      first_name: '',\n      last_name: '',\n      address: '',\n      address_line_two: '',\n      city: '',\n      state: '',\n      zip: '',\n      country: 'United States',\n      available_states: this._getStates('United States'),\n      works_for: '',\n      job_title: '',\n      selected_topics: [],\n      organizations: [],\n      organization_id: '',\n      organization_name: '',\n      new_organization: '',\n      organization_email: '',\n      new_organization_email: '',\n      personal_email: '',\n      work_email: '',\n      working: false,\n      error: false\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  async componentDidMount() {\n    if (this.props.user) {\n      Router.push('/profile');\n      return false;\n    }\n  }\n\n  componentDidUpdate() {\n    const {\n      working\n    } = this.state;\n    let html = document.querySelector('html');\n\n    if (working) {\n      html.classList.add('working');\n    } else {\n      html.classList.remove('working');\n    }\n  }\n\n  generateRandomString() {\n    return Math.random().toString(15).substring(2, 11) + Math.random().toString(10).substring(2, 10);\n  }\n\n  isURL(url) {\n    var regexp = /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n    return regexp.test(url);\n  }\n\n  async handleChange(event) {\n    let name = event.target.getAttribute('name');\n\n    if (name == 'email_address') {\n      this.setState({\n        [name]: event.target.value\n      });\n    } else if (name == 'phone_number') {\n      this.setState({\n        [name]: event.target.value\n      });\n    } else if (name == 'password') {\n      this.setState({\n        [name]: event.target.value\n      });\n    } else if (name == 'password_confirm') {\n      this.setState({\n        [name]: event.target.value\n      });\n    } else if (name == 'first_name') {\n      this.setState({\n        [name]: event.target.value\n      });\n    } else if (name == 'last_name') {\n      this.setState({\n        [name]: event.target.value\n      });\n    } else if (name == 'country') {\n      this.setState({\n        'available_states': this._getStates(event.target.value)\n      });\n    } else if (name == 'state') {\n      this.setState({\n        [name]: event.target.value\n      });\n    } else if (name == 'works_for') {\n      this.setState({\n        [name]: event.target.value\n      });\n    } else if (name == 'job_title') {\n      this.setState({\n        [name]: event.target.value\n      });\n    } else if (name == 'organization_name') {\n      if (event.target.value.length >= 3) {\n        const wordpress = new WordpressService();\n        const organizations = await wordpress.searchOrganizations(event.target.value, 10);\n        this.setState(state => ({\n          organizations: organizations\n        }));\n      } else {\n        this.setState(state => ({\n          organizations: []\n        }));\n      }\n    } else if (name == 'new_organization') {\n      this.setState({\n        [name]: event.target.value\n      }, () => {\n        this.setState({\n          organization_id: '',\n          organization_email: ''\n        });\n      });\n    } else if (name == 'new_organization_email') {\n      this.setState({\n        [name]: event.target.value\n      }, () => {\n        this.setState({\n          organization_id: '',\n          organization_email: ''\n        });\n      });\n    } else if (name == 'select_topic') {\n      let topic_id = event.target.value;\n\n      if (topic_id == 0) {\n        return;\n      }\n\n      let topic_r = this.state.selected_topics;\n\n      if (this.state.selected_topics.length >= 5) {\n        return;\n      }\n\n      let topic = this.props.topics.find(element => element.term_id == topic_id);\n      let index = topic_r.findIndex(x => x == topic_id);\n\n      if (index === -1) {\n        topic_r.push(topic);\n        this.setState({\n          'selected_topics': topic_r\n        });\n        let select = document.querySelector('select[name=\"select_topic\"]');\n        select.selectedIndex = 0;\n      }\n    } else {\n      this.setState({\n        [name]: event.target.value\n      }, () => {});\n    }\n  }\n\n  _renderError(field) {\n    if (this.state.error) {\n      let flat = JSON.stringify(this.state.error);\n\n      if (flat.includes('email_address')) {\n        if (field == 'email_address') {\n          return __jsx(React.Fragment, null, __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.email_address));\n        }\n      }\n\n      if (flat.includes('phone_number')) {\n        if (field == 'phone_number') {\n          return __jsx(React.Fragment, null, __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.phone_number));\n        }\n      }\n\n      if (flat.includes('password')) {\n        if (field == 'password') {\n          return __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.password);\n        }\n      }\n\n      if (flat.includes('password_confirm')) {\n        if (field == 'password_confirm') {\n          return __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.password_confirm);\n        }\n      }\n\n      if (flat.includes('first_name')) {\n        if (field == 'first_name') {\n          return __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.first_name);\n        }\n      }\n\n      if (flat.includes('last_name')) {\n        if (field == 'last_name') {\n          return __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.last_name);\n        }\n      }\n\n      if (flat.includes('address')) {\n        if (field == 'address') {\n          return __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.address);\n        }\n      }\n\n      if (flat.includes('country')) {\n        if (field == 'country') {\n          return __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.country);\n        }\n      }\n\n      if (flat.includes('state')) {\n        if (field == 'state') {\n          return __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.state);\n        }\n      }\n\n      if (flat.includes('zip')) {\n        if (field == 'zip') {\n          return __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.zip);\n        }\n      }\n\n      if (flat.includes('job_title')) {\n        if (field == 'job_title') {\n          return __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.job_title);\n        }\n      }\n\n      if (flat.includes('works_for')) {\n        if (field == 'works_for') {\n          return __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.works_for);\n        }\n      }\n\n      if (flat.includes('selected_topics')) {\n        if (field == 'selected_topics') {\n          return __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.selected_topics);\n        }\n      }\n\n      if (flat.includes('registration_error')) {\n        if (field == 'registration') {\n          return __jsx(\"span\", {\n            className: `${registerStyles.errorText}`\n          }, this.state.error.selected_topics);\n        }\n      }\n    }\n  }\n\n  _getStates(name) {\n    let {\n      countries\n    } = require('../components/countries.json');\n\n    let index = countries.findIndex(country => country.country == name);\n    return countries[index].states;\n  }\n\n  render() {\n    const display_name = this.props.display_name;\n    const {\n      user\n    } = this.props;\n    const {\n      topics\n    } = this.props;\n\n    let {\n      countries\n    } = require('../components/countries.json');\n\n    return __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", {\n      key: \"page-title\"\n    }, \"Register\"), __jsx(\"meta\", {\n      charset: \"utf-8\"\n    }), __jsx(\"link\", {\n      rel: \"apple-touch-icon\",\n      sizes: \"180x180\",\n      href: \"/apple-touch-icon.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"32x32\",\n      href: \"/favicon-32x32.png\"\n    }), __jsx(\"link\", {\n      rel: \"icon\",\n      type: \"image/png\",\n      sizes: \"16x16\",\n      href: \"/favicon-16x16.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileImage\",\n      content: \"/favicon-270x270.png\"\n    }), __jsx(\"meta\", {\n      name: \"msapplication-TileColor\",\n      content: \"#ffffff\"\n    }), __jsx(\"link\", {\n      rel: \"manifest\",\n      href: \"/site.webmanifest\"\n    }), __jsx(\"meta\", {\n      property: \"og:title\",\n      content: \"Register\",\n      key: \"og-title\"\n    }), __jsx(\"meta\", {\n      name: \"description\",\n      content: \"\",\n      key: \"description\"\n    }), __jsx(\"meta\", {\n      property: \"og:locale\",\n      content: \"en_US\",\n      key: \"og-locale\"\n    }), __jsx(\"meta\", {\n      property: \"og:title\",\n      content: \"Register\",\n      key: \"og-title\"\n    }), __jsx(\"meta\", {\n      property: \"og:description\",\n      content: \"\",\n      key: \"og-description\"\n    }), __jsx(\"meta\", {\n      property: \"og:site_name\",\n      content: \"GovWhitePapers\"\n    })), __jsx(Header, _extends({}, user, {\n      display_name: display_name\n    })), __jsx(\"div\", {\n      className: `row ${registerStyles.pageHeader} text-center`\n    }, __jsx(\"div\", {\n      className: \"small-12 columns\"\n    }, __jsx(\"h1\", null, \"Welcome\"), __jsx(\"img\", {\n      className: registerStyles.hr,\n      src: \"/images/sep.svg\",\n      alt: \"\"\n    }), __jsx(\"p\", null, \"Enter your information below or log in with a social account.\"))), __jsx(\"div\", {\n      className: `row ${registerStyles.pageContent}`\n    }, __jsx(\"div\", {\n      className: `small-12 columns`\n    }, __jsx(\"div\", {\n      id: \"controls\",\n      className: registerStyles.controls\n    }, __jsx(\"ul\", null, __jsx(\"li\", {\n      className: registerStyles.active,\n      onClick: () => {\n        this._toggleTab(1);\n      }\n    }, __jsx(\"div\", {\n      className: registerStyles.icon\n    }, this._renderControlIcon(1)), __jsx(\"span\", null, \"Account\")), __jsx(\"li\", {\n      onClick: () => {\n        this._toggleTab(2);\n      }\n    }, __jsx(\"div\", {\n      className: registerStyles.icon\n    }, this._renderControlIcon(2)), __jsx(\"span\", null, \"Personal\")), __jsx(\"li\", {\n      onClick: () => {\n        this._toggleTab(3);\n      }\n    }, __jsx(\"div\", {\n      className: registerStyles.icon\n    }, this._renderControlIcon(3)), __jsx(\"span\", null, \"Organization\")))), __jsx(\"div\", {\n      className: registerStyles.tabs\n    }, __jsx(\"div\", {\n      className: this._renderTabClass(1)\n    }, __jsx(\"div\", {\n      className: `${registerStyles.form}`\n    }, __jsx(\"div\", {\n      className: `row ${registerStyles.row}`\n    }, __jsx(\"div\", {\n      className: \"small-12 columns\"\n    }, __jsx(\"div\", {\n      className: registerStyles.account\n    }, __jsx(\"label\", null, \"Email \", this._renderError('email_address'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"email_address\",\n      value: this.state.email_address,\n      type: \"email\",\n      placeholder: \"Type your email address\",\n      required: true\n    })), __jsx(\"label\", null, \"Password \", this._renderError('password'), __jsx(\"span\", {\n      className: registerStyles.subLabel\n    }, __jsx(\"span\", {\n      className: registerStyles.dot\n    }, \"\\xB7\"), \" minimum of 10 characters\"), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"password\",\n      value: this.state.password,\n      type: \"password\",\n      placeholder: \"Type your password\",\n      required: true\n    })), __jsx(\"label\", null, \"Confim Password \", this._renderError('password_confirm'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"password_confirm\",\n      value: this.state.password_confirm,\n      type: \"password\",\n      placeholder: \"Verify your password\",\n      required: true\n    }))), __jsx(\"div\", {\n      className: registerStyles.nav\n    }, __jsx(\"button\", {\n      onClick: () => {\n        this._toggleTab(2);\n      },\n      className: `button ${registerStyles.button}`\n    }, \"Continue\")), __jsx(\"div\", {\n      className: this._renderSocialWrapClass()\n    }, __jsx(\"div\", {\n      className: registerStyles.sep\n    }, __jsx(\"img\", {\n      src: \"/images/continue-with.png\",\n      alt: \"\"\n    })), __jsx(\"div\", {\n      className: `${registerStyles.socialBlock}`\n    }, __jsx(\"div\", {\n      className: \"small-12 columns text-center\"\n    }, __jsx(\"ul\", null, __jsx(\"li\", null, __jsx(\"a\", {\n      \"data-close-modal\": true,\n      className: registerStyles.google\n    }, __jsx(\"img\", {\n      \"data-close-modal\": true,\n      className: registerStyles.social,\n      src: \"/images/login-google.png\",\n      alt: \"\"\n    }))), __jsx(\"li\", null, __jsx(\"a\", {\n      \"data-close-modal\": true,\n      className: registerStyles.fb\n    }, __jsx(\"img\", {\n      \"data-close-modal\": true,\n      className: registerStyles.social,\n      src: \"/images/login-fb.png\",\n      alt: \"\"\n    }))), __jsx(\"li\", null, __jsx(\"a\", {\n      \"data-close-modal\": true,\n      className: registerStyles.linkedin\n    }, __jsx(\"img\", {\n      \"data-close-modal\": true,\n      className: registerStyles.social,\n      src: \"/images/login-linkedin.png\",\n      alt: \"\"\n    }))))))), __jsx(\"div\", {\n      className: `${registerStyles.signUp}`\n    }, __jsx(\"div\", {\n      className: \"small-12 columns text-center\"\n    }, __jsx(\"h5\", null, __jsx(\"a\", {\n      onClick: () => {\n        this._openLogin();\n      }\n    }, __jsx(\"span\", {\n      \"data-close-modal\": true\n    }, \"Already have an account?\"), \" Log In \", __jsx(\"img\", {\n      className: registerStyles.linkArrow,\n      \"data-close-modal\": true,\n      src: \"/images/right-arrow-blue.svg\",\n      alt: \"\"\n    }))))))))), __jsx(\"div\", {\n      className: this._renderTabClass(2)\n    }, __jsx(\"div\", {\n      className: `${registerStyles.form}`\n    }, __jsx(\"div\", {\n      className: `row ${registerStyles.row}`\n    }, __jsx(\"div\", {\n      className: \"small-12 columns\"\n    }, __jsx(\"div\", {\n      className: registerStyles.personal\n    }, __jsx(\"label\", null, \"First Name \", this._renderError('first_name'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"first_name\",\n      value: this.state.first_name,\n      type: \"text\",\n      placeholder: \"Type your first name\"\n    })), __jsx(\"label\", null, \"Last Name \", this._renderError('last_name'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"last_name\",\n      value: this.state.last_name,\n      type: \"text\",\n      placeholder: \"Type your last name\"\n    })), __jsx(\"label\", null, \"Phone \", this._renderError('phone_number'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"phone_number\",\n      value: this.state.phone_number,\n      type: \"tel\",\n      placeholder: \"Type your phone number\",\n      required: true\n    })), __jsx(\"div\", {\n      className: registerStyles.country\n    }, __jsx(\"label\", null, \"Country \", this._renderError('country'), __jsx(\"select\", {\n      onChange: this.handleChange,\n      autoComplete: this.generateRandomString(),\n      name: \"country\"\n    }, __jsx(\"option\", {\n      value: \"United States\"\n    }, \"United States\"), countries.map(country => __jsx(\"option\", {\n      key: country.country,\n      value: country.country\n    }, decodeHTML(country.country)))))), __jsx(\"label\", null, \"Address \", this._renderError('address'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"address\",\n      value: this.state.address,\n      type: \"text\",\n      placeholder: \"Type your street address\"\n    })), __jsx(\"label\", null, \"Address Line 2 \", this._renderError('address_line_two'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"address_line_two\",\n      value: this.state.address_line_two,\n      type: \"text\",\n      placeholder: \"(optional)\"\n    })), __jsx(\"label\", null, \"City \", this._renderError('city'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"city\",\n      value: this.state.city,\n      type: \"text\",\n      placeholder: \"City\"\n    })), __jsx(\"div\", {\n      className: registerStyles.state\n    }, __jsx(\"label\", null, \"State \", this._renderError('state'), __jsx(\"select\", {\n      onChange: this.handleChange,\n      autoComplete: this.generateRandomString(),\n      name: \"state\"\n    }, __jsx(\"option\", {\n      value: \"0\"\n    }, \"Select Your State\"), this.state.available_states.map(state => __jsx(\"option\", {\n      key: state,\n      value: state\n    }, decodeHTML(state)))))), __jsx(\"label\", null, \"Zip \", this._renderError('zip'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"zip\",\n      value: this.state.zip,\n      type: \"text\",\n      placeholder: \"Zip Code\"\n    })), __jsx(\"div\", {\n      className: registerStyles.topics\n    }, __jsx(\"label\", null, \"Areas of Interest \", this._renderError('selected_topics'), __jsx(\"span\", {\n      className: registerStyles.subLabel\n    }, __jsx(\"span\", {\n      className: registerStyles.dot\n    }, \"\\xB7\"), \" up to 5\"), __jsx(\"select\", {\n      onChange: this.handleChange,\n      name: \"select_topic\"\n    }, __jsx(\"option\", {\n      value: \"0\"\n    }, \"Select Interests\"), topics.map(topic => __jsx(\"option\", {\n      key: topic.term_id,\n      value: topic.term_id\n    }, decodeHTML(topic.name))))), this._renderSelectedTopics())), __jsx(\"div\", {\n      className: registerStyles.nav\n    }, __jsx(\"button\", {\n      onClick: () => {\n        this._toggleTab(3);\n      },\n      className: `button ${registerStyles.button}`\n    }, \"Continue\")))))), __jsx(\"div\", {\n      className: this._renderTabClass(3)\n    }, __jsx(\"div\", {\n      className: `${registerStyles.form}`\n    }, __jsx(\"div\", {\n      className: `row ${registerStyles.row}`\n    }, __jsx(\"div\", {\n      className: \"small-12 columns\"\n    }, __jsx(\"div\", {\n      className: registerStyles.worksFor\n    }, __jsx(\"label\", null, \"I work for \", this._renderError('works_for'), __jsx(\"select\", {\n      onChange: this.handleChange,\n      autoComplete: this.generateRandomString(),\n      name: \"works_for\"\n    }, __jsx(\"option\", {\n      value: \"0\"\n    }, \"Select who you work for\"), __jsx(\"option\", {\n      value: \"federal_government\"\n    }, \"Federal Government\"), __jsx(\"option\", {\n      value: \"military\"\n    }, \"Military\"), __jsx(\"option\", {\n      value: \"state_and_local\"\n    }, \"State and Local Government\"), __jsx(\"option\", {\n      value: \"education\"\n    }, \"Education\"), __jsx(\"option\", {\n      value: \"government_contractor\"\n    }, \"Government Contractor\"), __jsx(\"option\", {\n      value: \"private_industry\"\n    }, \"Private Industry\")))), __jsx(\"label\", null, \"Job Title \", this._renderError('job_title'), __jsx(\"input\", {\n      onChange: this.handleChange,\n      name: \"job_title\",\n      value: this.state.job_title,\n      type: \"text\",\n      placeholder: \"Type your job title\"\n    })), __jsx(\"div\", {\n      className: registerStyles.organization\n    }, this._renderOrganizationSelect()), __jsx(\"div\", {\n      className: registerStyles.nav\n    }, __jsx(\"button\", {\n      onClick: () => {\n        this._handleRegistration();\n      },\n      className: `button js-register ${registerStyles.button}`\n    }, \"Complete Registration\")), this._renderError('registration')))))))), __jsx(Footer, null));\n  }\n\n}\n\nexport default Register;\nexport async function getStaticProps(ctx) {\n  const wordpress = new WordpressService();\n  const topics = await wordpress.fetchTopics();\n  const page = await wordpress.fetchPage('register');\n  return {\n    props: {\n      topics,\n      page\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}